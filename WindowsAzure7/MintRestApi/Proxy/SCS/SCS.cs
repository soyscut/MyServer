//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace MS.Support.CMATGateway.Proxy.SCS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="bdkSoap", Namespace="http://tempuri.org/")]
    public partial class bdk : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private UserContextualInfoSoapHeader userContextualInfoSoapHeaderValueField;
        
        private OnBehalfOfSoapHeader onBehalfOfSoapHeaderValueField;
        
        private System.Threading.SendOrPostCallback GetSubscriptionHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceComponentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubscriptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubscriptionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTokenClassRestrictionInfoForPUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTokenClassesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTokenInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTokenInfoExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnconditionalReplacementTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportSettledBillingItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback IssueTokenTrustedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPaymentInstrumentBannedOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadTokenInstanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkTokenDistributionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback MapAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback MatchPaymentInstrumentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback MigrateOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback OffsetLineItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback OffsetLineItem2OperationCompleted;
        
        private System.Threading.SendOrPostCallback OffsetOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback OffsetSingleUsageEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback OrderCDforAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback OrderCDforAnonymousOperationCompleted;
        
        private System.Threading.SendOrPostCallback PayUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessChargebackOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProvisionServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseItemExOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseOfferingOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseOfferingExOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseOfferingEx2OperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseOfferingEx3OperationCompleted;
        
        private System.Threading.SendOrPostCallback ReconcileTokenTrustedOperationCompleted;
        
        private System.Threading.SendOrPostCallback RefundTaxForAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterPaymentInstrumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReinstateSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveBillingReferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePaymentInstrumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePMNBasedServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveRoleAssignmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveViolationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportSingleUsageEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportTransactionEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportUsageEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReschedulePaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchAccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchAccountsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchBillingInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendHCIOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendValidationTokenInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetBillingReferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPartnerConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SettleBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SettleOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback WriteOffBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignAgreementOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopPaymentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback SwitchPaymentInstrumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SyncUPSCacheForPUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback TokenRedemptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransferBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnbanPaymentInstrumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnbanUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnIssueTokenTrustedOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAccountInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePaymentInstrumentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSubscriptionInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateProvisioningDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateTokenExOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPaymentInstrumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRoleAssignmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddViolationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustGotoBAMDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustResourceBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AdjustSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback BanPaymentInstrumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback BanUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback BlacklistTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback CalculateTaxOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelConversionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRenewalOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelSubscriptionExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChargePaymentInstrumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCDAvailabilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckProvisioningStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteConversionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsumeTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertSubscriptionExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertSubscriptionEx2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertSubscriptionEx3OperationCompleted;
        
        private BdkSoapHeader bdkSoapHeaderValueField;
        
        private System.Threading.SendOrPostCallback CreateAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditPaymentInstrumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditPaymentInstrumentExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditPaymentInstrumentEx2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditPaymentInstrumentEx3OperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserProfileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateTokenExOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeliverTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeprovisionServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExtendSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback FixExistingAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountIdFromAdminPUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountIdFromAdminPUIDExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountIdFromPaymentInstrumentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountIdFromPuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountIdFromTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountIdFromTokenIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdjustmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBaseOfferingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBaseOfferingsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBillingPeriodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBillingReferenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEligibleOfferingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEligibleOfferingsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEligibleSwitchPITypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExistingAccountsByCriteriaOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLineItemHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPartnerConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentInstrumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentInstrumentsExOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentInstrumentsEx2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentMethodTypePropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermitHistoryForObjectIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermitsForObjectIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermitsForPUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductClassesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProvisioningInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReferralDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReferralEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResourceBalancesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReplacementTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReplacementTokenFromPuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResourcePricesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatementOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStoredValueTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatementExOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public bdk() {
            this.Url = "https://vm1box/scs/scsapiwebservice.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public UserContextualInfoSoapHeader UserContextualInfoSoapHeaderValue {
            get {
                return this.userContextualInfoSoapHeaderValueField;
            }
            set {
                this.userContextualInfoSoapHeaderValueField = value;
            }
        }
        
        public OnBehalfOfSoapHeader OnBehalfOfSoapHeaderValue {
            get {
                return this.onBehalfOfSoapHeaderValueField;
            }
            set {
                this.onBehalfOfSoapHeaderValueField = value;
            }
        }
        
        public BdkSoapHeader BdkSoapHeaderValue {
            get {
                return this.bdkSoapHeaderValueField;
            }
            set {
                this.bdkSoapHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSubscriptionHistoryCompletedEventHandler GetSubscriptionHistoryCompleted;
        
        /// <remarks/>
        public event GetServiceComponentsCompletedEventHandler GetServiceComponentsCompleted;
        
        /// <remarks/>
        public event GetSubscriptionsCompletedEventHandler GetSubscriptionsCompleted;
        
        /// <remarks/>
        public event GetSubscriptionStatusCompletedEventHandler GetSubscriptionStatusCompleted;
        
        /// <remarks/>
        public event GetTokenClassRestrictionInfoForPUIDCompletedEventHandler GetTokenClassRestrictionInfoForPUIDCompleted;
        
        /// <remarks/>
        public event GetTokenClassesCompletedEventHandler GetTokenClassesCompleted;
        
        /// <remarks/>
        public event GetTokenInfoCompletedEventHandler GetTokenInfoCompleted;
        
        /// <remarks/>
        public event GetTokenInfoExCompletedEventHandler GetTokenInfoExCompleted;
        
        /// <remarks/>
        public event GetTransactionsCompletedEventHandler GetTransactionsCompleted;
        
        /// <remarks/>
        public event GetUnconditionalReplacementTokenCompletedEventHandler GetUnconditionalReplacementTokenCompleted;
        
        /// <remarks/>
        public event GetUserProfileCompletedEventHandler GetUserProfileCompleted;
        
        /// <remarks/>
        public event ImportSettledBillingItemCompletedEventHandler ImportSettledBillingItemCompleted;
        
        /// <remarks/>
        public event IssueTokenTrustedCompletedEventHandler IssueTokenTrustedCompleted;
        
        /// <remarks/>
        public event IsPaymentInstrumentBannedCompletedEventHandler IsPaymentInstrumentBannedCompleted;
        
        /// <remarks/>
        public event LoadTokenInstanceCompletedEventHandler LoadTokenInstanceCompleted;
        
        /// <remarks/>
        public event MarkTokenDistributionStatusCompletedEventHandler MarkTokenDistributionStatusCompleted;
        
        /// <remarks/>
        public event MapAddressCompletedEventHandler MapAddressCompleted;
        
        /// <remarks/>
        public event MatchPaymentInstrumentInfoCompletedEventHandler MatchPaymentInstrumentInfoCompleted;
        
        /// <remarks/>
        public event MigrateOfferCompletedEventHandler MigrateOfferCompleted;
        
        /// <remarks/>
        public event OffsetLineItemCompletedEventHandler OffsetLineItemCompleted;
        
        /// <remarks/>
        public event OffsetLineItem2CompletedEventHandler OffsetLineItem2Completed;
        
        /// <remarks/>
        public event OffsetOrderCompletedEventHandler OffsetOrderCompleted;
        
        /// <remarks/>
        public event OffsetSingleUsageEventCompletedEventHandler OffsetSingleUsageEventCompleted;
        
        /// <remarks/>
        public event OrderCDforAccountCompletedEventHandler OrderCDforAccountCompleted;
        
        /// <remarks/>
        public event OrderCDforAnonymousCompletedEventHandler OrderCDforAnonymousCompleted;
        
        /// <remarks/>
        public event PayUserCompletedEventHandler PayUserCompleted;
        
        /// <remarks/>
        public event ProcessChargebackCompletedEventHandler ProcessChargebackCompleted;
        
        /// <remarks/>
        public event ProvisionServicesCompletedEventHandler ProvisionServicesCompleted;
        
        /// <remarks/>
        public event PurchaseItemCompletedEventHandler PurchaseItemCompleted;
        
        /// <remarks/>
        public event PurchaseItemExCompletedEventHandler PurchaseItemExCompleted;
        
        /// <remarks/>
        public event PurchaseOfferingCompletedEventHandler PurchaseOfferingCompleted;
        
        /// <remarks/>
        public event PurchaseOfferingExCompletedEventHandler PurchaseOfferingExCompleted;
        
        /// <remarks/>
        public event PurchaseOfferingEx2CompletedEventHandler PurchaseOfferingEx2Completed;
        
        /// <remarks/>
        public event PurchaseOfferingEx3CompletedEventHandler PurchaseOfferingEx3Completed;
        
        /// <remarks/>
        public event ReconcileTokenTrustedCompletedEventHandler ReconcileTokenTrustedCompleted;
        
        /// <remarks/>
        public event RefundTaxForAccountCompletedEventHandler RefundTaxForAccountCompleted;
        
        /// <remarks/>
        public event RegisterPaymentInstrumentCompletedEventHandler RegisterPaymentInstrumentCompleted;
        
        /// <remarks/>
        public event ReinstateSubscriptionCompletedEventHandler ReinstateSubscriptionCompleted;
        
        /// <remarks/>
        public event RemoveBillingReferenceCompletedEventHandler RemoveBillingReferenceCompleted;
        
        /// <remarks/>
        public event RemovePaymentInstrumentCompletedEventHandler RemovePaymentInstrumentCompleted;
        
        /// <remarks/>
        public event RemovePMNBasedServicesCompletedEventHandler RemovePMNBasedServicesCompleted;
        
        /// <remarks/>
        public event RemoveRoleAssignmentCompletedEventHandler RemoveRoleAssignmentCompleted;
        
        /// <remarks/>
        public event RemoveViolationCompletedEventHandler RemoveViolationCompleted;
        
        /// <remarks/>
        public event ReportSingleUsageEventCompletedEventHandler ReportSingleUsageEventCompleted;
        
        /// <remarks/>
        public event ReportTransactionEventCompletedEventHandler ReportTransactionEventCompleted;
        
        /// <remarks/>
        public event ReportUsageEventCompletedEventHandler ReportUsageEventCompleted;
        
        /// <remarks/>
        public event ReschedulePaymentCompletedEventHandler ReschedulePaymentCompleted;
        
        /// <remarks/>
        public event SearchAccountsCompletedEventHandler SearchAccountsCompleted;
        
        /// <remarks/>
        public event SearchAccountsExCompletedEventHandler SearchAccountsExCompleted;
        
        /// <remarks/>
        public event SearchBillingInfoCompletedEventHandler SearchBillingInfoCompleted;
        
        /// <remarks/>
        public event SendHCICompletedEventHandler SendHCICompleted;
        
        /// <remarks/>
        public event SendValidationTokenInfoCompletedEventHandler SendValidationTokenInfoCompleted;
        
        /// <remarks/>
        public event SetBillingReferenceCompletedEventHandler SetBillingReferenceCompleted;
        
        /// <remarks/>
        public event SetPartnerConfigurationCompletedEventHandler SetPartnerConfigurationCompleted;
        
        /// <remarks/>
        public event SettleBalanceCompletedEventHandler SettleBalanceCompleted;
        
        /// <remarks/>
        public event SettleOrderCompletedEventHandler SettleOrderCompleted;
        
        /// <remarks/>
        public event WriteOffBalanceCompletedEventHandler WriteOffBalanceCompleted;
        
        /// <remarks/>
        public event SignAgreementCompletedEventHandler SignAgreementCompleted;
        
        /// <remarks/>
        public event StopPaymentsCompletedEventHandler StopPaymentsCompleted;
        
        /// <remarks/>
        public event SubmitOrderCompletedEventHandler SubmitOrderCompleted;
        
        /// <remarks/>
        public event SwitchPaymentInstrumentsCompletedEventHandler SwitchPaymentInstrumentsCompleted;
        
        /// <remarks/>
        public event SyncUPSCacheForPUIDCompletedEventHandler SyncUPSCacheForPUIDCompleted;
        
        /// <remarks/>
        public event TestConnectionCompletedEventHandler TestConnectionCompleted;
        
        /// <remarks/>
        public event TokenRedemptionCompletedEventHandler TokenRedemptionCompleted;
        
        /// <remarks/>
        public event TransferBalanceCompletedEventHandler TransferBalanceCompleted;
        
        /// <remarks/>
        public event UnbanPaymentInstrumentCompletedEventHandler UnbanPaymentInstrumentCompleted;
        
        /// <remarks/>
        public event UnbanUserCompletedEventHandler UnbanUserCompleted;
        
        /// <remarks/>
        public event UnIssueTokenTrustedCompletedEventHandler UnIssueTokenTrustedCompleted;
        
        /// <remarks/>
        public event UpdateAccountInfoCompletedEventHandler UpdateAccountInfoCompleted;
        
        /// <remarks/>
        public event UpdatePaymentInstrumentInfoCompletedEventHandler UpdatePaymentInstrumentInfoCompleted;
        
        /// <remarks/>
        public event UpdateSubscriptionInfoCompletedEventHandler UpdateSubscriptionInfoCompleted;
        
        /// <remarks/>
        public event ValidateProvisioningDataCompletedEventHandler ValidateProvisioningDataCompleted;
        
        /// <remarks/>
        public event ValidateTokenCompletedEventHandler ValidateTokenCompleted;
        
        /// <remarks/>
        public event ActivateTokenCompletedEventHandler ActivateTokenCompleted;
        
        /// <remarks/>
        public event ActivateTokenExCompletedEventHandler ActivateTokenExCompleted;
        
        /// <remarks/>
        public event AddCommentCompletedEventHandler AddCommentCompleted;
        
        /// <remarks/>
        public event AddPaymentInstrumentCompletedEventHandler AddPaymentInstrumentCompleted;
        
        /// <remarks/>
        public event AddRoleAssignmentCompletedEventHandler AddRoleAssignmentCompleted;
        
        /// <remarks/>
        public event AddViolationCompletedEventHandler AddViolationCompleted;
        
        /// <remarks/>
        public event AdjustGotoBAMDateCompletedEventHandler AdjustGotoBAMDateCompleted;
        
        /// <remarks/>
        public event AdjustResourceBalanceCompletedEventHandler AdjustResourceBalanceCompleted;
        
        /// <remarks/>
        public event AdjustSubscriptionCompletedEventHandler AdjustSubscriptionCompleted;
        
        /// <remarks/>
        public event BanPaymentInstrumentCompletedEventHandler BanPaymentInstrumentCompleted;
        
        /// <remarks/>
        public event BanUserCompletedEventHandler BanUserCompleted;
        
        /// <remarks/>
        public event BlacklistTokenCompletedEventHandler BlacklistTokenCompleted;
        
        /// <remarks/>
        public event CalculateTaxCompletedEventHandler CalculateTaxCompleted;
        
        /// <remarks/>
        public event CancelConversionCompletedEventHandler CancelConversionCompleted;
        
        /// <remarks/>
        public event CancelPaymentCompletedEventHandler CancelPaymentCompleted;
        
        /// <remarks/>
        public event CancelRenewalCompletedEventHandler CancelRenewalCompleted;
        
        /// <remarks/>
        public event CancelSubscriptionCompletedEventHandler CancelSubscriptionCompleted;
        
        /// <remarks/>
        public event CancelSubscriptionExCompletedEventHandler CancelSubscriptionExCompleted;
        
        /// <remarks/>
        public event CancelTransactionCompletedEventHandler CancelTransactionCompleted;
        
        /// <remarks/>
        public event ChargePaymentInstrumentCompletedEventHandler ChargePaymentInstrumentCompleted;
        
        /// <remarks/>
        public event CheckCDAvailabilityCompletedEventHandler CheckCDAvailabilityCompleted;
        
        /// <remarks/>
        public event CheckProvisioningStatusCompletedEventHandler CheckProvisioningStatusCompleted;
        
        /// <remarks/>
        public event CloseAccountCompletedEventHandler CloseAccountCompleted;
        
        /// <remarks/>
        public event CloseBalanceCompletedEventHandler CloseBalanceCompleted;
        
        /// <remarks/>
        public event CompleteConversionCompletedEventHandler CompleteConversionCompleted;
        
        /// <remarks/>
        public event ConsumeTokenCompletedEventHandler ConsumeTokenCompleted;
        
        /// <remarks/>
        public event ConvertSubscriptionCompletedEventHandler ConvertSubscriptionCompleted;
        
        /// <remarks/>
        public event ConvertSubscriptionExCompletedEventHandler ConvertSubscriptionExCompleted;
        
        /// <remarks/>
        public event ConvertSubscriptionEx2CompletedEventHandler ConvertSubscriptionEx2Completed;
        
        /// <remarks/>
        public event ConvertSubscriptionEx3CompletedEventHandler ConvertSubscriptionEx3Completed;
        
        /// <remarks/>
        public event CreateAccountCompletedEventHandler CreateAccountCompleted;
        
        /// <remarks/>
        public event CreditPaymentInstrumentCompletedEventHandler CreditPaymentInstrumentCompleted;
        
        /// <remarks/>
        public event CreditPaymentInstrumentExCompletedEventHandler CreditPaymentInstrumentExCompleted;
        
        /// <remarks/>
        public event CreditPaymentInstrumentEx2CompletedEventHandler CreditPaymentInstrumentEx2Completed;
        
        /// <remarks/>
        public event CreditPaymentInstrumentEx3CompletedEventHandler CreditPaymentInstrumentEx3Completed;
        
        /// <remarks/>
        public event SetUserProfileCompletedEventHandler SetUserProfileCompleted;
        
        /// <remarks/>
        public event DeactivateTokenCompletedEventHandler DeactivateTokenCompleted;
        
        /// <remarks/>
        public event DeactivateTokenExCompletedEventHandler DeactivateTokenExCompleted;
        
        /// <remarks/>
        public event DeliverTokenCompletedEventHandler DeliverTokenCompleted;
        
        /// <remarks/>
        public event DeprovisionServicesCompletedEventHandler DeprovisionServicesCompleted;
        
        /// <remarks/>
        public event ExtendSubscriptionCompletedEventHandler ExtendSubscriptionCompleted;
        
        /// <remarks/>
        public event FixExistingAddressCompletedEventHandler FixExistingAddressCompleted;
        
        /// <remarks/>
        public event GetAccountIdFromAdminPUIDCompletedEventHandler GetAccountIdFromAdminPUIDCompleted;
        
        /// <remarks/>
        public event GetAccountIdFromAdminPUIDExCompletedEventHandler GetAccountIdFromAdminPUIDExCompleted;
        
        /// <remarks/>
        public event GetAccountIdFromPaymentInstrumentInfoCompletedEventHandler GetAccountIdFromPaymentInstrumentInfoCompleted;
        
        /// <remarks/>
        public event GetAccountIdFromPuidCompletedEventHandler GetAccountIdFromPuidCompleted;
        
        /// <remarks/>
        public event GetAccountIdFromTokenCompletedEventHandler GetAccountIdFromTokenCompleted;
        
        /// <remarks/>
        public event GetAccountIdFromTokenIdCompletedEventHandler GetAccountIdFromTokenIdCompleted;
        
        /// <remarks/>
        public event GetAccountInfoCompletedEventHandler GetAccountInfoCompleted;
        
        /// <remarks/>
        public event GetAccountStatusCompletedEventHandler GetAccountStatusCompleted;
        
        /// <remarks/>
        public event GetAdjustmentsCompletedEventHandler GetAdjustmentsCompleted;
        
        /// <remarks/>
        public event GetBaseOfferingsCompletedEventHandler GetBaseOfferingsCompleted;
        
        /// <remarks/>
        public event GetBaseOfferingsExCompletedEventHandler GetBaseOfferingsExCompleted;
        
        /// <remarks/>
        public event GetBillingPeriodsCompletedEventHandler GetBillingPeriodsCompleted;
        
        /// <remarks/>
        public event GetBillingReferenceCompletedEventHandler GetBillingReferenceCompleted;
        
        /// <remarks/>
        public event GetCommentsCompletedEventHandler GetCommentsCompleted;
        
        /// <remarks/>
        public event GetEligibleOfferingsCompletedEventHandler GetEligibleOfferingsCompleted;
        
        /// <remarks/>
        public event GetEligibleOfferingsExCompletedEventHandler GetEligibleOfferingsExCompleted;
        
        /// <remarks/>
        public event GetEligibleSwitchPITypesCompletedEventHandler GetEligibleSwitchPITypesCompleted;
        
        /// <remarks/>
        public event GetExistingAccountsByCriteriaCompletedEventHandler GetExistingAccountsByCriteriaCompleted;
        
        /// <remarks/>
        public event GetKeyCompletedEventHandler GetKeyCompleted;
        
        /// <remarks/>
        public event GetLineItemHistoryCompletedEventHandler GetLineItemHistoryCompleted;
        
        /// <remarks/>
        public event GetPartnerConfigurationCompletedEventHandler GetPartnerConfigurationCompleted;
        
        /// <remarks/>
        public event GetPaymentInstrumentsCompletedEventHandler GetPaymentInstrumentsCompleted;
        
        /// <remarks/>
        public event GetPaymentInstrumentsExCompletedEventHandler GetPaymentInstrumentsExCompleted;
        
        /// <remarks/>
        public event GetPaymentInstrumentsEx2CompletedEventHandler GetPaymentInstrumentsEx2Completed;
        
        /// <remarks/>
        public event GetPaymentMethodTypePropertiesCompletedEventHandler GetPaymentMethodTypePropertiesCompleted;
        
        /// <remarks/>
        public event GetPermitHistoryForObjectIdCompletedEventHandler GetPermitHistoryForObjectIdCompleted;
        
        /// <remarks/>
        public event GetPermitsForObjectIdCompletedEventHandler GetPermitsForObjectIdCompleted;
        
        /// <remarks/>
        public event GetPermitsForPUIDCompletedEventHandler GetPermitsForPUIDCompleted;
        
        /// <remarks/>
        public event GetPolicyCompletedEventHandler GetPolicyCompleted;
        
        /// <remarks/>
        public event GetProductClassesCompletedEventHandler GetProductClassesCompleted;
        
        /// <remarks/>
        public event GetProvisioningInfoCompletedEventHandler GetProvisioningInfoCompleted;
        
        /// <remarks/>
        public event GetReferralDataCompletedEventHandler GetReferralDataCompleted;
        
        /// <remarks/>
        public event GetReferralEventsCompletedEventHandler GetReferralEventsCompleted;
        
        /// <remarks/>
        public event GetResourceBalancesCompletedEventHandler GetResourceBalancesCompleted;
        
        /// <remarks/>
        public event GetReplacementTokenCompletedEventHandler GetReplacementTokenCompleted;
        
        /// <remarks/>
        public event GetReplacementTokenFromPuidCompletedEventHandler GetReplacementTokenFromPuidCompleted;
        
        /// <remarks/>
        public event GetResourcePricesCompletedEventHandler GetResourcePricesCompleted;
        
        /// <remarks/>
        public event GetStatementCompletedEventHandler GetStatementCompleted;
        
        /// <remarks/>
        public event GetStoredValueTransactionsCompletedEventHandler GetStoredValueTransactionsCompleted;
        
        /// <remarks/>
        public event GetStatementExCompletedEventHandler GetStatementExCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptionHistory", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetSubscriptionHistory(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out int plHistoryEventCount, out string pbstrSubscriptionHistoryEventSetXML) {
            object[] results = this.Invoke("GetSubscriptionHistory", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId});
            pbstrErrorXML = ((string)(results[0]));
            plHistoryEventCount = ((int)(results[1]));
            pbstrSubscriptionHistoryEventSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetSubscriptionHistoryAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId) {
            this.GetSubscriptionHistoryAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrSubscriptionId, null);
        }
        
        /// <remarks/>
        public void GetSubscriptionHistoryAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, object userState) {
            if ((this.GetSubscriptionHistoryOperationCompleted == null)) {
                this.GetSubscriptionHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriptionHistoryOperationCompleted);
            }
            this.InvokeAsync("GetSubscriptionHistory", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId}, this.GetSubscriptionHistoryOperationCompleted, userState);
        }
        
        private void OnGetSubscriptionHistoryOperationCompleted(object arg) {
            if ((this.GetSubscriptionHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriptionHistoryCompleted(this, new GetSubscriptionHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetServiceComponents", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetServiceComponents(string bstrOfferingGUID, out string pbstrErrorText, out int plServiceComponentCount, out string pbstrServiceComponentSetXML) {
            object[] results = this.Invoke("GetServiceComponents", new object[] {
                        bstrOfferingGUID});
            pbstrErrorText = ((string)(results[0]));
            plServiceComponentCount = ((int)(results[1]));
            pbstrServiceComponentSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetServiceComponentsAsync(string bstrOfferingGUID) {
            this.GetServiceComponentsAsync(bstrOfferingGUID, null);
        }
        
        /// <remarks/>
        public void GetServiceComponentsAsync(string bstrOfferingGUID, object userState) {
            if ((this.GetServiceComponentsOperationCompleted == null)) {
                this.GetServiceComponentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceComponentsOperationCompleted);
            }
            this.InvokeAsync("GetServiceComponents", new object[] {
                        bstrOfferingGUID}, this.GetServiceComponentsOperationCompleted, userState);
        }
        
        private void OnGetServiceComponentsOperationCompleted(object arg) {
            if ((this.GetServiceComponentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceComponentsCompleted(this, new GetServiceComponentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptions", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetSubscriptions(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plSubscriptionInfoCount, out string pbstrSubscriptionInfoSetXML) {
            object[] results = this.Invoke("GetSubscriptions", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId});
            pbstrErrorXML = ((string)(results[0]));
            plSubscriptionInfoCount = ((int)(results[1]));
            pbstrSubscriptionInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetSubscriptionsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId) {
            this.GetSubscriptionsAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrObjectId, null);
        }
        
        /// <remarks/>
        public void GetSubscriptionsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, object userState) {
            if ((this.GetSubscriptionsOperationCompleted == null)) {
                this.GetSubscriptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriptionsOperationCompleted);
            }
            this.InvokeAsync("GetSubscriptions", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId}, this.GetSubscriptionsOperationCompleted, userState);
        }
        
        private void OnGetSubscriptionsOperationCompleted(object arg) {
            if ((this.GetSubscriptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriptionsCompleted(this, new GetSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetSubscriptionStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetSubscriptionStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrSubscriptionStatusInfoXML) {
            object[] results = this.Invoke("GetSubscriptionStatus", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrSubscriptionStatusInfoXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void GetSubscriptionStatusAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId) {
            this.GetSubscriptionStatusAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrSubscriptionId, null);
        }
        
        /// <remarks/>
        public void GetSubscriptionStatusAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, object userState) {
            if ((this.GetSubscriptionStatusOperationCompleted == null)) {
                this.GetSubscriptionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubscriptionStatusOperationCompleted);
            }
            this.InvokeAsync("GetSubscriptionStatus", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId}, this.GetSubscriptionStatusOperationCompleted, userState);
        }
        
        private void OnGetSubscriptionStatusOperationCompleted(object arg) {
            if ((this.GetSubscriptionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubscriptionStatusCompleted(this, new GetSubscriptionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenClassRestrictionInfoForPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetTokenClassRestrictionInfoForPUID(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string tokenClassRestrictionInfoFilterXML, out string tokenClassRestrictionInfoSetXML) {
            object[] results = this.Invoke("GetTokenClassRestrictionInfoForPUID", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        tokenClassRestrictionInfoFilterXML});
            tokenClassRestrictionInfoSetXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTokenClassRestrictionInfoForPUIDAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string tokenClassRestrictionInfoFilterXML) {
            this.GetTokenClassRestrictionInfoForPUIDAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, tokenClassRestrictionInfoFilterXML, null);
        }
        
        /// <remarks/>
        public void GetTokenClassRestrictionInfoForPUIDAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string tokenClassRestrictionInfoFilterXML, object userState) {
            if ((this.GetTokenClassRestrictionInfoForPUIDOperationCompleted == null)) {
                this.GetTokenClassRestrictionInfoForPUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokenClassRestrictionInfoForPUIDOperationCompleted);
            }
            this.InvokeAsync("GetTokenClassRestrictionInfoForPUID", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        tokenClassRestrictionInfoFilterXML}, this.GetTokenClassRestrictionInfoForPUIDOperationCompleted, userState);
        }
        
        private void OnGetTokenClassRestrictionInfoForPUIDOperationCompleted(object arg) {
            if ((this.GetTokenClassRestrictionInfoForPUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokenClassRestrictionInfoForPUIDCompleted(this, new GetTokenClassRestrictionInfoForPUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenClasses", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetTokenClasses(string bstrProductClassGuidFilter, int lReturnCountMax, out int plAdditionalTokenClassCount, out int plTokenClassReturnedCount, out string pbstrTokenClassSetXML) {
            object[] results = this.Invoke("GetTokenClasses", new object[] {
                        bstrProductClassGuidFilter,
                        lReturnCountMax});
            plAdditionalTokenClassCount = ((int)(results[0]));
            plTokenClassReturnedCount = ((int)(results[1]));
            pbstrTokenClassSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetTokenClassesAsync(string bstrProductClassGuidFilter, int lReturnCountMax) {
            this.GetTokenClassesAsync(bstrProductClassGuidFilter, lReturnCountMax, null);
        }
        
        /// <remarks/>
        public void GetTokenClassesAsync(string bstrProductClassGuidFilter, int lReturnCountMax, object userState) {
            if ((this.GetTokenClassesOperationCompleted == null)) {
                this.GetTokenClassesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokenClassesOperationCompleted);
            }
            this.InvokeAsync("GetTokenClasses", new object[] {
                        bstrProductClassGuidFilter,
                        lReturnCountMax}, this.GetTokenClassesOperationCompleted, userState);
        }
        
        private void OnGetTokenClassesOperationCompleted(object arg) {
            if ((this.GetTokenClassesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokenClassesCompleted(this, new GetTokenClassesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetTokenInfo(int lDelegateIdHigh, int lDelegateIdLow, string bstrTokenId, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
            object[] results = this.Invoke("GetTokenInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTokenId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrTokenOrderXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void GetTokenInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTokenId) {
            this.GetTokenInfoAsync(lDelegateIdHigh, lDelegateIdLow, bstrTokenId, null);
        }
        
        /// <remarks/>
        public void GetTokenInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTokenId, object userState) {
            if ((this.GetTokenInfoOperationCompleted == null)) {
                this.GetTokenInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokenInfoOperationCompleted);
            }
            this.InvokeAsync("GetTokenInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTokenId}, this.GetTokenInfoOperationCompleted, userState);
        }
        
        private void OnGetTokenInfoOperationCompleted(object arg) {
            if ((this.GetTokenInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokenInfoCompleted(this, new GetTokenInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTokenInfoEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetTokenInfoEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrToken, int lTokenType, out string pbstrErrorXML, out string pbstrTokenOrderXML) {
            object[] results = this.Invoke("GetTokenInfoEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrToken,
                        lTokenType});
            pbstrErrorXML = ((string)(results[0]));
            pbstrTokenOrderXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void GetTokenInfoExAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrToken, int lTokenType) {
            this.GetTokenInfoExAsync(lDelegateIdHigh, lDelegateIdLow, bstrToken, lTokenType, null);
        }
        
        /// <remarks/>
        public void GetTokenInfoExAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrToken, int lTokenType, object userState) {
            if ((this.GetTokenInfoExOperationCompleted == null)) {
                this.GetTokenInfoExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTokenInfoExOperationCompleted);
            }
            this.InvokeAsync("GetTokenInfoEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrToken,
                        lTokenType}, this.GetTokenInfoExOperationCompleted, userState);
        }
        
        private void OnGetTokenInfoExOperationCompleted(object arg) {
            if ((this.GetTokenInfoExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTokenInfoExCompleted(this, new GetTokenInfoExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetTransactions", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetTransactions(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string accountId, string offeringGuid, string transactionId, string filteringCriteriaXml, out string transactionSetXml) {
            object[] results = this.Invoke("GetTransactions", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        accountId,
                        offeringGuid,
                        transactionId,
                        filteringCriteriaXml});
            transactionSetXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransactionsAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string accountId, string offeringGuid, string transactionId, string filteringCriteriaXml) {
            this.GetTransactionsAsync(delegateIdHigh, delegateIdLow, requesterIdHigh, requesterIdLow, accountId, offeringGuid, transactionId, filteringCriteriaXml, null);
        }
        
        /// <remarks/>
        public void GetTransactionsAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string accountId, string offeringGuid, string transactionId, string filteringCriteriaXml, object userState) {
            if ((this.GetTransactionsOperationCompleted == null)) {
                this.GetTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransactionsOperationCompleted);
            }
            this.InvokeAsync("GetTransactions", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        accountId,
                        offeringGuid,
                        transactionId,
                        filteringCriteriaXml}, this.GetTransactionsOperationCompleted, userState);
        }
        
        private void OnGetTransactionsOperationCompleted(object arg) {
            if ((this.GetTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransactionsCompleted(this, new GetTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetUnconditionalReplacementToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetUnconditionalReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, bool tiePinRedemptionToPuid, int replacementReasonCode, string tokenClassGuid, string emailAddress, string sessionKey, string trackingGuid, out string replacementPin, out int signature, out string sequenceNumber) {
            object[] results = this.Invoke("GetUnconditionalReplacementToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        replacementPuidHigh,
                        replacementPuidLow,
                        tiePinRedemptionToPuid,
                        replacementReasonCode,
                        tokenClassGuid,
                        emailAddress,
                        sessionKey,
                        trackingGuid});
            replacementPin = ((string)(results[0]));
            signature = ((int)(results[1]));
            sequenceNumber = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetUnconditionalReplacementTokenAsync(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, bool tiePinRedemptionToPuid, int replacementReasonCode, string tokenClassGuid, string emailAddress, string sessionKey, string trackingGuid) {
            this.GetUnconditionalReplacementTokenAsync(delegateIdHigh, delegateIdLow, replacementPuidHigh, replacementPuidLow, tiePinRedemptionToPuid, replacementReasonCode, tokenClassGuid, emailAddress, sessionKey, trackingGuid, null);
        }
        
        /// <remarks/>
        public void GetUnconditionalReplacementTokenAsync(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, bool tiePinRedemptionToPuid, int replacementReasonCode, string tokenClassGuid, string emailAddress, string sessionKey, string trackingGuid, object userState) {
            if ((this.GetUnconditionalReplacementTokenOperationCompleted == null)) {
                this.GetUnconditionalReplacementTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnconditionalReplacementTokenOperationCompleted);
            }
            this.InvokeAsync("GetUnconditionalReplacementToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        replacementPuidHigh,
                        replacementPuidLow,
                        tiePinRedemptionToPuid,
                        replacementReasonCode,
                        tokenClassGuid,
                        emailAddress,
                        sessionKey,
                        trackingGuid}, this.GetUnconditionalReplacementTokenOperationCompleted, userState);
        }
        
        private void OnGetUnconditionalReplacementTokenOperationCompleted(object arg) {
            if ((this.GetUnconditionalReplacementTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnconditionalReplacementTokenCompleted(this, new GetUnconditionalReplacementTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetUserProfile", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetUserProfile(string version, string callerInfoXml, string filterInfoXml, out string userProfileXml) {
            object[] results = this.Invoke("GetUserProfile", new object[] {
                        version,
                        callerInfoXml,
                        filterInfoXml});
            userProfileXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserProfileAsync(string version, string callerInfoXml, string filterInfoXml) {
            this.GetUserProfileAsync(version, callerInfoXml, filterInfoXml, null);
        }
        
        /// <remarks/>
        public void GetUserProfileAsync(string version, string callerInfoXml, string filterInfoXml, object userState) {
            if ((this.GetUserProfileOperationCompleted == null)) {
                this.GetUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserProfileOperationCompleted);
            }
            this.InvokeAsync("GetUserProfile", new object[] {
                        version,
                        callerInfoXml,
                        filterInfoXml}, this.GetUserProfileOperationCompleted, userState);
        }
        
        private void OnGetUserProfileOperationCompleted(object arg) {
            if ((this.GetUserProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserProfileCompleted(this, new GetUserProfileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ImportSettledBillingItem", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ImportSettledBillingItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, string bstrPaymentInstrumentId, string bstrTaxAddressId, string bstrTrackingGUID, string bstrSettledBillingItemXML, out string pbstrResultXML, out string pbstrNewLineItemsXML) {
            object[] results = this.Invoke("ImportSettledBillingItem", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrSubscriptionId,
                        bstrPaymentInstrumentId,
                        bstrTaxAddressId,
                        bstrTrackingGUID,
                        bstrSettledBillingItemXML});
            pbstrResultXML = ((string)(results[0]));
            pbstrNewLineItemsXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void ImportSettledBillingItemAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, string bstrPaymentInstrumentId, string bstrTaxAddressId, string bstrTrackingGUID, string bstrSettledBillingItemXML) {
            this.ImportSettledBillingItemAsync(lDelegateIdHigh, lDelegateIdLow, bstrSubscriptionId, bstrPaymentInstrumentId, bstrTaxAddressId, bstrTrackingGUID, bstrSettledBillingItemXML, null);
        }
        
        /// <remarks/>
        public void ImportSettledBillingItemAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, string bstrPaymentInstrumentId, string bstrTaxAddressId, string bstrTrackingGUID, string bstrSettledBillingItemXML, object userState) {
            if ((this.ImportSettledBillingItemOperationCompleted == null)) {
                this.ImportSettledBillingItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportSettledBillingItemOperationCompleted);
            }
            this.InvokeAsync("ImportSettledBillingItem", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrSubscriptionId,
                        bstrPaymentInstrumentId,
                        bstrTaxAddressId,
                        bstrTrackingGUID,
                        bstrSettledBillingItemXML}, this.ImportSettledBillingItemOperationCompleted, userState);
        }
        
        private void OnImportSettledBillingItemOperationCompleted(object arg) {
            if ((this.ImportSettledBillingItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportSettledBillingItemCompleted(this, new ImportSettledBillingItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.IssueTokenTrusted", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void IssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId) {
            this.Invoke("IssueTokenTrusted", new object[] {
                        partnerName,
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId});
        }
        
        /// <remarks/>
        public void IssueTokenTrustedAsync(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId) {
            this.IssueTokenTrustedAsync(partnerName, delegateIdHigh, delegateIdLow, trackingGuid, token, tokenType, externalReferenceId, null);
        }
        
        /// <remarks/>
        public void IssueTokenTrustedAsync(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, object userState) {
            if ((this.IssueTokenTrustedOperationCompleted == null)) {
                this.IssueTokenTrustedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIssueTokenTrustedOperationCompleted);
            }
            this.InvokeAsync("IssueTokenTrusted", new object[] {
                        partnerName,
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId}, this.IssueTokenTrustedOperationCompleted, userState);
        }
        
        private void OnIssueTokenTrustedOperationCompleted(object arg) {
            if ((this.IssueTokenTrustedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IssueTokenTrustedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.IsPaymentInstrumentBanned", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void IsPaymentInstrumentBanned(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int plIsBanned) {
            object[] results = this.Invoke("IsPaymentInstrumentBanned", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrPaymentInstrumentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            plIsBanned = ((int)(results[1]));
        }
        
        /// <remarks/>
        public void IsPaymentInstrumentBannedAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML) {
            this.IsPaymentInstrumentBannedAsync(lDelegateIdHigh, lDelegateIdLow, bstrPaymentInstrumentInfoXML, null);
        }
        
        /// <remarks/>
        public void IsPaymentInstrumentBannedAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, object userState) {
            if ((this.IsPaymentInstrumentBannedOperationCompleted == null)) {
                this.IsPaymentInstrumentBannedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPaymentInstrumentBannedOperationCompleted);
            }
            this.InvokeAsync("IsPaymentInstrumentBanned", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrPaymentInstrumentInfoXML}, this.IsPaymentInstrumentBannedOperationCompleted, userState);
        }
        
        private void OnIsPaymentInstrumentBannedOperationCompleted(object arg) {
            if ((this.IsPaymentInstrumentBannedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPaymentInstrumentBannedCompleted(this, new IsPaymentInstrumentBannedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.LoadTokenInstance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void LoadTokenInstance(System.Guid trackingGuid, string tokenInfoXML, out string responseXML) {
            object[] results = this.Invoke("LoadTokenInstance", new object[] {
                        trackingGuid,
                        tokenInfoXML});
            responseXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoadTokenInstanceAsync(System.Guid trackingGuid, string tokenInfoXML) {
            this.LoadTokenInstanceAsync(trackingGuid, tokenInfoXML, null);
        }
        
        /// <remarks/>
        public void LoadTokenInstanceAsync(System.Guid trackingGuid, string tokenInfoXML, object userState) {
            if ((this.LoadTokenInstanceOperationCompleted == null)) {
                this.LoadTokenInstanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadTokenInstanceOperationCompleted);
            }
            this.InvokeAsync("LoadTokenInstance", new object[] {
                        trackingGuid,
                        tokenInfoXML}, this.LoadTokenInstanceOperationCompleted, userState);
        }
        
        private void OnLoadTokenInstanceOperationCompleted(object arg) {
            if ((this.LoadTokenInstanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadTokenInstanceCompleted(this, new LoadTokenInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.MarkTokenDistributionStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void MarkTokenDistributionStatus(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrTokenId, int lTokenType, string bstrStatusName, string bstrStatusValue, string bstrPartNumber) {
            this.Invoke("MarkTokenDistributionStatus", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrTokenId,
                        lTokenType,
                        bstrStatusName,
                        bstrStatusValue,
                        bstrPartNumber});
        }
        
        /// <remarks/>
        public void MarkTokenDistributionStatusAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrTokenId, int lTokenType, string bstrStatusName, string bstrStatusValue, string bstrPartNumber) {
            this.MarkTokenDistributionStatusAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrTokenId, lTokenType, bstrStatusName, bstrStatusValue, bstrPartNumber, null);
        }
        
        /// <remarks/>
        public void MarkTokenDistributionStatusAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrTokenId, int lTokenType, string bstrStatusName, string bstrStatusValue, string bstrPartNumber, object userState) {
            if ((this.MarkTokenDistributionStatusOperationCompleted == null)) {
                this.MarkTokenDistributionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkTokenDistributionStatusOperationCompleted);
            }
            this.InvokeAsync("MarkTokenDistributionStatus", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrTokenId,
                        lTokenType,
                        bstrStatusName,
                        bstrStatusValue,
                        bstrPartNumber}, this.MarkTokenDistributionStatusOperationCompleted, userState);
        }
        
        private void OnMarkTokenDistributionStatusOperationCompleted(object arg) {
            if ((this.MarkTokenDistributionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkTokenDistributionStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.MapAddress", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void MapAddress(int delegateIdHigh, int delegateIdLow, string referenceTrackingGuid, string addressInfoXML, out string MapAddressInfoSet) {
            object[] results = this.Invoke("MapAddress", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        referenceTrackingGuid,
                        addressInfoXML});
            MapAddressInfoSet = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MapAddressAsync(int delegateIdHigh, int delegateIdLow, string referenceTrackingGuid, string addressInfoXML) {
            this.MapAddressAsync(delegateIdHigh, delegateIdLow, referenceTrackingGuid, addressInfoXML, null);
        }
        
        /// <remarks/>
        public void MapAddressAsync(int delegateIdHigh, int delegateIdLow, string referenceTrackingGuid, string addressInfoXML, object userState) {
            if ((this.MapAddressOperationCompleted == null)) {
                this.MapAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMapAddressOperationCompleted);
            }
            this.InvokeAsync("MapAddress", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        referenceTrackingGuid,
                        addressInfoXML}, this.MapAddressOperationCompleted, userState);
        }
        
        private void OnMapAddressOperationCompleted(object arg) {
            if ((this.MapAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MapAddressCompleted(this, new MapAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.MatchPaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void MatchPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTelenumericLastName, string bstrZipCode, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int plAdminPUIDHigh, out int plAdminPUIDLow) {
            object[] results = this.Invoke("MatchPaymentInstrumentInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTelenumericLastName,
                        bstrZipCode,
                        bstrPaymentInstrumentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            plAdminPUIDHigh = ((int)(results[1]));
            plAdminPUIDLow = ((int)(results[2]));
        }
        
        /// <remarks/>
        public void MatchPaymentInstrumentInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTelenumericLastName, string bstrZipCode, string bstrPaymentInstrumentInfoXML) {
            this.MatchPaymentInstrumentInfoAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTelenumericLastName, bstrZipCode, bstrPaymentInstrumentInfoXML, null);
        }
        
        /// <remarks/>
        public void MatchPaymentInstrumentInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTelenumericLastName, string bstrZipCode, string bstrPaymentInstrumentInfoXML, object userState) {
            if ((this.MatchPaymentInstrumentInfoOperationCompleted == null)) {
                this.MatchPaymentInstrumentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMatchPaymentInstrumentInfoOperationCompleted);
            }
            this.InvokeAsync("MatchPaymentInstrumentInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTelenumericLastName,
                        bstrZipCode,
                        bstrPaymentInstrumentInfoXML}, this.MatchPaymentInstrumentInfoOperationCompleted, userState);
        }
        
        private void OnMatchPaymentInstrumentInfoOperationCompleted(object arg) {
            if ((this.MatchPaymentInstrumentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MatchPaymentInstrumentInfoCompleted(this, new MatchPaymentInstrumentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.MigrateOffer", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void MigrateOffer(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrOfferingGUID, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
            object[] results = this.Invoke("MigrateOffer", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime});
            plAddedServiceInstanceSetCount = ((int)(results[0]));
            pbstrAddedServiceInstanceSet = ((string)(results[1]));
            plRemovedServiceInstanceSetCount = ((int)(results[2]));
            pbstrRemoveServiceInstanceSet = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void MigrateOfferAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrOfferingGUID, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime) {
            this.MigrateOfferAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, bstrSubscriptionId, bstrOfferingGUID, bstrPolicyGUID, lPolicyVersion, bstrSignatureDateTime, null);
        }
        
        /// <remarks/>
        public void MigrateOfferAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrOfferingGUID, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, object userState) {
            if ((this.MigrateOfferOperationCompleted == null)) {
                this.MigrateOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMigrateOfferOperationCompleted);
            }
            this.InvokeAsync("MigrateOffer", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime}, this.MigrateOfferOperationCompleted, userState);
        }
        
        private void OnMigrateOfferOperationCompleted(object arg) {
            if ((this.MigrateOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MigrateOfferCompleted(this, new MigrateOfferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetLineItem", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void OffsetLineItem(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, out string pbstrError) {
            object[] results = this.Invoke("OffsetLineItem", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrLineItemId,
                        lFinancialReportingCode,
                        fImmediatelySettle,
                        bstrAmount,
                        bstrCommentInfoXML});
            pbstrError = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OffsetLineItemAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML) {
            this.OffsetLineItemAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrLineItemId, lFinancialReportingCode, fImmediatelySettle, bstrAmount, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void OffsetLineItemAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, object userState) {
            if ((this.OffsetLineItemOperationCompleted == null)) {
                this.OffsetLineItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOffsetLineItemOperationCompleted);
            }
            this.InvokeAsync("OffsetLineItem", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrLineItemId,
                        lFinancialReportingCode,
                        fImmediatelySettle,
                        bstrAmount,
                        bstrCommentInfoXML}, this.OffsetLineItemOperationCompleted, userState);
        }
        
        private void OnOffsetLineItemOperationCompleted(object arg) {
            if ((this.OffsetLineItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OffsetLineItemCompleted(this, new OffsetLineItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetLineItem2", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void OffsetLineItem2(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, string bstrReservedXML, out string pbstrError, out string pbstrNewLineItemXML) {
            object[] results = this.Invoke("OffsetLineItem2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrLineItemId,
                        lFinancialReportingCode,
                        fImmediatelySettle,
                        bstrAmount,
                        bstrCommentInfoXML,
                        bstrReservedXML});
            pbstrError = ((string)(results[0]));
            pbstrNewLineItemXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void OffsetLineItem2Async(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, string bstrReservedXML) {
            this.OffsetLineItem2Async(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrLineItemId, lFinancialReportingCode, fImmediatelySettle, bstrAmount, bstrCommentInfoXML, bstrReservedXML, null);
        }
        
        /// <remarks/>
        public void OffsetLineItem2Async(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrLineItemId, int lFinancialReportingCode, bool fImmediatelySettle, string bstrAmount, string bstrCommentInfoXML, string bstrReservedXML, object userState) {
            if ((this.OffsetLineItem2OperationCompleted == null)) {
                this.OffsetLineItem2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnOffsetLineItem2OperationCompleted);
            }
            this.InvokeAsync("OffsetLineItem2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrLineItemId,
                        lFinancialReportingCode,
                        fImmediatelySettle,
                        bstrAmount,
                        bstrCommentInfoXML,
                        bstrReservedXML}, this.OffsetLineItem2OperationCompleted, userState);
        }
        
        private void OnOffsetLineItem2OperationCompleted(object arg) {
            if ((this.OffsetLineItem2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OffsetLineItem2Completed(this, new OffsetLineItem2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetOrder", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void OffsetOrder(string version, System.Guid trackingGuid, string callerInfoXml, string objectId, string correlationInfoXml, string orderDetailXml, string commentInfoXml, out string orderReceiptXml) {
            object[] results = this.Invoke("OffsetOrder", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        objectId,
                        correlationInfoXml,
                        orderDetailXml,
                        commentInfoXml});
            orderReceiptXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OffsetOrderAsync(string version, System.Guid trackingGuid, string callerInfoXml, string objectId, string correlationInfoXml, string orderDetailXml, string commentInfoXml) {
            this.OffsetOrderAsync(version, trackingGuid, callerInfoXml, objectId, correlationInfoXml, orderDetailXml, commentInfoXml, null);
        }
        
        /// <remarks/>
        public void OffsetOrderAsync(string version, System.Guid trackingGuid, string callerInfoXml, string objectId, string correlationInfoXml, string orderDetailXml, string commentInfoXml, object userState) {
            if ((this.OffsetOrderOperationCompleted == null)) {
                this.OffsetOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOffsetOrderOperationCompleted);
            }
            this.InvokeAsync("OffsetOrder", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        objectId,
                        correlationInfoXml,
                        orderDetailXml,
                        commentInfoXml}, this.OffsetOrderOperationCompleted, userState);
        }
        
        private void OnOffsetOrderOperationCompleted(object arg) {
            if ((this.OffsetOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OffsetOrderCompleted(this, new OffsetOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OffsetSingleUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void OffsetSingleUsageEvent(int delegateIdHigh, int delegateIdLow, string trackingGuid, string lineItemId, int units, string CommentInfoXML, string reservedXML, int returnAsUsageActivity, out string newLineItemXML) {
            object[] results = this.Invoke("OffsetSingleUsageEvent", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        lineItemId,
                        units,
                        CommentInfoXML,
                        reservedXML,
                        returnAsUsageActivity});
            newLineItemXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OffsetSingleUsageEventAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string lineItemId, int units, string CommentInfoXML, string reservedXML, int returnAsUsageActivity) {
            this.OffsetSingleUsageEventAsync(delegateIdHigh, delegateIdLow, trackingGuid, lineItemId, units, CommentInfoXML, reservedXML, returnAsUsageActivity, null);
        }
        
        /// <remarks/>
        public void OffsetSingleUsageEventAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string lineItemId, int units, string CommentInfoXML, string reservedXML, int returnAsUsageActivity, object userState) {
            if ((this.OffsetSingleUsageEventOperationCompleted == null)) {
                this.OffsetSingleUsageEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOffsetSingleUsageEventOperationCompleted);
            }
            this.InvokeAsync("OffsetSingleUsageEvent", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        lineItemId,
                        units,
                        CommentInfoXML,
                        reservedXML,
                        returnAsUsageActivity}, this.OffsetSingleUsageEventOperationCompleted, userState);
        }
        
        private void OnOffsetSingleUsageEventOperationCompleted(object arg) {
            if ((this.OffsetSingleUsageEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OffsetSingleUsageEventCompleted(this, new OffsetSingleUsageEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OrderCDforAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void OrderCDforAccount(string accountIDBlob, string subscriptionRefIDBlob, int surveyResultCode, out long orderId) {
            object[] results = this.Invoke("OrderCDforAccount", new object[] {
                        accountIDBlob,
                        subscriptionRefIDBlob,
                        surveyResultCode});
            orderId = ((long)(results[0]));
        }
        
        /// <remarks/>
        public void OrderCDforAccountAsync(string accountIDBlob, string subscriptionRefIDBlob, int surveyResultCode) {
            this.OrderCDforAccountAsync(accountIDBlob, subscriptionRefIDBlob, surveyResultCode, null);
        }
        
        /// <remarks/>
        public void OrderCDforAccountAsync(string accountIDBlob, string subscriptionRefIDBlob, int surveyResultCode, object userState) {
            if ((this.OrderCDforAccountOperationCompleted == null)) {
                this.OrderCDforAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrderCDforAccountOperationCompleted);
            }
            this.InvokeAsync("OrderCDforAccount", new object[] {
                        accountIDBlob,
                        subscriptionRefIDBlob,
                        surveyResultCode}, this.OrderCDforAccountOperationCompleted, userState);
        }
        
        private void OnOrderCDforAccountOperationCompleted(object arg) {
            if ((this.OrderCDforAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrderCDforAccountCompleted(this, new OrderCDforAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.OrderCDforAnonymous", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void OrderCDforAnonymous(string anonymousInfoXml, string category, string requestorInfo, out long orderId) {
            object[] results = this.Invoke("OrderCDforAnonymous", new object[] {
                        anonymousInfoXml,
                        category,
                        requestorInfo});
            orderId = ((long)(results[0]));
        }
        
        /// <remarks/>
        public void OrderCDforAnonymousAsync(string anonymousInfoXml, string category, string requestorInfo) {
            this.OrderCDforAnonymousAsync(anonymousInfoXml, category, requestorInfo, null);
        }
        
        /// <remarks/>
        public void OrderCDforAnonymousAsync(string anonymousInfoXml, string category, string requestorInfo, object userState) {
            if ((this.OrderCDforAnonymousOperationCompleted == null)) {
                this.OrderCDforAnonymousOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrderCDforAnonymousOperationCompleted);
            }
            this.InvokeAsync("OrderCDforAnonymous", new object[] {
                        anonymousInfoXml,
                        category,
                        requestorInfo}, this.OrderCDforAnonymousOperationCompleted, userState);
        }
        
        private void OnOrderCDforAnonymousOperationCompleted(object arg) {
            if ((this.OrderCDforAnonymousCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrderCDforAnonymousCompleted(this, new OrderCDforAnonymousCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PayUser", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void PayUser(int delegateIdHigh, int delegateIdLow, int targetIdHigh, int targetIdLow, string trackingGuid, decimal amount, string currency, string offeringGuid, string description, string externalReferenceId, string payUserInfoXml, out string payUserResultXml) {
            object[] results = this.Invoke("PayUser", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        targetIdHigh,
                        targetIdLow,
                        trackingGuid,
                        amount,
                        currency,
                        offeringGuid,
                        description,
                        externalReferenceId,
                        payUserInfoXml});
            payUserResultXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PayUserAsync(int delegateIdHigh, int delegateIdLow, int targetIdHigh, int targetIdLow, string trackingGuid, decimal amount, string currency, string offeringGuid, string description, string externalReferenceId, string payUserInfoXml) {
            this.PayUserAsync(delegateIdHigh, delegateIdLow, targetIdHigh, targetIdLow, trackingGuid, amount, currency, offeringGuid, description, externalReferenceId, payUserInfoXml, null);
        }
        
        /// <remarks/>
        public void PayUserAsync(int delegateIdHigh, int delegateIdLow, int targetIdHigh, int targetIdLow, string trackingGuid, decimal amount, string currency, string offeringGuid, string description, string externalReferenceId, string payUserInfoXml, object userState) {
            if ((this.PayUserOperationCompleted == null)) {
                this.PayUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPayUserOperationCompleted);
            }
            this.InvokeAsync("PayUser", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        targetIdHigh,
                        targetIdLow,
                        trackingGuid,
                        amount,
                        currency,
                        offeringGuid,
                        description,
                        externalReferenceId,
                        payUserInfoXml}, this.PayUserOperationCompleted, userState);
        }
        
        private void OnPayUserOperationCompleted(object arg) {
            if ((this.PayUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PayUserCompleted(this, new PayUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ProcessChargeback", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ProcessChargeback(int delegateIdHigh, int delegateIdLow, string lineItemId, int fileId, string fileNamespace, bool recordOnly, string mode, string chargebackInstanceXml, string commentInfoXml, out string chargebackResponseInfoXml) {
            object[] results = this.Invoke("ProcessChargeback", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        lineItemId,
                        fileId,
                        fileNamespace,
                        recordOnly,
                        mode,
                        chargebackInstanceXml,
                        commentInfoXml});
            chargebackResponseInfoXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessChargebackAsync(int delegateIdHigh, int delegateIdLow, string lineItemId, int fileId, string fileNamespace, bool recordOnly, string mode, string chargebackInstanceXml, string commentInfoXml) {
            this.ProcessChargebackAsync(delegateIdHigh, delegateIdLow, lineItemId, fileId, fileNamespace, recordOnly, mode, chargebackInstanceXml, commentInfoXml, null);
        }
        
        /// <remarks/>
        public void ProcessChargebackAsync(int delegateIdHigh, int delegateIdLow, string lineItemId, int fileId, string fileNamespace, bool recordOnly, string mode, string chargebackInstanceXml, string commentInfoXml, object userState) {
            if ((this.ProcessChargebackOperationCompleted == null)) {
                this.ProcessChargebackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessChargebackOperationCompleted);
            }
            this.InvokeAsync("ProcessChargeback", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        lineItemId,
                        fileId,
                        fileNamespace,
                        recordOnly,
                        mode,
                        chargebackInstanceXml,
                        commentInfoXml}, this.ProcessChargebackOperationCompleted, userState);
        }
        
        private void OnProcessChargebackOperationCompleted(object arg) {
            if ((this.ProcessChargebackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessChargebackCompleted(this, new ProcessChargebackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ProvisionServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ProvisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("ProvisionServices", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrServiceInstanceSetXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProvisionServicesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML) {
            this.ProvisionServicesAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrServiceInstanceSetXML, null);
        }
        
        /// <remarks/>
        public void ProvisionServicesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, object userState) {
            if ((this.ProvisionServicesOperationCompleted == null)) {
                this.ProvisionServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProvisionServicesOperationCompleted);
            }
            this.InvokeAsync("ProvisionServices", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrServiceInstanceSetXML}, this.ProvisionServicesOperationCompleted, userState);
        }
        
        private void OnProvisionServicesOperationCompleted(object arg) {
            if ((this.ProvisionServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProvisionServicesCompleted(this, new ProvisionServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseItem", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void PurchaseItem(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string itemSetXml, string paymentMethodXml, string transactionContextXml, out string receiptXml) {
            object[] results = this.Invoke("PurchaseItem", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        trackingGuid,
                        itemSetXml,
                        paymentMethodXml,
                        transactionContextXml});
            receiptXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseItemAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string itemSetXml, string paymentMethodXml, string transactionContextXml) {
            this.PurchaseItemAsync(delegateIdHigh, delegateIdLow, requesterIdHigh, requesterIdLow, trackingGuid, itemSetXml, paymentMethodXml, transactionContextXml, null);
        }
        
        /// <remarks/>
        public void PurchaseItemAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string itemSetXml, string paymentMethodXml, string transactionContextXml, object userState) {
            if ((this.PurchaseItemOperationCompleted == null)) {
                this.PurchaseItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseItemOperationCompleted);
            }
            this.InvokeAsync("PurchaseItem", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        trackingGuid,
                        itemSetXml,
                        paymentMethodXml,
                        transactionContextXml}, this.PurchaseItemOperationCompleted, userState);
        }
        
        private void OnPurchaseItemOperationCompleted(object arg) {
            if ((this.PurchaseItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseItemCompleted(this, new PurchaseItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseItemEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void PurchaseItemEx(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, int recipientIdHigh, int recipientIdLow, string trackingGuid, string itemSetXml, string paymentMethodXml, string transactionContextXml, out string receiptXml) {
            object[] results = this.Invoke("PurchaseItemEx", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        recipientIdHigh,
                        recipientIdLow,
                        trackingGuid,
                        itemSetXml,
                        paymentMethodXml,
                        transactionContextXml});
            receiptXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseItemExAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, int recipientIdHigh, int recipientIdLow, string trackingGuid, string itemSetXml, string paymentMethodXml, string transactionContextXml) {
            this.PurchaseItemExAsync(delegateIdHigh, delegateIdLow, requesterIdHigh, requesterIdLow, recipientIdHigh, recipientIdLow, trackingGuid, itemSetXml, paymentMethodXml, transactionContextXml, null);
        }
        
        /// <remarks/>
        public void PurchaseItemExAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, int recipientIdHigh, int recipientIdLow, string trackingGuid, string itemSetXml, string paymentMethodXml, string transactionContextXml, object userState) {
            if ((this.PurchaseItemExOperationCompleted == null)) {
                this.PurchaseItemExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseItemExOperationCompleted);
            }
            this.InvokeAsync("PurchaseItemEx", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        recipientIdHigh,
                        recipientIdLow,
                        trackingGuid,
                        itemSetXml,
                        paymentMethodXml,
                        transactionContextXml}, this.PurchaseItemExOperationCompleted, userState);
        }
        
        private void OnPurchaseItemExOperationCompleted(object arg) {
            if ((this.PurchaseItemExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseItemExCompleted(this, new PurchaseItemExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseOffering", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void PurchaseOffering(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    out string pbstrErrorXML, 
                    out string pbstrSubscriptionId, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceCount, 
                    out string pbstrAddedServiceInstanceSetXML) {
            object[] results = this.Invoke("PurchaseOffering", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionName,
                        bstrAccountId,
                        bstrBaseSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrPaymentInstrumentId,
                        bstrShippingAddressId,
                        bstrActivationDate,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrSubscriptionId = ((string)(results[1]));
            pbstrAmountChargedXML = ((string)(results[2]));
            plAddedServiceInstanceCount = ((int)(results[3]));
            pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void PurchaseOfferingAsync(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML) {
            this.PurchaseOfferingAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, fComputeOnly, bstrSubscriptionName, bstrAccountId, bstrBaseSubscriptionId, bstrOfferingGUID, lOverrideAmount, bstrPaymentInstrumentId, bstrShippingAddressId, bstrActivationDate, bstrSubscriptionEndDate, bstrReferralSetXML, null);
        }
        
        /// <remarks/>
        public void PurchaseOfferingAsync(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    object userState) {
            if ((this.PurchaseOfferingOperationCompleted == null)) {
                this.PurchaseOfferingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseOfferingOperationCompleted);
            }
            this.InvokeAsync("PurchaseOffering", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionName,
                        bstrAccountId,
                        bstrBaseSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrPaymentInstrumentId,
                        bstrShippingAddressId,
                        bstrActivationDate,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML}, this.PurchaseOfferingOperationCompleted, userState);
        }
        
        private void OnPurchaseOfferingOperationCompleted(object arg) {
            if ((this.PurchaseOfferingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseOfferingCompleted(this, new PurchaseOfferingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseOfferingEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void PurchaseOfferingEx(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    out string pbstrErrorXML, 
                    out string pbstrSubscriptionId, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceCount, 
                    out string pbstrAddedServiceInstanceSetXML) {
            object[] results = this.Invoke("PurchaseOfferingEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionName,
                        bstrAccountId,
                        bstrBaseSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrPaymentInstrumentId,
                        bstrShippingAddressId,
                        bstrActivationDate,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime});
            pbstrErrorXML = ((string)(results[0]));
            pbstrSubscriptionId = ((string)(results[1]));
            pbstrAmountChargedXML = ((string)(results[2]));
            plAddedServiceInstanceCount = ((int)(results[3]));
            pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void PurchaseOfferingExAsync(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime) {
            this.PurchaseOfferingExAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, fComputeOnly, bstrSubscriptionName, bstrAccountId, bstrBaseSubscriptionId, bstrOfferingGUID, lOverrideAmount, bstrPaymentInstrumentId, bstrShippingAddressId, bstrActivationDate, bstrSubscriptionEndDate, bstrReferralSetXML, bstrTokenId, bstrPolicyGUID, lPolicyVersion, bstrSignatureDateTime, null);
        }
        
        /// <remarks/>
        public void PurchaseOfferingExAsync(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    object userState) {
            if ((this.PurchaseOfferingExOperationCompleted == null)) {
                this.PurchaseOfferingExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseOfferingExOperationCompleted);
            }
            this.InvokeAsync("PurchaseOfferingEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionName,
                        bstrAccountId,
                        bstrBaseSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrPaymentInstrumentId,
                        bstrShippingAddressId,
                        bstrActivationDate,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime}, this.PurchaseOfferingExOperationCompleted, userState);
        }
        
        private void OnPurchaseOfferingExOperationCompleted(object arg) {
            if ((this.PurchaseOfferingExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseOfferingExCompleted(this, new PurchaseOfferingExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseOfferingEx2", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void PurchaseOfferingEx2(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    out string pbstrErrorXML, 
                    out string pbstrSubscriptionId, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceCount, 
                    out string pbstrAddedServiceInstanceSetXML, 
                    out string pbstrRedirectOutputInfoXML) {
            object[] results = this.Invoke("PurchaseOfferingEx2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionName,
                        bstrAccountId,
                        bstrBaseSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrPaymentInstrumentId,
                        bstrShippingAddressId,
                        bstrActivationDate,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime,
                        bstrRedirectInputInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrSubscriptionId = ((string)(results[1]));
            pbstrAmountChargedXML = ((string)(results[2]));
            plAddedServiceInstanceCount = ((int)(results[3]));
            pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
            pbstrRedirectOutputInfoXML = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void PurchaseOfferingEx2Async(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML) {
            this.PurchaseOfferingEx2Async(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, fComputeOnly, bstrSubscriptionName, bstrAccountId, bstrBaseSubscriptionId, bstrOfferingGUID, lOverrideAmount, bstrPaymentInstrumentId, bstrShippingAddressId, bstrActivationDate, bstrSubscriptionEndDate, bstrReferralSetXML, bstrTokenId, bstrPolicyGUID, lPolicyVersion, bstrSignatureDateTime, bstrRedirectInputInfoXML, null);
        }
        
        /// <remarks/>
        public void PurchaseOfferingEx2Async(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    object userState) {
            if ((this.PurchaseOfferingEx2OperationCompleted == null)) {
                this.PurchaseOfferingEx2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseOfferingEx2OperationCompleted);
            }
            this.InvokeAsync("PurchaseOfferingEx2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionName,
                        bstrAccountId,
                        bstrBaseSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrPaymentInstrumentId,
                        bstrShippingAddressId,
                        bstrActivationDate,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime,
                        bstrRedirectInputInfoXML}, this.PurchaseOfferingEx2OperationCompleted, userState);
        }
        
        private void OnPurchaseOfferingEx2OperationCompleted(object arg) {
            if ((this.PurchaseOfferingEx2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseOfferingEx2Completed(this, new PurchaseOfferingEx2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.PurchaseOfferingEx3", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void PurchaseOfferingEx3(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    string bstrDiscountGuid, 
                    string bstrExtraInfoXML, 
                    out string pbstrErrorXML, 
                    out string pbstrSubscriptionId, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceCount, 
                    out string pbstrAddedServiceInstanceSetXML, 
                    out string pbstrRedirectOutputInfoXML) {
            object[] results = this.Invoke("PurchaseOfferingEx3", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionName,
                        bstrAccountId,
                        bstrBaseSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrPaymentInstrumentId,
                        bstrShippingAddressId,
                        bstrActivationDate,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime,
                        bstrRedirectInputInfoXML,
                        bstrDiscountGuid,
                        bstrExtraInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrSubscriptionId = ((string)(results[1]));
            pbstrAmountChargedXML = ((string)(results[2]));
            plAddedServiceInstanceCount = ((int)(results[3]));
            pbstrAddedServiceInstanceSetXML = ((string)(results[4]));
            pbstrRedirectOutputInfoXML = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void PurchaseOfferingEx3Async(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    string bstrDiscountGuid, 
                    string bstrExtraInfoXML) {
            this.PurchaseOfferingEx3Async(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, fComputeOnly, bstrSubscriptionName, bstrAccountId, bstrBaseSubscriptionId, bstrOfferingGUID, lOverrideAmount, bstrPaymentInstrumentId, bstrShippingAddressId, bstrActivationDate, bstrSubscriptionEndDate, bstrReferralSetXML, bstrTokenId, bstrPolicyGUID, lPolicyVersion, bstrSignatureDateTime, bstrRedirectInputInfoXML, bstrDiscountGuid, bstrExtraInfoXML, null);
        }
        
        /// <remarks/>
        public void PurchaseOfferingEx3Async(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    string bstrSubscriptionName, 
                    string bstrAccountId, 
                    string bstrBaseSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrPaymentInstrumentId, 
                    string bstrShippingAddressId, 
                    string bstrActivationDate, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    string bstrDiscountGuid, 
                    string bstrExtraInfoXML, 
                    object userState) {
            if ((this.PurchaseOfferingEx3OperationCompleted == null)) {
                this.PurchaseOfferingEx3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseOfferingEx3OperationCompleted);
            }
            this.InvokeAsync("PurchaseOfferingEx3", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionName,
                        bstrAccountId,
                        bstrBaseSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrPaymentInstrumentId,
                        bstrShippingAddressId,
                        bstrActivationDate,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime,
                        bstrRedirectInputInfoXML,
                        bstrDiscountGuid,
                        bstrExtraInfoXML}, this.PurchaseOfferingEx3OperationCompleted, userState);
        }
        
        private void OnPurchaseOfferingEx3OperationCompleted(object arg) {
            if ((this.PurchaseOfferingEx3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseOfferingEx3Completed(this, new PurchaseOfferingEx3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReconcileTokenTrusted", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ReconcileTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string token, int tokenType, string externalReferenceId, string timeStamp, int action, out int reconStatus) {
            object[] results = this.Invoke("ReconcileTokenTrusted", new object[] {
                        partnerName,
                        delegateIdHigh,
                        delegateIdLow,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        action});
            reconStatus = ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ReconcileTokenTrustedAsync(string partnerName, int delegateIdHigh, int delegateIdLow, string token, int tokenType, string externalReferenceId, string timeStamp, int action) {
            this.ReconcileTokenTrustedAsync(partnerName, delegateIdHigh, delegateIdLow, token, tokenType, externalReferenceId, timeStamp, action, null);
        }
        
        /// <remarks/>
        public void ReconcileTokenTrustedAsync(string partnerName, int delegateIdHigh, int delegateIdLow, string token, int tokenType, string externalReferenceId, string timeStamp, int action, object userState) {
            if ((this.ReconcileTokenTrustedOperationCompleted == null)) {
                this.ReconcileTokenTrustedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReconcileTokenTrustedOperationCompleted);
            }
            this.InvokeAsync("ReconcileTokenTrusted", new object[] {
                        partnerName,
                        delegateIdHigh,
                        delegateIdLow,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        action}, this.ReconcileTokenTrustedOperationCompleted, userState);
        }
        
        private void OnReconcileTokenTrustedOperationCompleted(object arg) {
            if ((this.ReconcileTokenTrustedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReconcileTokenTrustedCompleted(this, new ReconcileTokenTrustedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RefundTaxForAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void RefundTaxForAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrCommentInfoXML, bool fRevertTaxRefund, out string pbstrNewLineItemSetXML) {
            object[] results = this.Invoke("RefundTaxForAccount", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrAccountId,
                        bstrCommentInfoXML,
                        fRevertTaxRefund});
            pbstrNewLineItemSetXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RefundTaxForAccountAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrCommentInfoXML, bool fRevertTaxRefund) {
            this.RefundTaxForAccountAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrAccountId, bstrCommentInfoXML, fRevertTaxRefund, null);
        }
        
        /// <remarks/>
        public void RefundTaxForAccountAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrCommentInfoXML, bool fRevertTaxRefund, object userState) {
            if ((this.RefundTaxForAccountOperationCompleted == null)) {
                this.RefundTaxForAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRefundTaxForAccountOperationCompleted);
            }
            this.InvokeAsync("RefundTaxForAccount", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrAccountId,
                        bstrCommentInfoXML,
                        fRevertTaxRefund}, this.RefundTaxForAccountOperationCompleted, userState);
        }
        
        private void OnRefundTaxForAccountOperationCompleted(object arg) {
            if ((this.RefundTaxForAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RefundTaxForAccountCompleted(this, new RefundTaxForAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RegisterPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void RegisterPaymentInstrument(int delegateIdHigh, int delegateIdLow, int requestorIdHigh, int requestorIdLow, string trackingGuid, string paymentInstrumentInfoXml, string accountInfoXml, string responseOptionsXml, out string paymentInstrumentId, out string requiredPaperWorkUrl, out string paymentInstrumentsResultsXml) {
            object[] results = this.Invoke("RegisterPaymentInstrument", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requestorIdHigh,
                        requestorIdLow,
                        trackingGuid,
                        paymentInstrumentInfoXml,
                        accountInfoXml,
                        responseOptionsXml});
            paymentInstrumentId = ((string)(results[0]));
            requiredPaperWorkUrl = ((string)(results[1]));
            paymentInstrumentsResultsXml = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void RegisterPaymentInstrumentAsync(int delegateIdHigh, int delegateIdLow, int requestorIdHigh, int requestorIdLow, string trackingGuid, string paymentInstrumentInfoXml, string accountInfoXml, string responseOptionsXml) {
            this.RegisterPaymentInstrumentAsync(delegateIdHigh, delegateIdLow, requestorIdHigh, requestorIdLow, trackingGuid, paymentInstrumentInfoXml, accountInfoXml, responseOptionsXml, null);
        }
        
        /// <remarks/>
        public void RegisterPaymentInstrumentAsync(int delegateIdHigh, int delegateIdLow, int requestorIdHigh, int requestorIdLow, string trackingGuid, string paymentInstrumentInfoXml, string accountInfoXml, string responseOptionsXml, object userState) {
            if ((this.RegisterPaymentInstrumentOperationCompleted == null)) {
                this.RegisterPaymentInstrumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterPaymentInstrumentOperationCompleted);
            }
            this.InvokeAsync("RegisterPaymentInstrument", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requestorIdHigh,
                        requestorIdLow,
                        trackingGuid,
                        paymentInstrumentInfoXml,
                        accountInfoXml,
                        responseOptionsXml}, this.RegisterPaymentInstrumentOperationCompleted, userState);
        }
        
        private void OnRegisterPaymentInstrumentOperationCompleted(object arg) {
            if ((this.RegisterPaymentInstrumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterPaymentInstrumentCompleted(this, new RegisterPaymentInstrumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReinstateSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ReinstateSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, int lReserved, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML) {
            object[] results = this.Invoke("ReinstateSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId,
                        lReserved,
                        bstrCommentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
            pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void ReinstateSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, int lReserved, string bstrCommentInfoXML) {
            this.ReinstateSubscriptionAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrSubscriptionId, lReserved, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void ReinstateSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, int lReserved, string bstrCommentInfoXML, object userState) {
            if ((this.ReinstateSubscriptionOperationCompleted == null)) {
                this.ReinstateSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReinstateSubscriptionOperationCompleted);
            }
            this.InvokeAsync("ReinstateSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId,
                        lReserved,
                        bstrCommentInfoXML}, this.ReinstateSubscriptionOperationCompleted, userState);
        }
        
        private void OnReinstateSubscriptionOperationCompleted(object arg) {
            if ((this.ReinstateSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReinstateSubscriptionCompleted(this, new ReinstateSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemoveBillingReference", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void RemoveBillingReference(string version, string callerInfoXml, string billingReferenceId) {
            this.Invoke("RemoveBillingReference", new object[] {
                        version,
                        callerInfoXml,
                        billingReferenceId});
        }
        
        /// <remarks/>
        public void RemoveBillingReferenceAsync(string version, string callerInfoXml, string billingReferenceId) {
            this.RemoveBillingReferenceAsync(version, callerInfoXml, billingReferenceId, null);
        }
        
        /// <remarks/>
        public void RemoveBillingReferenceAsync(string version, string callerInfoXml, string billingReferenceId, object userState) {
            if ((this.RemoveBillingReferenceOperationCompleted == null)) {
                this.RemoveBillingReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveBillingReferenceOperationCompleted);
            }
            this.InvokeAsync("RemoveBillingReference", new object[] {
                        version,
                        callerInfoXml,
                        billingReferenceId}, this.RemoveBillingReferenceOperationCompleted, userState);
        }
        
        private void OnRemoveBillingReferenceOperationCompleted(object arg) {
            if ((this.RemoveBillingReferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveBillingReferenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemovePaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void RemovePaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML) {
            object[] results = this.Invoke("RemovePaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrPaymentInstrumentId});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemovePaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId) {
            this.RemovePaymentInstrumentAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrPaymentInstrumentId, null);
        }
        
        /// <remarks/>
        public void RemovePaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, object userState) {
            if ((this.RemovePaymentInstrumentOperationCompleted == null)) {
                this.RemovePaymentInstrumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePaymentInstrumentOperationCompleted);
            }
            this.InvokeAsync("RemovePaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrPaymentInstrumentId}, this.RemovePaymentInstrumentOperationCompleted, userState);
        }
        
        private void OnRemovePaymentInstrumentOperationCompleted(object arg) {
            if ((this.RemovePaymentInstrumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePaymentInstrumentCompleted(this, new RemovePaymentInstrumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemovePMNBasedServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void RemovePMNBasedServices(int lRequesterIdHigh, int lRequesterIdLow) {
            this.Invoke("RemovePMNBasedServices", new object[] {
                        lRequesterIdHigh,
                        lRequesterIdLow});
        }
        
        /// <remarks/>
        public void RemovePMNBasedServicesAsync(int lRequesterIdHigh, int lRequesterIdLow) {
            this.RemovePMNBasedServicesAsync(lRequesterIdHigh, lRequesterIdLow, null);
        }
        
        /// <remarks/>
        public void RemovePMNBasedServicesAsync(int lRequesterIdHigh, int lRequesterIdLow, object userState) {
            if ((this.RemovePMNBasedServicesOperationCompleted == null)) {
                this.RemovePMNBasedServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePMNBasedServicesOperationCompleted);
            }
            this.InvokeAsync("RemovePMNBasedServices", new object[] {
                        lRequesterIdHigh,
                        lRequesterIdLow}, this.RemovePMNBasedServicesOperationCompleted, userState);
        }
        
        private void OnRemovePMNBasedServicesOperationCompleted(object arg) {
            if ((this.RemovePMNBasedServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePMNBasedServicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemoveRoleAssignment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void RemoveRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("RemoveRoleAssignment", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrRoleAssignmentXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveRoleAssignmentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML) {
            this.RemoveRoleAssignmentAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrObjectId, bstrRoleAssignmentXML, null);
        }
        
        /// <remarks/>
        public void RemoveRoleAssignmentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, object userState) {
            if ((this.RemoveRoleAssignmentOperationCompleted == null)) {
                this.RemoveRoleAssignmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveRoleAssignmentOperationCompleted);
            }
            this.InvokeAsync("RemoveRoleAssignment", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrRoleAssignmentXML}, this.RemoveRoleAssignmentOperationCompleted, userState);
        }
        
        private void OnRemoveRoleAssignmentOperationCompleted(object arg) {
            if ((this.RemoveRoleAssignmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveRoleAssignmentCompleted(this, new RemoveRoleAssignmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.RemoveViolation", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void RemoveViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
            object[] results = this.Invoke("RemoveViolation", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrObjectId,
                        lViolationId,
                        bstrCommentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrStatusInfoXML = ((string)(results[1]));
            pbstrAmountChargedXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void RemoveViolationAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML) {
            this.RemoveViolationAsync(lDelegateIdHigh, lDelegateIdLow, bstrObjectId, lViolationId, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void RemoveViolationAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, object userState) {
            if ((this.RemoveViolationOperationCompleted == null)) {
                this.RemoveViolationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveViolationOperationCompleted);
            }
            this.InvokeAsync("RemoveViolation", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrObjectId,
                        lViolationId,
                        bstrCommentInfoXML}, this.RemoveViolationOperationCompleted, userState);
        }
        
        private void OnRemoveViolationOperationCompleted(object arg) {
            if ((this.RemoveViolationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveViolationCompleted(this, new RemoveViolationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReportSingleUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ReportSingleUsageEvent(string trackingGuid, bool computeOnly, string usageEventXml, out string lineItemId, out string usageInfoXml, out string amountChargedXml) {
            object[] results = this.Invoke("ReportSingleUsageEvent", new object[] {
                        trackingGuid,
                        computeOnly,
                        usageEventXml});
            lineItemId = ((string)(results[0]));
            usageInfoXml = ((string)(results[1]));
            amountChargedXml = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void ReportSingleUsageEventAsync(string trackingGuid, bool computeOnly, string usageEventXml) {
            this.ReportSingleUsageEventAsync(trackingGuid, computeOnly, usageEventXml, null);
        }
        
        /// <remarks/>
        public void ReportSingleUsageEventAsync(string trackingGuid, bool computeOnly, string usageEventXml, object userState) {
            if ((this.ReportSingleUsageEventOperationCompleted == null)) {
                this.ReportSingleUsageEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportSingleUsageEventOperationCompleted);
            }
            this.InvokeAsync("ReportSingleUsageEvent", new object[] {
                        trackingGuid,
                        computeOnly,
                        usageEventXml}, this.ReportSingleUsageEventOperationCompleted, userState);
        }
        
        private void OnReportSingleUsageEventOperationCompleted(object arg) {
            if ((this.ReportSingleUsageEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportSingleUsageEventCompleted(this, new ReportSingleUsageEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReportTransactionEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ReportTransactionEvent(long sequenceNumber, string transactionId, string merchantId, string vendorInternalTransactionId, string amountXml, string transactionEventXml, string paymentDetailsXml) {
            this.Invoke("ReportTransactionEvent", new object[] {
                        sequenceNumber,
                        transactionId,
                        merchantId,
                        vendorInternalTransactionId,
                        amountXml,
                        transactionEventXml,
                        paymentDetailsXml});
        }
        
        /// <remarks/>
        public void ReportTransactionEventAsync(long sequenceNumber, string transactionId, string merchantId, string vendorInternalTransactionId, string amountXml, string transactionEventXml, string paymentDetailsXml) {
            this.ReportTransactionEventAsync(sequenceNumber, transactionId, merchantId, vendorInternalTransactionId, amountXml, transactionEventXml, paymentDetailsXml, null);
        }
        
        /// <remarks/>
        public void ReportTransactionEventAsync(long sequenceNumber, string transactionId, string merchantId, string vendorInternalTransactionId, string amountXml, string transactionEventXml, string paymentDetailsXml, object userState) {
            if ((this.ReportTransactionEventOperationCompleted == null)) {
                this.ReportTransactionEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportTransactionEventOperationCompleted);
            }
            this.InvokeAsync("ReportTransactionEvent", new object[] {
                        sequenceNumber,
                        transactionId,
                        merchantId,
                        vendorInternalTransactionId,
                        amountXml,
                        transactionEventXml,
                        paymentDetailsXml}, this.ReportTransactionEventOperationCompleted, userState);
        }
        
        private void OnReportTransactionEventOperationCompleted(object arg) {
            if ((this.ReportTransactionEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportTransactionEventCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReportUsageEvent", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ReportUsageEvent(string bstrTrackingGUID, string bstrUsageSetXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("ReportUsageEvent", new object[] {
                        bstrTrackingGUID,
                        bstrUsageSetXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReportUsageEventAsync(string bstrTrackingGUID, string bstrUsageSetXML) {
            this.ReportUsageEventAsync(bstrTrackingGUID, bstrUsageSetXML, null);
        }
        
        /// <remarks/>
        public void ReportUsageEventAsync(string bstrTrackingGUID, string bstrUsageSetXML, object userState) {
            if ((this.ReportUsageEventOperationCompleted == null)) {
                this.ReportUsageEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportUsageEventOperationCompleted);
            }
            this.InvokeAsync("ReportUsageEvent", new object[] {
                        bstrTrackingGUID,
                        bstrUsageSetXML}, this.ReportUsageEventOperationCompleted, userState);
        }
        
        private void OnReportUsageEventOperationCompleted(object arg) {
            if ((this.ReportUsageEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportUsageEventCompleted(this, new ReportUsageEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ReschedulePayment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ReschedulePayment(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, bool fApplyDeclineEffects, string bstrNewDueDate, bool fStickyDueDate, int lTransactionType, string bstrSettlementDetailsXML, out string pbstrErrorXML, out string pbstrAmountChargedSetXML) {
            object[] results = this.Invoke("ReschedulePayment", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        fApplyDeclineEffects,
                        bstrNewDueDate,
                        fStickyDueDate,
                        lTransactionType,
                        bstrSettlementDetailsXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedSetXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void ReschedulePaymentAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, bool fApplyDeclineEffects, string bstrNewDueDate, bool fStickyDueDate, int lTransactionType, string bstrSettlementDetailsXML) {
            this.ReschedulePaymentAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrPaymentInstrumentId, fApplyDeclineEffects, bstrNewDueDate, fStickyDueDate, lTransactionType, bstrSettlementDetailsXML, null);
        }
        
        /// <remarks/>
        public void ReschedulePaymentAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, bool fApplyDeclineEffects, string bstrNewDueDate, bool fStickyDueDate, int lTransactionType, string bstrSettlementDetailsXML, object userState) {
            if ((this.ReschedulePaymentOperationCompleted == null)) {
                this.ReschedulePaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReschedulePaymentOperationCompleted);
            }
            this.InvokeAsync("ReschedulePayment", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        fApplyDeclineEffects,
                        bstrNewDueDate,
                        fStickyDueDate,
                        lTransactionType,
                        bstrSettlementDetailsXML}, this.ReschedulePaymentOperationCompleted, userState);
        }
        
        private void OnReschedulePaymentOperationCompleted(object arg) {
            if ((this.ReschedulePaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReschedulePaymentCompleted(this, new ReschedulePaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SearchAccounts", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SearchAccounts(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
            object[] results = this.Invoke("SearchAccounts", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        fFullData,
                        lMax,
                        bstrSearchXML});
            pbstrErrorXML = ((string)(results[0]));
            pfMoreRows = ((int)(results[1]));
            plAccountInfoCount = ((int)(results[2]));
            pbstrAccountInfoSetXML = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void SearchAccountsAsync(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML) {
            this.SearchAccountsAsync(lDelegateIdHigh, lDelegateIdLow, fFullData, lMax, bstrSearchXML, null);
        }
        
        /// <remarks/>
        public void SearchAccountsAsync(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrSearchXML, object userState) {
            if ((this.SearchAccountsOperationCompleted == null)) {
                this.SearchAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchAccountsOperationCompleted);
            }
            this.InvokeAsync("SearchAccounts", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        fFullData,
                        lMax,
                        bstrSearchXML}, this.SearchAccountsOperationCompleted, userState);
        }
        
        private void OnSearchAccountsOperationCompleted(object arg) {
            if ((this.SearchAccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchAccountsCompleted(this, new SearchAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SearchAccountsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SearchAccountsEx(int delegatePuidHigh, int delegatePuidLow, string accountSearchCriteriaXml, string bookmark, int returnedAccountCountMax, out string bookmarkNew, out int returnedAccountCount, out string accountInfoSetXml) {
            object[] results = this.Invoke("SearchAccountsEx", new object[] {
                        delegatePuidHigh,
                        delegatePuidLow,
                        accountSearchCriteriaXml,
                        bookmark,
                        returnedAccountCountMax});
            bookmarkNew = ((string)(results[0]));
            returnedAccountCount = ((int)(results[1]));
            accountInfoSetXml = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void SearchAccountsExAsync(int delegatePuidHigh, int delegatePuidLow, string accountSearchCriteriaXml, string bookmark, int returnedAccountCountMax) {
            this.SearchAccountsExAsync(delegatePuidHigh, delegatePuidLow, accountSearchCriteriaXml, bookmark, returnedAccountCountMax, null);
        }
        
        /// <remarks/>
        public void SearchAccountsExAsync(int delegatePuidHigh, int delegatePuidLow, string accountSearchCriteriaXml, string bookmark, int returnedAccountCountMax, object userState) {
            if ((this.SearchAccountsExOperationCompleted == null)) {
                this.SearchAccountsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchAccountsExOperationCompleted);
            }
            this.InvokeAsync("SearchAccountsEx", new object[] {
                        delegatePuidHigh,
                        delegatePuidLow,
                        accountSearchCriteriaXml,
                        bookmark,
                        returnedAccountCountMax}, this.SearchAccountsExOperationCompleted, userState);
        }
        
        private void OnSearchAccountsExOperationCompleted(object arg) {
            if ((this.SearchAccountsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchAccountsExCompleted(this, new SearchAccountsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SearchBillingInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SearchBillingInfo(int delegateIdHigh, int delegateIdLow, string billingInfoSearchCriteriaXML, out string billingInfoSetXML) {
            object[] results = this.Invoke("SearchBillingInfo", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        billingInfoSearchCriteriaXML});
            billingInfoSetXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchBillingInfoAsync(int delegateIdHigh, int delegateIdLow, string billingInfoSearchCriteriaXML) {
            this.SearchBillingInfoAsync(delegateIdHigh, delegateIdLow, billingInfoSearchCriteriaXML, null);
        }
        
        /// <remarks/>
        public void SearchBillingInfoAsync(int delegateIdHigh, int delegateIdLow, string billingInfoSearchCriteriaXML, object userState) {
            if ((this.SearchBillingInfoOperationCompleted == null)) {
                this.SearchBillingInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchBillingInfoOperationCompleted);
            }
            this.InvokeAsync("SearchBillingInfo", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        billingInfoSearchCriteriaXML}, this.SearchBillingInfoOperationCompleted, userState);
        }
        
        private void OnSearchBillingInfoOperationCompleted(object arg) {
            if ((this.SearchBillingInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchBillingInfoCompleted(this, new SearchBillingInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SendHCI", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SendHCI(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, int lBillingPeriodId, string bstrLocale) {
            this.Invoke("SendHCI", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountId,
                        lBillingPeriodId,
                        bstrLocale});
        }
        
        /// <remarks/>
        public void SendHCIAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, int lBillingPeriodId, string bstrLocale) {
            this.SendHCIAsync(lDelegateIdHigh, lDelegateIdLow, bstrAccountId, lBillingPeriodId, bstrLocale, null);
        }
        
        /// <remarks/>
        public void SendHCIAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, int lBillingPeriodId, string bstrLocale, object userState) {
            if ((this.SendHCIOperationCompleted == null)) {
                this.SendHCIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendHCIOperationCompleted);
            }
            this.InvokeAsync("SendHCI", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountId,
                        lBillingPeriodId,
                        bstrLocale}, this.SendHCIOperationCompleted, userState);
        }
        
        private void OnSendHCIOperationCompleted(object arg) {
            if ((this.SendHCICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendHCICompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SendValidationTokenInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SendValidationTokenInfo(string version, System.Guid trackingGuid, string callerInfoXml, string validationTokenXml, string paymentInstrumentInfoXml) {
            this.Invoke("SendValidationTokenInfo", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        validationTokenXml,
                        paymentInstrumentInfoXml});
        }
        
        /// <remarks/>
        public void SendValidationTokenInfoAsync(string version, System.Guid trackingGuid, string callerInfoXml, string validationTokenXml, string paymentInstrumentInfoXml) {
            this.SendValidationTokenInfoAsync(version, trackingGuid, callerInfoXml, validationTokenXml, paymentInstrumentInfoXml, null);
        }
        
        /// <remarks/>
        public void SendValidationTokenInfoAsync(string version, System.Guid trackingGuid, string callerInfoXml, string validationTokenXml, string paymentInstrumentInfoXml, object userState) {
            if ((this.SendValidationTokenInfoOperationCompleted == null)) {
                this.SendValidationTokenInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendValidationTokenInfoOperationCompleted);
            }
            this.InvokeAsync("SendValidationTokenInfo", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        validationTokenXml,
                        paymentInstrumentInfoXml}, this.SendValidationTokenInfoOperationCompleted, userState);
        }
        
        private void OnSendValidationTokenInfoOperationCompleted(object arg) {
            if ((this.SendValidationTokenInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendValidationTokenInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SetBillingReference", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SetBillingReference(string version, System.Guid trackingGuid, string callerInfoXml, string paymentInstrumentId, string billingConfigGroup, out string billingReferenceId) {
            object[] results = this.Invoke("SetBillingReference", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        paymentInstrumentId,
                        billingConfigGroup});
            billingReferenceId = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetBillingReferenceAsync(string version, System.Guid trackingGuid, string callerInfoXml, string paymentInstrumentId, string billingConfigGroup) {
            this.SetBillingReferenceAsync(version, trackingGuid, callerInfoXml, paymentInstrumentId, billingConfigGroup, null);
        }
        
        /// <remarks/>
        public void SetBillingReferenceAsync(string version, System.Guid trackingGuid, string callerInfoXml, string paymentInstrumentId, string billingConfigGroup, object userState) {
            if ((this.SetBillingReferenceOperationCompleted == null)) {
                this.SetBillingReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetBillingReferenceOperationCompleted);
            }
            this.InvokeAsync("SetBillingReference", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        paymentInstrumentId,
                        billingConfigGroup}, this.SetBillingReferenceOperationCompleted, userState);
        }
        
        private void OnSetBillingReferenceOperationCompleted(object arg) {
            if ((this.SetBillingReferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetBillingReferenceCompleted(this, new SetBillingReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SetPartnerConfiguration", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SetPartnerConfiguration(System.Guid trackingGuid, System.Guid ownerID, string partnerConfigObjectXML, out string responseXML) {
            object[] results = this.Invoke("SetPartnerConfiguration", new object[] {
                        trackingGuid,
                        ownerID,
                        partnerConfigObjectXML});
            responseXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetPartnerConfigurationAsync(System.Guid trackingGuid, System.Guid ownerID, string partnerConfigObjectXML) {
            this.SetPartnerConfigurationAsync(trackingGuid, ownerID, partnerConfigObjectXML, null);
        }
        
        /// <remarks/>
        public void SetPartnerConfigurationAsync(System.Guid trackingGuid, System.Guid ownerID, string partnerConfigObjectXML, object userState) {
            if ((this.SetPartnerConfigurationOperationCompleted == null)) {
                this.SetPartnerConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPartnerConfigurationOperationCompleted);
            }
            this.InvokeAsync("SetPartnerConfiguration", new object[] {
                        trackingGuid,
                        ownerID,
                        partnerConfigObjectXML}, this.SetPartnerConfigurationOperationCompleted, userState);
        }
        
        private void OnSetPartnerConfigurationOperationCompleted(object arg) {
            if ((this.SetPartnerConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPartnerConfigurationCompleted(this, new SetPartnerConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SettleBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SettleBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
            object[] results = this.Invoke("SettleBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void SettleBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId) {
            this.SettleBalanceAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrPaymentInstrumentId, null);
        }
        
        /// <remarks/>
        public void SettleBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, object userState) {
            if ((this.SettleBalanceOperationCompleted == null)) {
                this.SettleBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSettleBalanceOperationCompleted);
            }
            this.InvokeAsync("SettleBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId}, this.SettleBalanceOperationCompleted, userState);
        }
        
        private void OnSettleBalanceOperationCompleted(object arg) {
            if ((this.SettleBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SettleBalanceCompleted(this, new SettleBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SettleOrder", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SettleOrder(string version, System.Guid trackingGuid, string callerInfoXml, string objectId, string correlationInfoXml, string orderDetailXml, out string orderReceiptXml) {
            object[] results = this.Invoke("SettleOrder", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        objectId,
                        correlationInfoXml,
                        orderDetailXml});
            orderReceiptXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SettleOrderAsync(string version, System.Guid trackingGuid, string callerInfoXml, string objectId, string correlationInfoXml, string orderDetailXml) {
            this.SettleOrderAsync(version, trackingGuid, callerInfoXml, objectId, correlationInfoXml, orderDetailXml, null);
        }
        
        /// <remarks/>
        public void SettleOrderAsync(string version, System.Guid trackingGuid, string callerInfoXml, string objectId, string correlationInfoXml, string orderDetailXml, object userState) {
            if ((this.SettleOrderOperationCompleted == null)) {
                this.SettleOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSettleOrderOperationCompleted);
            }
            this.InvokeAsync("SettleOrder", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        objectId,
                        correlationInfoXml,
                        orderDetailXml}, this.SettleOrderOperationCompleted, userState);
        }
        
        private void OnSettleOrderOperationCompleted(object arg) {
            if ((this.SettleOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SettleOrderCompleted(this, new SettleOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.WriteOffBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void WriteOffBalance(int lDelegateIdHigh, int lDelegateIdLow, System.Guid trackingGuid, string bstrBalanceId, string bstrAccountId, string bstrCommentInfoXML, out string transactionId) {
            object[] results = this.Invoke("WriteOffBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        trackingGuid,
                        bstrBalanceId,
                        bstrAccountId,
                        bstrCommentInfoXML});
            transactionId = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WriteOffBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, System.Guid trackingGuid, string bstrBalanceId, string bstrAccountId, string bstrCommentInfoXML) {
            this.WriteOffBalanceAsync(lDelegateIdHigh, lDelegateIdLow, trackingGuid, bstrBalanceId, bstrAccountId, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void WriteOffBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, System.Guid trackingGuid, string bstrBalanceId, string bstrAccountId, string bstrCommentInfoXML, object userState) {
            if ((this.WriteOffBalanceOperationCompleted == null)) {
                this.WriteOffBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWriteOffBalanceOperationCompleted);
            }
            this.InvokeAsync("WriteOffBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        trackingGuid,
                        bstrBalanceId,
                        bstrAccountId,
                        bstrCommentInfoXML}, this.WriteOffBalanceOperationCompleted, userState);
        }
        
        private void OnWriteOffBalanceOperationCompleted(object arg) {
            if ((this.WriteOffBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WriteOffBalanceCompleted(this, new WriteOffBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SignAgreement", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SignAgreement(int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, out string pbstrErrorXML) {
            object[] results = this.Invoke("SignAgreement", new object[] {
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SignAgreementAsync(int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime) {
            this.SignAgreementAsync(lRequesterIdHigh, lRequesterIdLow, bstrSubscriptionId, bstrPolicyGUID, lPolicyVersion, bstrSignatureDateTime, null);
        }
        
        /// <remarks/>
        public void SignAgreementAsync(int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrPolicyGUID, int lPolicyVersion, string bstrSignatureDateTime, object userState) {
            if ((this.SignAgreementOperationCompleted == null)) {
                this.SignAgreementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignAgreementOperationCompleted);
            }
            this.InvokeAsync("SignAgreement", new object[] {
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime}, this.SignAgreementOperationCompleted, userState);
        }
        
        private void OnSignAgreementOperationCompleted(object arg) {
            if ((this.SignAgreementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignAgreementCompleted(this, new SignAgreementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.StopPayments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void StopPayments(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML) {
            object[] results = this.Invoke("StopPayments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrPaymentInstrumentId});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void StopPaymentsAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId) {
            this.StopPaymentsAsync(lDelegateIdHigh, lDelegateIdLow, bstrPaymentInstrumentId, null);
        }
        
        /// <remarks/>
        public void StopPaymentsAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentId, object userState) {
            if ((this.StopPaymentsOperationCompleted == null)) {
                this.StopPaymentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopPaymentsOperationCompleted);
            }
            this.InvokeAsync("StopPayments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrPaymentInstrumentId}, this.StopPaymentsOperationCompleted, userState);
        }
        
        private void OnStopPaymentsOperationCompleted(object arg) {
            if ((this.StopPaymentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopPaymentsCompleted(this, new StopPaymentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SubmitOrder", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SubmitOrder(string version, System.Guid trackingGuid, string callerInfoXml, string objectId, string paymentInstrumentInfoXml, string orderDetailXml, out string orderReceiptXml) {
            object[] results = this.Invoke("SubmitOrder", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        objectId,
                        paymentInstrumentInfoXml,
                        orderDetailXml});
            orderReceiptXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitOrderAsync(string version, System.Guid trackingGuid, string callerInfoXml, string objectId, string paymentInstrumentInfoXml, string orderDetailXml) {
            this.SubmitOrderAsync(version, trackingGuid, callerInfoXml, objectId, paymentInstrumentInfoXml, orderDetailXml, null);
        }
        
        /// <remarks/>
        public void SubmitOrderAsync(string version, System.Guid trackingGuid, string callerInfoXml, string objectId, string paymentInstrumentInfoXml, string orderDetailXml, object userState) {
            if ((this.SubmitOrderOperationCompleted == null)) {
                this.SubmitOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitOrderOperationCompleted);
            }
            this.InvokeAsync("SubmitOrder", new object[] {
                        version,
                        trackingGuid,
                        callerInfoXml,
                        objectId,
                        paymentInstrumentInfoXml,
                        orderDetailXml}, this.SubmitOrderOperationCompleted, userState);
        }
        
        private void OnSubmitOrderOperationCompleted(object arg) {
            if ((this.SubmitOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitOrderCompleted(this, new SubmitOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SwitchPaymentInstruments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SwitchPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
            object[] results = this.Invoke("SwitchPaymentInstruments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrFromPaymentInstrumentId,
                        bstrToPaymentInstrumentId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void SwitchPaymentInstrumentsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId) {
            this.SwitchPaymentInstrumentsAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, bstrFromPaymentInstrumentId, bstrToPaymentInstrumentId, null);
        }
        
        /// <remarks/>
        public void SwitchPaymentInstrumentsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, object userState) {
            if ((this.SwitchPaymentInstrumentsOperationCompleted == null)) {
                this.SwitchPaymentInstrumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSwitchPaymentInstrumentsOperationCompleted);
            }
            this.InvokeAsync("SwitchPaymentInstruments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrFromPaymentInstrumentId,
                        bstrToPaymentInstrumentId}, this.SwitchPaymentInstrumentsOperationCompleted, userState);
        }
        
        private void OnSwitchPaymentInstrumentsOperationCompleted(object arg) {
            if ((this.SwitchPaymentInstrumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SwitchPaymentInstrumentsCompleted(this, new SwitchPaymentInstrumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SyncUPSCacheForPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SyncUPSCacheForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, out string pbstrErrorXML) {
            object[] results = this.Invoke("SyncUPSCacheForPUID", new object[] {
                        lCustomerPUIDHigh,
                        lCustomerPUIDLow});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SyncUPSCacheForPUIDAsync(int lCustomerPUIDHigh, int lCustomerPUIDLow) {
            this.SyncUPSCacheForPUIDAsync(lCustomerPUIDHigh, lCustomerPUIDLow, null);
        }
        
        /// <remarks/>
        public void SyncUPSCacheForPUIDAsync(int lCustomerPUIDHigh, int lCustomerPUIDLow, object userState) {
            if ((this.SyncUPSCacheForPUIDOperationCompleted == null)) {
                this.SyncUPSCacheForPUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSyncUPSCacheForPUIDOperationCompleted);
            }
            this.InvokeAsync("SyncUPSCacheForPUID", new object[] {
                        lCustomerPUIDHigh,
                        lCustomerPUIDLow}, this.SyncUPSCacheForPUIDOperationCompleted, userState);
        }
        
        private void OnSyncUPSCacheForPUIDOperationCompleted(object arg) {
            if ((this.SyncUPSCacheForPUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SyncUPSCacheForPUIDCompleted(this, new SyncUPSCacheForPUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.TestConnection", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void TestConnection(string bstrInputString, out string pbstrOutputString) {
            object[] results = this.Invoke("TestConnection", new object[] {
                        bstrInputString});
            pbstrOutputString = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string bstrInputString) {
            this.TestConnectionAsync(bstrInputString, null);
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string bstrInputString, object userState) {
            if ((this.TestConnectionOperationCompleted == null)) {
                this.TestConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectionOperationCompleted);
            }
            this.InvokeAsync("TestConnection", new object[] {
                        bstrInputString}, this.TestConnectionOperationCompleted, userState);
        }
        
        private void OnTestConnectionOperationCompleted(object arg) {
            if ((this.TestConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConnectionCompleted(this, new TestConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.TokenRedemption", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void TokenRedemption(string apiContextXML, string detailsXML, out string responseXML) {
            object[] results = this.Invoke("TokenRedemption", new object[] {
                        apiContextXML,
                        detailsXML});
            responseXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TokenRedemptionAsync(string apiContextXML, string detailsXML) {
            this.TokenRedemptionAsync(apiContextXML, detailsXML, null);
        }
        
        /// <remarks/>
        public void TokenRedemptionAsync(string apiContextXML, string detailsXML, object userState) {
            if ((this.TokenRedemptionOperationCompleted == null)) {
                this.TokenRedemptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTokenRedemptionOperationCompleted);
            }
            this.InvokeAsync("TokenRedemption", new object[] {
                        apiContextXML,
                        detailsXML}, this.TokenRedemptionOperationCompleted, userState);
        }
        
        private void OnTokenRedemptionOperationCompleted(object arg) {
            if ((this.TokenRedemptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TokenRedemptionCompleted(this, new TokenRedemptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.TransferBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void TransferBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
            object[] results = this.Invoke("TransferBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrFromPaymentInstrumentId,
                        bstrToPaymentInstrumentId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void TransferBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId) {
            this.TransferBalanceAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrFromPaymentInstrumentId, bstrToPaymentInstrumentId, null);
        }
        
        /// <remarks/>
        public void TransferBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrFromPaymentInstrumentId, string bstrToPaymentInstrumentId, object userState) {
            if ((this.TransferBalanceOperationCompleted == null)) {
                this.TransferBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferBalanceOperationCompleted);
            }
            this.InvokeAsync("TransferBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrFromPaymentInstrumentId,
                        bstrToPaymentInstrumentId}, this.TransferBalanceOperationCompleted, userState);
        }
        
        private void OnTransferBalanceOperationCompleted(object arg) {
            if ((this.TransferBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferBalanceCompleted(this, new TransferBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnbanPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void UnbanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("UnbanPaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrPaymentInstrumentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnbanPaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML) {
            this.UnbanPaymentInstrumentAsync(lDelegateIdHigh, lDelegateIdLow, bstrPaymentInstrumentInfoXML, null);
        }
        
        /// <remarks/>
        public void UnbanPaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrPaymentInstrumentInfoXML, object userState) {
            if ((this.UnbanPaymentInstrumentOperationCompleted == null)) {
                this.UnbanPaymentInstrumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnbanPaymentInstrumentOperationCompleted);
            }
            this.InvokeAsync("UnbanPaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrPaymentInstrumentInfoXML}, this.UnbanPaymentInstrumentOperationCompleted, userState);
        }
        
        private void OnUnbanPaymentInstrumentOperationCompleted(object arg) {
            if ((this.UnbanPaymentInstrumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnbanPaymentInstrumentCompleted(this, new UnbanPaymentInstrumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnbanUser", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void UnbanUser(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("UnbanUser", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountInfoXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UnbanUserAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML) {
            this.UnbanUserAsync(lDelegateIdHigh, lDelegateIdLow, bstrAccountInfoXML, null);
        }
        
        /// <remarks/>
        public void UnbanUserAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountInfoXML, object userState) {
            if ((this.UnbanUserOperationCompleted == null)) {
                this.UnbanUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnbanUserOperationCompleted);
            }
            this.InvokeAsync("UnbanUser", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountInfoXML}, this.UnbanUserOperationCompleted, userState);
        }
        
        private void OnUnbanUserOperationCompleted(object arg) {
            if ((this.UnbanUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnbanUserCompleted(this, new UnbanUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UnIssueTokenTrusted", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void UnIssueTokenTrusted(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId) {
            this.Invoke("UnIssueTokenTrusted", new object[] {
                        partnerName,
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId});
        }
        
        /// <remarks/>
        public void UnIssueTokenTrustedAsync(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId) {
            this.UnIssueTokenTrustedAsync(partnerName, delegateIdHigh, delegateIdLow, trackingGuid, token, tokenType, externalReferenceId, null);
        }
        
        /// <remarks/>
        public void UnIssueTokenTrustedAsync(string partnerName, int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, object userState) {
            if ((this.UnIssueTokenTrustedOperationCompleted == null)) {
                this.UnIssueTokenTrustedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnIssueTokenTrustedOperationCompleted);
            }
            this.InvokeAsync("UnIssueTokenTrusted", new object[] {
                        partnerName,
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId}, this.UnIssueTokenTrustedOperationCompleted, userState);
        }
        
        private void OnUnIssueTokenTrustedOperationCompleted(object arg) {
            if ((this.UnIssueTokenTrustedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnIssueTokenTrustedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdateAccountInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void UpdateAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML, out string pbstrErrorXML, out string pbstrRequiredPaperWorkURL) {
            object[] results = this.Invoke("UpdateAccountInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId,
                        bstrAccountInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrRequiredPaperWorkURL = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void UpdateAccountInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML) {
            this.UpdateAccountInfoAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrAccountId, bstrAccountInfoXML, null);
        }
        
        /// <remarks/>
        public void UpdateAccountInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrAccountInfoXML, object userState) {
            if ((this.UpdateAccountInfoOperationCompleted == null)) {
                this.UpdateAccountInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAccountInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateAccountInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId,
                        bstrAccountInfoXML}, this.UpdateAccountInfoOperationCompleted, userState);
        }
        
        private void OnUpdateAccountInfoOperationCompleted(object arg) {
            if ((this.UpdateAccountInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAccountInfoCompleted(this, new UpdateAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdatePaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void UpdatePaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("UpdatePaymentInstrumentInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrPaymentInstrumentId,
                        bstrPaymentInstrumentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePaymentInstrumentInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML) {
            this.UpdatePaymentInstrumentInfoAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrPaymentInstrumentId, bstrPaymentInstrumentInfoXML, null);
        }
        
        /// <remarks/>
        public void UpdatePaymentInstrumentInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, string bstrPaymentInstrumentInfoXML, object userState) {
            if ((this.UpdatePaymentInstrumentInfoOperationCompleted == null)) {
                this.UpdatePaymentInstrumentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePaymentInstrumentInfoOperationCompleted);
            }
            this.InvokeAsync("UpdatePaymentInstrumentInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrPaymentInstrumentId,
                        bstrPaymentInstrumentInfoXML}, this.UpdatePaymentInstrumentInfoOperationCompleted, userState);
        }
        
        private void OnUpdatePaymentInstrumentInfoOperationCompleted(object arg) {
            if ((this.UpdatePaymentInstrumentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePaymentInstrumentInfoCompleted(this, new UpdatePaymentInstrumentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.UpdateSubscriptionInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void UpdateSubscriptionInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("UpdateSubscriptionInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId,
                        bstrSubscriptionInfoXML,
                        bstrReferralSetXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSubscriptionInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML) {
            this.UpdateSubscriptionInfoAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, bstrSubscriptionId, bstrSubscriptionInfoXML, bstrReferralSetXML, null);
        }
        
        /// <remarks/>
        public void UpdateSubscriptionInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, string bstrSubscriptionInfoXML, string bstrReferralSetXML, object userState) {
            if ((this.UpdateSubscriptionInfoOperationCompleted == null)) {
                this.UpdateSubscriptionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSubscriptionInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateSubscriptionInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId,
                        bstrSubscriptionInfoXML,
                        bstrReferralSetXML}, this.UpdateSubscriptionInfoOperationCompleted, userState);
        }
        
        private void OnUpdateSubscriptionInfoOperationCompleted(object arg) {
            if ((this.UpdateSubscriptionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSubscriptionInfoCompleted(this, new UpdateSubscriptionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ValidateProvisioningData", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ValidateProvisioningData(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML, out string pbstrErrorXML, out string pbstrResponseXML) {
            object[] results = this.Invoke("ValidateProvisioningData", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrServiceComponentId,
                        bstrDetailsXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrResponseXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void ValidateProvisioningDataAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML) {
            this.ValidateProvisioningDataAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrServiceComponentId, bstrDetailsXML, null);
        }
        
        /// <remarks/>
        public void ValidateProvisioningDataAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, string bstrDetailsXML, object userState) {
            if ((this.ValidateProvisioningDataOperationCompleted == null)) {
                this.ValidateProvisioningDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateProvisioningDataOperationCompleted);
            }
            this.InvokeAsync("ValidateProvisioningData", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrServiceComponentId,
                        bstrDetailsXML}, this.ValidateProvisioningDataOperationCompleted, userState);
        }
        
        private void OnValidateProvisioningDataOperationCompleted(object arg) {
            if ((this.ValidateProvisioningDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateProvisioningDataCompleted(this, new ValidateProvisioningDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ValidateToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ValidateToken(int delegateIdHigh, int delegateIdLow, string tokenClassGuid, string pin, string sequenceNumber, int signature, string partNumber) {
            this.Invoke("ValidateToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        tokenClassGuid,
                        pin,
                        sequenceNumber,
                        signature,
                        partNumber});
        }
        
        /// <remarks/>
        public void ValidateTokenAsync(int delegateIdHigh, int delegateIdLow, string tokenClassGuid, string pin, string sequenceNumber, int signature, string partNumber) {
            this.ValidateTokenAsync(delegateIdHigh, delegateIdLow, tokenClassGuid, pin, sequenceNumber, signature, partNumber, null);
        }
        
        /// <remarks/>
        public void ValidateTokenAsync(int delegateIdHigh, int delegateIdLow, string tokenClassGuid, string pin, string sequenceNumber, int signature, string partNumber, object userState) {
            if ((this.ValidateTokenOperationCompleted == null)) {
                this.ValidateTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateTokenOperationCompleted);
            }
            this.InvokeAsync("ValidateToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        tokenClassGuid,
                        pin,
                        sequenceNumber,
                        signature,
                        partNumber}, this.ValidateTokenOperationCompleted, userState);
        }
        
        private void OnValidateTokenOperationCompleted(object arg) {
            if ((this.ValidateTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateTokenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ActivateToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ActivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus) {
            this.Invoke("ActivateToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        committedStatus});
        }
        
        /// <remarks/>
        public void ActivateTokenAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus) {
            this.ActivateTokenAsync(delegateIdHigh, delegateIdLow, trackingGuid, token, tokenType, externalReferenceId, timeStamp, committedStatus, null);
        }
        
        /// <remarks/>
        public void ActivateTokenAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, object userState) {
            if ((this.ActivateTokenOperationCompleted == null)) {
                this.ActivateTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateTokenOperationCompleted);
            }
            this.InvokeAsync("ActivateToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        committedStatus}, this.ActivateTokenOperationCompleted, userState);
        }
        
        private void OnActivateTokenOperationCompleted(object arg) {
            if ((this.ActivateTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateTokenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ActivateTokenEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ActivateTokenEx(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, string tokenInfoXML) {
            this.Invoke("ActivateTokenEx", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        committedStatus,
                        tokenInfoXML});
        }
        
        /// <remarks/>
        public void ActivateTokenExAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, string tokenInfoXML) {
            this.ActivateTokenExAsync(delegateIdHigh, delegateIdLow, trackingGuid, token, tokenType, externalReferenceId, timeStamp, committedStatus, tokenInfoXML, null);
        }
        
        /// <remarks/>
        public void ActivateTokenExAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, string tokenInfoXML, object userState) {
            if ((this.ActivateTokenExOperationCompleted == null)) {
                this.ActivateTokenExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateTokenExOperationCompleted);
            }
            this.InvokeAsync("ActivateTokenEx", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        committedStatus,
                        tokenInfoXML}, this.ActivateTokenExOperationCompleted, userState);
        }
        
        private void OnActivateTokenExOperationCompleted(object arg) {
            if ((this.ActivateTokenExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateTokenExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddComment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void AddComment(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("AddComment", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountId,
                        bstrCommentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddCommentAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML) {
            this.AddCommentAsync(lDelegateIdHigh, lDelegateIdLow, bstrAccountId, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void AddCommentAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, object userState) {
            if ((this.AddCommentOperationCompleted == null)) {
                this.AddCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCommentOperationCompleted);
            }
            this.InvokeAsync("AddComment", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountId,
                        bstrCommentInfoXML}, this.AddCommentOperationCompleted, userState);
        }
        
        private void OnAddCommentOperationCompleted(object arg) {
            if ((this.AddCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCommentCompleted(this, new AddCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void AddPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out string pbstrPaymentInstrumentId, out string pbstrRequiredPaperWorkURL) {
            object[] results = this.Invoke("AddPaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrAccountId,
                        bstrPaymentInstrumentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrPaymentInstrumentId = ((string)(results[1]));
            pbstrRequiredPaperWorkURL = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void AddPaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML) {
            this.AddPaymentInstrumentAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, bstrAccountId, bstrPaymentInstrumentInfoXML, null);
        }
        
        /// <remarks/>
        public void AddPaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrAccountId, string bstrPaymentInstrumentInfoXML, object userState) {
            if ((this.AddPaymentInstrumentOperationCompleted == null)) {
                this.AddPaymentInstrumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPaymentInstrumentOperationCompleted);
            }
            this.InvokeAsync("AddPaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrAccountId,
                        bstrPaymentInstrumentInfoXML}, this.AddPaymentInstrumentOperationCompleted, userState);
        }
        
        private void OnAddPaymentInstrumentOperationCompleted(object arg) {
            if ((this.AddPaymentInstrumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPaymentInstrumentCompleted(this, new AddPaymentInstrumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddRoleAssignment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void AddRoleAssignment(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("AddRoleAssignment", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrRoleAssignmentXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddRoleAssignmentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML) {
            this.AddRoleAssignmentAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrObjectId, bstrRoleAssignmentXML, null);
        }
        
        /// <remarks/>
        public void AddRoleAssignmentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrRoleAssignmentXML, object userState) {
            if ((this.AddRoleAssignmentOperationCompleted == null)) {
                this.AddRoleAssignmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRoleAssignmentOperationCompleted);
            }
            this.InvokeAsync("AddRoleAssignment", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrRoleAssignmentXML}, this.AddRoleAssignmentOperationCompleted, userState);
        }
        
        private void OnAddRoleAssignmentOperationCompleted(object arg) {
            if ((this.AddRoleAssignmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRoleAssignmentCompleted(this, new AddRoleAssignmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AddViolation", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void AddViolation(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrStatusInfoXML, out string pbstrAmountChargedXML) {
            object[] results = this.Invoke("AddViolation", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrObjectId,
                        lViolationId,
                        bstrCommentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrStatusInfoXML = ((string)(results[1]));
            pbstrAmountChargedXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void AddViolationAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML) {
            this.AddViolationAsync(lDelegateIdHigh, lDelegateIdLow, bstrObjectId, lViolationId, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void AddViolationAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrObjectId, int lViolationId, string bstrCommentInfoXML, object userState) {
            if ((this.AddViolationOperationCompleted == null)) {
                this.AddViolationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddViolationOperationCompleted);
            }
            this.InvokeAsync("AddViolation", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrObjectId,
                        lViolationId,
                        bstrCommentInfoXML}, this.AddViolationOperationCompleted, userState);
        }
        
        private void OnAddViolationOperationCompleted(object arg) {
            if ((this.AddViolationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddViolationCompleted(this, new AddViolationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustGotoBAMDate", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void AdjustGotoBAMDate(int lRequesterIdHigh, int lRequesterIdLow, int lOffset, string bstrObjectId, out string pbstrErrorXML) {
            object[] results = this.Invoke("AdjustGotoBAMDate", new object[] {
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        lOffset,
                        bstrObjectId});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustGotoBAMDateAsync(int lRequesterIdHigh, int lRequesterIdLow, int lOffset, string bstrObjectId) {
            this.AdjustGotoBAMDateAsync(lRequesterIdHigh, lRequesterIdLow, lOffset, bstrObjectId, null);
        }
        
        /// <remarks/>
        public void AdjustGotoBAMDateAsync(int lRequesterIdHigh, int lRequesterIdLow, int lOffset, string bstrObjectId, object userState) {
            if ((this.AdjustGotoBAMDateOperationCompleted == null)) {
                this.AdjustGotoBAMDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustGotoBAMDateOperationCompleted);
            }
            this.InvokeAsync("AdjustGotoBAMDate", new object[] {
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        lOffset,
                        bstrObjectId}, this.AdjustGotoBAMDateOperationCompleted, userState);
        }
        
        private void OnAdjustGotoBAMDateOperationCompleted(object arg) {
            if ((this.AdjustGotoBAMDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustGotoBAMDateCompleted(this, new AdjustGotoBAMDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustResourceBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void AdjustResourceBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML, out string pbstrError) {
            object[] results = this.Invoke("AdjustResourceBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrObjectId,
                        bstrResourceGUID,
                        lNumberOfUnits,
                        bstrUnitsOfMeasure,
                        bstrCommentInfoXML});
            pbstrError = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustResourceBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML) {
            this.AdjustResourceBalanceAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrObjectId, bstrResourceGUID, lNumberOfUnits, bstrUnitsOfMeasure, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void AdjustResourceBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrResourceGUID, int lNumberOfUnits, string bstrUnitsOfMeasure, string bstrCommentInfoXML, object userState) {
            if ((this.AdjustResourceBalanceOperationCompleted == null)) {
                this.AdjustResourceBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustResourceBalanceOperationCompleted);
            }
            this.InvokeAsync("AdjustResourceBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrObjectId,
                        bstrResourceGUID,
                        lNumberOfUnits,
                        bstrUnitsOfMeasure,
                        bstrCommentInfoXML}, this.AdjustResourceBalanceOperationCompleted, userState);
        }
        
        private void OnAdjustResourceBalanceOperationCompleted(object arg) {
            if ((this.AdjustResourceBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustResourceBalanceCompleted(this, new AdjustResourceBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.AdjustSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void AdjustSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, string bstrAdjustmentGUID, string bstrAmount, string bstrCommentTextXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("AdjustSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrSubscriptionId,
                        lBillingPeriodId,
                        bstrAdjustmentGUID,
                        bstrAmount,
                        bstrCommentTextXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AdjustSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, string bstrAdjustmentGUID, string bstrAmount, string bstrCommentTextXML) {
            this.AdjustSubscriptionAsync(lDelegateIdHigh, lDelegateIdLow, bstrSubscriptionId, lBillingPeriodId, bstrAdjustmentGUID, bstrAmount, bstrCommentTextXML, null);
        }
        
        /// <remarks/>
        public void AdjustSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, string bstrAdjustmentGUID, string bstrAmount, string bstrCommentTextXML, object userState) {
            if ((this.AdjustSubscriptionOperationCompleted == null)) {
                this.AdjustSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdjustSubscriptionOperationCompleted);
            }
            this.InvokeAsync("AdjustSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrSubscriptionId,
                        lBillingPeriodId,
                        bstrAdjustmentGUID,
                        bstrAmount,
                        bstrCommentTextXML}, this.AdjustSubscriptionOperationCompleted, userState);
        }
        
        private void OnAdjustSubscriptionOperationCompleted(object arg) {
            if ((this.AdjustSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdjustSubscriptionCompleted(this, new AdjustSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BanPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void BanPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("BanPaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lReasonCode,
                        bstrPaymentInstrumentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BanPaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML) {
            this.BanPaymentInstrumentAsync(lDelegateIdHigh, lDelegateIdLow, lReasonCode, bstrPaymentInstrumentInfoXML, null);
        }
        
        /// <remarks/>
        public void BanPaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrPaymentInstrumentInfoXML, object userState) {
            if ((this.BanPaymentInstrumentOperationCompleted == null)) {
                this.BanPaymentInstrumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBanPaymentInstrumentOperationCompleted);
            }
            this.InvokeAsync("BanPaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lReasonCode,
                        bstrPaymentInstrumentInfoXML}, this.BanPaymentInstrumentOperationCompleted, userState);
        }
        
        private void OnBanPaymentInstrumentOperationCompleted(object arg) {
            if ((this.BanPaymentInstrumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BanPaymentInstrumentCompleted(this, new BanPaymentInstrumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BanUser", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void BanUser(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("BanUser", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lReasonCode,
                        bstrAccountInfoXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BanUserAsync(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML) {
            this.BanUserAsync(lDelegateIdHigh, lDelegateIdLow, lReasonCode, bstrAccountInfoXML, null);
        }
        
        /// <remarks/>
        public void BanUserAsync(int lDelegateIdHigh, int lDelegateIdLow, int lReasonCode, string bstrAccountInfoXML, object userState) {
            if ((this.BanUserOperationCompleted == null)) {
                this.BanUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBanUserOperationCompleted);
            }
            this.InvokeAsync("BanUser", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lReasonCode,
                        bstrAccountInfoXML}, this.BanUserOperationCompleted, userState);
        }
        
        private void OnBanUserOperationCompleted(object arg) {
            if ((this.BanUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BanUserCompleted(this, new BanUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.BlacklistToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void BlacklistToken(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrToken, int lTokenType, string bstrEffectiveTime, string bstrSubscriptionAction, string bstrReason, string bstrDescription, out string pbstrErrorXML, out string pbstrBlacklistActionSetXML, out int plBlacklistActionSetCount) {
            object[] results = this.Invoke("BlacklistToken", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrToken,
                        lTokenType,
                        bstrEffectiveTime,
                        bstrSubscriptionAction,
                        bstrReason,
                        bstrDescription});
            pbstrErrorXML = ((string)(results[0]));
            pbstrBlacklistActionSetXML = ((string)(results[1]));
            plBlacklistActionSetCount = ((int)(results[2]));
        }
        
        /// <remarks/>
        public void BlacklistTokenAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrToken, int lTokenType, string bstrEffectiveTime, string bstrSubscriptionAction, string bstrReason, string bstrDescription) {
            this.BlacklistTokenAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrToken, lTokenType, bstrEffectiveTime, bstrSubscriptionAction, bstrReason, bstrDescription, null);
        }
        
        /// <remarks/>
        public void BlacklistTokenAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrToken, int lTokenType, string bstrEffectiveTime, string bstrSubscriptionAction, string bstrReason, string bstrDescription, object userState) {
            if ((this.BlacklistTokenOperationCompleted == null)) {
                this.BlacklistTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlacklistTokenOperationCompleted);
            }
            this.InvokeAsync("BlacklistToken", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrToken,
                        lTokenType,
                        bstrEffectiveTime,
                        bstrSubscriptionAction,
                        bstrReason,
                        bstrDescription}, this.BlacklistTokenOperationCompleted, userState);
        }
        
        private void OnBlacklistTokenOperationCompleted(object arg) {
            if ((this.BlacklistTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlacklistTokenCompleted(this, new BlacklistTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CalculateTax", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CalculateTax(string version, string callerInfoXml, string accountId, string taxCalculationInfoXml, string orderDetailXml, out string returnOrderDetailXml) {
            object[] results = this.Invoke("CalculateTax", new object[] {
                        version,
                        callerInfoXml,
                        accountId,
                        taxCalculationInfoXml,
                        orderDetailXml});
            returnOrderDetailXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateTaxAsync(string version, string callerInfoXml, string accountId, string taxCalculationInfoXml, string orderDetailXml) {
            this.CalculateTaxAsync(version, callerInfoXml, accountId, taxCalculationInfoXml, orderDetailXml, null);
        }
        
        /// <remarks/>
        public void CalculateTaxAsync(string version, string callerInfoXml, string accountId, string taxCalculationInfoXml, string orderDetailXml, object userState) {
            if ((this.CalculateTaxOperationCompleted == null)) {
                this.CalculateTaxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateTaxOperationCompleted);
            }
            this.InvokeAsync("CalculateTax", new object[] {
                        version,
                        callerInfoXml,
                        accountId,
                        taxCalculationInfoXml,
                        orderDetailXml}, this.CalculateTaxOperationCompleted, userState);
        }
        
        private void OnCalculateTaxOperationCompleted(object arg) {
            if ((this.CalculateTaxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateTaxCompleted(this, new CalculateTaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelConversion", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CancelConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
            object[] results = this.Invoke("CancelConversion", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId});
            pbstrErrorXML = ((string)(results[0]));
            plAddedServiceInstanceSetCount = ((int)(results[1]));
            pbstrAddedServiceInstanceSet = ((string)(results[2]));
            plRemovedServiceInstanceSetCount = ((int)(results[3]));
            pbstrRemoveServiceInstanceSet = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void CancelConversionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId) {
            this.CancelConversionAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, bstrSubscriptionId, null);
        }
        
        /// <remarks/>
        public void CancelConversionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, object userState) {
            if ((this.CancelConversionOperationCompleted == null)) {
                this.CancelConversionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelConversionOperationCompleted);
            }
            this.InvokeAsync("CancelConversion", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId}, this.CancelConversionOperationCompleted, userState);
        }
        
        private void OnCancelConversionOperationCompleted(object arg) {
            if ((this.CancelConversionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelConversionCompleted(this, new CancelConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelPayment", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CancelPayment(int delegateIdHigh, int delegateIdLow, int targetIdHigh, int targetIdLow, string trackingGuid, string confirmationId, string commentInfoXml) {
            this.Invoke("CancelPayment", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        targetIdHigh,
                        targetIdLow,
                        trackingGuid,
                        confirmationId,
                        commentInfoXml});
        }
        
        /// <remarks/>
        public void CancelPaymentAsync(int delegateIdHigh, int delegateIdLow, int targetIdHigh, int targetIdLow, string trackingGuid, string confirmationId, string commentInfoXml) {
            this.CancelPaymentAsync(delegateIdHigh, delegateIdLow, targetIdHigh, targetIdLow, trackingGuid, confirmationId, commentInfoXml, null);
        }
        
        /// <remarks/>
        public void CancelPaymentAsync(int delegateIdHigh, int delegateIdLow, int targetIdHigh, int targetIdLow, string trackingGuid, string confirmationId, string commentInfoXml, object userState) {
            if ((this.CancelPaymentOperationCompleted == null)) {
                this.CancelPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelPaymentOperationCompleted);
            }
            this.InvokeAsync("CancelPayment", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        targetIdHigh,
                        targetIdLow,
                        trackingGuid,
                        confirmationId,
                        commentInfoXml}, this.CancelPaymentOperationCompleted, userState);
        }
        
        private void OnCancelPaymentOperationCompleted(object arg) {
            if ((this.CancelPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelPaymentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelRenewal", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CancelRenewal(int delegatePUIDHigh, int delegatePUIDLow, int requesterPUIDHigh, int requesterPUIDLow, string trackingGUID, string subscriptionId) {
            this.Invoke("CancelRenewal", new object[] {
                        delegatePUIDHigh,
                        delegatePUIDLow,
                        requesterPUIDHigh,
                        requesterPUIDLow,
                        trackingGUID,
                        subscriptionId});
        }
        
        /// <remarks/>
        public void CancelRenewalAsync(int delegatePUIDHigh, int delegatePUIDLow, int requesterPUIDHigh, int requesterPUIDLow, string trackingGUID, string subscriptionId) {
            this.CancelRenewalAsync(delegatePUIDHigh, delegatePUIDLow, requesterPUIDHigh, requesterPUIDLow, trackingGUID, subscriptionId, null);
        }
        
        /// <remarks/>
        public void CancelRenewalAsync(int delegatePUIDHigh, int delegatePUIDLow, int requesterPUIDHigh, int requesterPUIDLow, string trackingGUID, string subscriptionId, object userState) {
            if ((this.CancelRenewalOperationCompleted == null)) {
                this.CancelRenewalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRenewalOperationCompleted);
            }
            this.InvokeAsync("CancelRenewal", new object[] {
                        delegatePUIDHigh,
                        delegatePUIDLow,
                        requesterPUIDHigh,
                        requesterPUIDLow,
                        trackingGUID,
                        subscriptionId}, this.CancelRenewalOperationCompleted, userState);
        }
        
        private void OnCancelRenewalOperationCompleted(object arg) {
            if ((this.CancelRenewalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRenewalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CancelSubscription(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrAmountChargedXML, out string pbstrSubscriptionStatusInfoXML, out int plRemovedServiceInstanceCount, out string pbstrRemovedServiceInstanceSetXML) {
            object[] results = this.Invoke("CancelSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionId,
                        bstrCancelDate,
                        bstrCommentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
            pbstrSubscriptionStatusInfoXML = ((string)(results[2]));
            plRemovedServiceInstanceCount = ((int)(results[3]));
            pbstrRemovedServiceInstanceSetXML = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void CancelSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML) {
            this.CancelSubscriptionAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, fComputeOnly, bstrSubscriptionId, bstrCancelDate, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void CancelSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, string bstrSubscriptionId, string bstrCancelDate, string bstrCommentInfoXML, object userState) {
            if ((this.CancelSubscriptionOperationCompleted == null)) {
                this.CancelSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelSubscriptionOperationCompleted);
            }
            this.InvokeAsync("CancelSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        bstrSubscriptionId,
                        bstrCancelDate,
                        bstrCommentInfoXML}, this.CancelSubscriptionOperationCompleted, userState);
        }
        
        private void OnCancelSubscriptionOperationCompleted(object arg) {
            if ((this.CancelSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelSubscriptionCompleted(this, new CancelSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelSubscriptionEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CancelSubscriptionEx(int delegatePUIDHigh, int delegatePUIDLow, int requesterPUIDHigh, int requesterPUIDLow, string trackingGUID, bool computeOnly, string subscriptionId, string cancelDate, string commentInfoXML, bool closeBalance, out string amountChargedXML, out string subscriptionStatusInfoXML, out int removedServiceInstanceCount, out string removedServiceInstanceSetXML) {
            object[] results = this.Invoke("CancelSubscriptionEx", new object[] {
                        delegatePUIDHigh,
                        delegatePUIDLow,
                        requesterPUIDHigh,
                        requesterPUIDLow,
                        trackingGUID,
                        computeOnly,
                        subscriptionId,
                        cancelDate,
                        commentInfoXML,
                        closeBalance});
            amountChargedXML = ((string)(results[0]));
            subscriptionStatusInfoXML = ((string)(results[1]));
            removedServiceInstanceCount = ((int)(results[2]));
            removedServiceInstanceSetXML = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void CancelSubscriptionExAsync(int delegatePUIDHigh, int delegatePUIDLow, int requesterPUIDHigh, int requesterPUIDLow, string trackingGUID, bool computeOnly, string subscriptionId, string cancelDate, string commentInfoXML, bool closeBalance) {
            this.CancelSubscriptionExAsync(delegatePUIDHigh, delegatePUIDLow, requesterPUIDHigh, requesterPUIDLow, trackingGUID, computeOnly, subscriptionId, cancelDate, commentInfoXML, closeBalance, null);
        }
        
        /// <remarks/>
        public void CancelSubscriptionExAsync(int delegatePUIDHigh, int delegatePUIDLow, int requesterPUIDHigh, int requesterPUIDLow, string trackingGUID, bool computeOnly, string subscriptionId, string cancelDate, string commentInfoXML, bool closeBalance, object userState) {
            if ((this.CancelSubscriptionExOperationCompleted == null)) {
                this.CancelSubscriptionExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelSubscriptionExOperationCompleted);
            }
            this.InvokeAsync("CancelSubscriptionEx", new object[] {
                        delegatePUIDHigh,
                        delegatePUIDLow,
                        requesterPUIDHigh,
                        requesterPUIDLow,
                        trackingGUID,
                        computeOnly,
                        subscriptionId,
                        cancelDate,
                        commentInfoXML,
                        closeBalance}, this.CancelSubscriptionExOperationCompleted, userState);
        }
        
        private void OnCancelSubscriptionExOperationCompleted(object arg) {
            if ((this.CancelSubscriptionExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelSubscriptionExCompleted(this, new CancelSubscriptionExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CancelTransaction", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CancelTransaction(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string transactionId) {
            this.Invoke("CancelTransaction", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        trackingGuid,
                        transactionId});
        }
        
        /// <remarks/>
        public void CancelTransactionAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string transactionId) {
            this.CancelTransactionAsync(delegateIdHigh, delegateIdLow, requesterIdHigh, requesterIdLow, trackingGuid, transactionId, null);
        }
        
        /// <remarks/>
        public void CancelTransactionAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string transactionId, object userState) {
            if ((this.CancelTransactionOperationCompleted == null)) {
                this.CancelTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelTransactionOperationCompleted);
            }
            this.InvokeAsync("CancelTransaction", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        trackingGuid,
                        transactionId}, this.CancelTransactionOperationCompleted, userState);
        }
        
        private void OnCancelTransactionOperationCompleted(object arg) {
            if ((this.CancelTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelTransactionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ChargePaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ChargePaymentInstrument(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string paymentInstrumentId, string chargeInfoXml, out string paymentInstrumentResultsXml) {
            object[] results = this.Invoke("ChargePaymentInstrument", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        trackingGuid,
                        paymentInstrumentId,
                        chargeInfoXml});
            paymentInstrumentResultsXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChargePaymentInstrumentAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string paymentInstrumentId, string chargeInfoXml) {
            this.ChargePaymentInstrumentAsync(delegateIdHigh, delegateIdLow, requesterIdHigh, requesterIdLow, trackingGuid, paymentInstrumentId, chargeInfoXml, null);
        }
        
        /// <remarks/>
        public void ChargePaymentInstrumentAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string trackingGuid, string paymentInstrumentId, string chargeInfoXml, object userState) {
            if ((this.ChargePaymentInstrumentOperationCompleted == null)) {
                this.ChargePaymentInstrumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChargePaymentInstrumentOperationCompleted);
            }
            this.InvokeAsync("ChargePaymentInstrument", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        trackingGuid,
                        paymentInstrumentId,
                        chargeInfoXml}, this.ChargePaymentInstrumentOperationCompleted, userState);
        }
        
        private void OnChargePaymentInstrumentOperationCompleted(object arg) {
            if ((this.ChargePaymentInstrumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChargePaymentInstrumentCompleted(this, new ChargePaymentInstrumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CheckCDAvailability", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CheckCDAvailability(string accountIDBlob, string subscriptionRefIDBlob, out string partnerName) {
            object[] results = this.Invoke("CheckCDAvailability", new object[] {
                        accountIDBlob,
                        subscriptionRefIDBlob});
            partnerName = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckCDAvailabilityAsync(string accountIDBlob, string subscriptionRefIDBlob) {
            this.CheckCDAvailabilityAsync(accountIDBlob, subscriptionRefIDBlob, null);
        }
        
        /// <remarks/>
        public void CheckCDAvailabilityAsync(string accountIDBlob, string subscriptionRefIDBlob, object userState) {
            if ((this.CheckCDAvailabilityOperationCompleted == null)) {
                this.CheckCDAvailabilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCDAvailabilityOperationCompleted);
            }
            this.InvokeAsync("CheckCDAvailability", new object[] {
                        accountIDBlob,
                        subscriptionRefIDBlob}, this.CheckCDAvailabilityOperationCompleted, userState);
        }
        
        private void OnCheckCDAvailabilityOperationCompleted(object arg) {
            if ((this.CheckCDAvailabilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCDAvailabilityCompleted(this, new CheckCDAvailabilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CheckProvisioningStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CheckProvisioningStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, out string pbstrErrorXML, out string pbstrResponseXML) {
            object[] results = this.Invoke("CheckProvisioningStatus", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrServiceComponentId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrResponseXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void CheckProvisioningStatusAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId) {
            this.CheckProvisioningStatusAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrServiceComponentId, null);
        }
        
        /// <remarks/>
        public void CheckProvisioningStatusAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceComponentId, object userState) {
            if ((this.CheckProvisioningStatusOperationCompleted == null)) {
                this.CheckProvisioningStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProvisioningStatusOperationCompleted);
            }
            this.InvokeAsync("CheckProvisioningStatus", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrServiceComponentId}, this.CheckProvisioningStatusOperationCompleted, userState);
        }
        
        private void OnCheckProvisioningStatusOperationCompleted(object arg) {
            if ((this.CheckProvisioningStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProvisioningStatusCompleted(this, new CheckProvisioningStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CloseAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CloseAccount(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("CloseAccount", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountId,
                        bstrCommentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CloseAccountAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML) {
            this.CloseAccountAsync(lDelegateIdHigh, lDelegateIdLow, bstrAccountId, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void CloseAccountAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, string bstrCommentInfoXML, object userState) {
            if ((this.CloseAccountOperationCompleted == null)) {
                this.CloseAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseAccountOperationCompleted);
            }
            this.InvokeAsync("CloseAccount", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountId,
                        bstrCommentInfoXML}, this.CloseAccountOperationCompleted, userState);
        }
        
        private void OnCloseAccountOperationCompleted(object arg) {
            if ((this.CloseAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseAccountCompleted(this, new CloseAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CloseBalance", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CloseBalance(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId, out string pbstrErrorXML, out string pbstrAmountChargedXML) {
            object[] results = this.Invoke("CloseBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrObjectId,
                        bstrLineItemId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void CloseBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId) {
            this.CloseBalanceAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrObjectId, bstrLineItemId, null);
        }
        
        /// <remarks/>
        public void CloseBalanceAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrObjectId, string bstrLineItemId, object userState) {
            if ((this.CloseBalanceOperationCompleted == null)) {
                this.CloseBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseBalanceOperationCompleted);
            }
            this.InvokeAsync("CloseBalance", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrObjectId,
                        bstrLineItemId}, this.CloseBalanceOperationCompleted, userState);
        }
        
        private void OnCloseBalanceOperationCompleted(object arg) {
            if ((this.CloseBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseBalanceCompleted(this, new CloseBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CompleteConversion", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CompleteConversion(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, out string pbstrErrorXML, out string pbstrAmountChargedXML, out int plAddedServiceInstanceSetCount, out string pbstrAddedServiceInstanceSet, out int plRemovedServiceInstanceSetCount, out string pbstrRemoveServiceInstanceSet) {
            object[] results = this.Invoke("CompleteConversion", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
            plAddedServiceInstanceSetCount = ((int)(results[2]));
            pbstrAddedServiceInstanceSet = ((string)(results[3]));
            plRemovedServiceInstanceSetCount = ((int)(results[4]));
            pbstrRemoveServiceInstanceSet = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void CompleteConversionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId) {
            this.CompleteConversionAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, bstrSubscriptionId, null);
        }
        
        /// <remarks/>
        public void CompleteConversionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, string bstrSubscriptionId, object userState) {
            if ((this.CompleteConversionOperationCompleted == null)) {
                this.CompleteConversionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteConversionOperationCompleted);
            }
            this.InvokeAsync("CompleteConversion", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId}, this.CompleteConversionOperationCompleted, userState);
        }
        
        private void OnCompleteConversionOperationCompleted(object arg) {
            if ((this.CompleteConversionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteConversionCompleted(this, new CompleteConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConsumeToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ConsumeToken(int delegateIdHigh, int delegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string trackingGuid, bool computeOnly, string tokenID, out string consumedTokenDetailsXML) {
            object[] results = this.Invoke("ConsumeToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        trackingGuid,
                        computeOnly,
                        tokenID});
            consumedTokenDetailsXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConsumeTokenAsync(int delegateIdHigh, int delegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string trackingGuid, bool computeOnly, string tokenID) {
            this.ConsumeTokenAsync(delegateIdHigh, delegateIdLow, lRequesterIdHigh, lRequesterIdLow, trackingGuid, computeOnly, tokenID, null);
        }
        
        /// <remarks/>
        public void ConsumeTokenAsync(int delegateIdHigh, int delegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string trackingGuid, bool computeOnly, string tokenID, object userState) {
            if ((this.ConsumeTokenOperationCompleted == null)) {
                this.ConsumeTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsumeTokenOperationCompleted);
            }
            this.InvokeAsync("ConsumeToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        trackingGuid,
                        computeOnly,
                        tokenID}, this.ConsumeTokenOperationCompleted, userState);
        }
        
        private void OnConsumeTokenOperationCompleted(object arg) {
            if ((this.ConsumeTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsumeTokenCompleted(this, new ConsumeTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConvertSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ConvertSubscription(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    out string pbstrErrorXML, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceSetCount, 
                    out string pbstrAddedServiceInstanceSet, 
                    out int plRemovedServiceInstanceSetCount, 
                    out string pbstrRemoveServiceInstanceSet) {
            object[] results = this.Invoke("ConvertSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        lConvertMode,
                        lOverrideFlags,
                        bstrSubscriptionName,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
            plAddedServiceInstanceSetCount = ((int)(results[2]));
            pbstrAddedServiceInstanceSet = ((string)(results[3]));
            plRemovedServiceInstanceSetCount = ((int)(results[4]));
            pbstrRemoveServiceInstanceSet = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void ConvertSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, int lConvertMode, int lOverrideFlags, string bstrSubscriptionName, string bstrSubscriptionId, string bstrOfferingGUID, int lOverrideAmount, string bstrSubscriptionEndDate, string bstrReferralSetXML) {
            this.ConvertSubscriptionAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, fComputeOnly, lConvertMode, lOverrideFlags, bstrSubscriptionName, bstrSubscriptionId, bstrOfferingGUID, lOverrideAmount, bstrSubscriptionEndDate, bstrReferralSetXML, null);
        }
        
        /// <remarks/>
        public void ConvertSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrTrackingGUID, bool fComputeOnly, int lConvertMode, int lOverrideFlags, string bstrSubscriptionName, string bstrSubscriptionId, string bstrOfferingGUID, int lOverrideAmount, string bstrSubscriptionEndDate, string bstrReferralSetXML, object userState) {
            if ((this.ConvertSubscriptionOperationCompleted == null)) {
                this.ConvertSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertSubscriptionOperationCompleted);
            }
            this.InvokeAsync("ConvertSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        lConvertMode,
                        lOverrideFlags,
                        bstrSubscriptionName,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML}, this.ConvertSubscriptionOperationCompleted, userState);
        }
        
        private void OnConvertSubscriptionOperationCompleted(object arg) {
            if ((this.ConvertSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertSubscriptionCompleted(this, new ConvertSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConvertSubscriptionEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ConvertSubscriptionEx(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    out string pbstrErrorXML, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceSetCount, 
                    out string pbstrAddedServiceInstanceSet, 
                    out int plRemovedServiceInstanceSetCount, 
                    out string pbstrRemoveServiceInstanceSet) {
            object[] results = this.Invoke("ConvertSubscriptionEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        lConvertMode,
                        lOverrideFlags,
                        bstrSubscriptionName,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrPaymentInstrumentId,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
            plAddedServiceInstanceSetCount = ((int)(results[2]));
            pbstrAddedServiceInstanceSet = ((string)(results[3]));
            plRemovedServiceInstanceSetCount = ((int)(results[4]));
            pbstrRemoveServiceInstanceSet = ((string)(results[5]));
        }
        
        /// <remarks/>
        public void ConvertSubscriptionExAsync(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime) {
            this.ConvertSubscriptionExAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, fComputeOnly, lConvertMode, lOverrideFlags, bstrSubscriptionName, bstrSubscriptionId, bstrOfferingGUID, lOverrideAmount, bstrSubscriptionEndDate, bstrReferralSetXML, bstrPaymentInstrumentId, bstrTokenId, bstrPolicyGUID, lPolicyVersion, bstrSignatureDateTime, null);
        }
        
        /// <remarks/>
        public void ConvertSubscriptionExAsync(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    object userState) {
            if ((this.ConvertSubscriptionExOperationCompleted == null)) {
                this.ConvertSubscriptionExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertSubscriptionExOperationCompleted);
            }
            this.InvokeAsync("ConvertSubscriptionEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        lConvertMode,
                        lOverrideFlags,
                        bstrSubscriptionName,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrPaymentInstrumentId,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime}, this.ConvertSubscriptionExOperationCompleted, userState);
        }
        
        private void OnConvertSubscriptionExOperationCompleted(object arg) {
            if ((this.ConvertSubscriptionExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertSubscriptionExCompleted(this, new ConvertSubscriptionExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConvertSubscriptionEx2", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ConvertSubscriptionEx2(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    out string pbstrErrorXML, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceSetCount, 
                    out string pbstrAddedServiceInstanceSet, 
                    out int plRemovedServiceInstanceSetCount, 
                    out string pbstrRemoveServiceInstanceSet, 
                    out string pbstrRedirectOutputInfoXML) {
            object[] results = this.Invoke("ConvertSubscriptionEx2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        lConvertMode,
                        lOverrideFlags,
                        bstrSubscriptionName,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrPaymentInstrumentId,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime,
                        bstrRedirectInputInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
            plAddedServiceInstanceSetCount = ((int)(results[2]));
            pbstrAddedServiceInstanceSet = ((string)(results[3]));
            plRemovedServiceInstanceSetCount = ((int)(results[4]));
            pbstrRemoveServiceInstanceSet = ((string)(results[5]));
            pbstrRedirectOutputInfoXML = ((string)(results[6]));
        }
        
        /// <remarks/>
        public void ConvertSubscriptionEx2Async(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML) {
            this.ConvertSubscriptionEx2Async(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, fComputeOnly, lConvertMode, lOverrideFlags, bstrSubscriptionName, bstrSubscriptionId, bstrOfferingGUID, lOverrideAmount, bstrSubscriptionEndDate, bstrReferralSetXML, bstrPaymentInstrumentId, bstrTokenId, bstrPolicyGUID, lPolicyVersion, bstrSignatureDateTime, bstrRedirectInputInfoXML, null);
        }
        
        /// <remarks/>
        public void ConvertSubscriptionEx2Async(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    object userState) {
            if ((this.ConvertSubscriptionEx2OperationCompleted == null)) {
                this.ConvertSubscriptionEx2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertSubscriptionEx2OperationCompleted);
            }
            this.InvokeAsync("ConvertSubscriptionEx2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        lConvertMode,
                        lOverrideFlags,
                        bstrSubscriptionName,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrPaymentInstrumentId,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime,
                        bstrRedirectInputInfoXML}, this.ConvertSubscriptionEx2OperationCompleted, userState);
        }
        
        private void OnConvertSubscriptionEx2OperationCompleted(object arg) {
            if ((this.ConvertSubscriptionEx2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertSubscriptionEx2Completed(this, new ConvertSubscriptionEx2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ConvertSubscriptionEx3", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ConvertSubscriptionEx3(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    string bstrDiscountGuid, 
                    string bstrExtraInfoXML, 
                    out string pbstrErrorXML, 
                    out string pbstrAmountChargedXML, 
                    out int plAddedServiceInstanceSetCount, 
                    out string pbstrAddedServiceInstanceSet, 
                    out int plRemovedServiceInstanceSetCount, 
                    out string pbstrRemoveServiceInstanceSet, 
                    out string pbstrRedirectOutputInfoXML) {
            object[] results = this.Invoke("ConvertSubscriptionEx3", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        lConvertMode,
                        lOverrideFlags,
                        bstrSubscriptionName,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrPaymentInstrumentId,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime,
                        bstrRedirectInputInfoXML,
                        bstrDiscountGuid,
                        bstrExtraInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAmountChargedXML = ((string)(results[1]));
            plAddedServiceInstanceSetCount = ((int)(results[2]));
            pbstrAddedServiceInstanceSet = ((string)(results[3]));
            plRemovedServiceInstanceSetCount = ((int)(results[4]));
            pbstrRemoveServiceInstanceSet = ((string)(results[5]));
            pbstrRedirectOutputInfoXML = ((string)(results[6]));
        }
        
        /// <remarks/>
        public void ConvertSubscriptionEx3Async(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    string bstrDiscountGuid, 
                    string bstrExtraInfoXML) {
            this.ConvertSubscriptionEx3Async(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrTrackingGUID, fComputeOnly, lConvertMode, lOverrideFlags, bstrSubscriptionName, bstrSubscriptionId, bstrOfferingGUID, lOverrideAmount, bstrSubscriptionEndDate, bstrReferralSetXML, bstrPaymentInstrumentId, bstrTokenId, bstrPolicyGUID, lPolicyVersion, bstrSignatureDateTime, bstrRedirectInputInfoXML, bstrDiscountGuid, bstrExtraInfoXML, null);
        }
        
        /// <remarks/>
        public void ConvertSubscriptionEx3Async(
                    int lDelegateIdHigh, 
                    int lDelegateIdLow, 
                    int lRequesterIdHigh, 
                    int lRequesterIdLow, 
                    string bstrTrackingGUID, 
                    bool fComputeOnly, 
                    int lConvertMode, 
                    int lOverrideFlags, 
                    string bstrSubscriptionName, 
                    string bstrSubscriptionId, 
                    string bstrOfferingGUID, 
                    int lOverrideAmount, 
                    string bstrSubscriptionEndDate, 
                    string bstrReferralSetXML, 
                    string bstrPaymentInstrumentId, 
                    string bstrTokenId, 
                    string bstrPolicyGUID, 
                    int lPolicyVersion, 
                    string bstrSignatureDateTime, 
                    string bstrRedirectInputInfoXML, 
                    string bstrDiscountGuid, 
                    string bstrExtraInfoXML, 
                    object userState) {
            if ((this.ConvertSubscriptionEx3OperationCompleted == null)) {
                this.ConvertSubscriptionEx3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertSubscriptionEx3OperationCompleted);
            }
            this.InvokeAsync("ConvertSubscriptionEx3", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrTrackingGUID,
                        fComputeOnly,
                        lConvertMode,
                        lOverrideFlags,
                        bstrSubscriptionName,
                        bstrSubscriptionId,
                        bstrOfferingGUID,
                        lOverrideAmount,
                        bstrSubscriptionEndDate,
                        bstrReferralSetXML,
                        bstrPaymentInstrumentId,
                        bstrTokenId,
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrSignatureDateTime,
                        bstrRedirectInputInfoXML,
                        bstrDiscountGuid,
                        bstrExtraInfoXML}, this.ConvertSubscriptionEx3OperationCompleted, userState);
        }
        
        private void OnConvertSubscriptionEx3OperationCompleted(object arg) {
            if ((this.ConvertSubscriptionEx3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertSubscriptionEx3Completed(this, new ConvertSubscriptionEx3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("BdkSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreateAccount", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CreateAccount(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML, out string pbstrErrorXML, out string pbstrAccountId, out string pbstrPaymentInstrumentId, out string pbstrDate, out string bstrRequiredPaperWorkURL) {
            object[] results = this.Invoke("CreateAccount", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrPPMemberName,
                        bstrTrackingGUID,
                        bstrAccountInfoXML,
                        bstrPaymentInstrumentXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAccountId = ((string)(results[1]));
            pbstrPaymentInstrumentId = ((string)(results[2]));
            pbstrDate = ((string)(results[3]));
            bstrRequiredPaperWorkURL = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void CreateAccountAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML) {
            this.CreateAccountAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrPPMemberName, bstrTrackingGUID, bstrAccountInfoXML, bstrPaymentInstrumentXML, null);
        }
        
        /// <remarks/>
        public void CreateAccountAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPPMemberName, string bstrTrackingGUID, string bstrAccountInfoXML, string bstrPaymentInstrumentXML, object userState) {
            if ((this.CreateAccountOperationCompleted == null)) {
                this.CreateAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAccountOperationCompleted);
            }
            this.InvokeAsync("CreateAccount", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrPPMemberName,
                        bstrTrackingGUID,
                        bstrAccountInfoXML,
                        bstrPaymentInstrumentXML}, this.CreateAccountOperationCompleted, userState);
        }
        
        private void OnCreateAccountOperationCompleted(object arg) {
            if ((this.CreateAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAccountCompleted(this, new CreateAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreditPaymentInstrument", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CreditPaymentInstrument(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError) {
            object[] results = this.Invoke("CreditPaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        lFinancialReportingCode,
                        bstrAmount,
                        fImmediatelySettle,
                        bstrCommentInfoXML});
            pbstrError = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreditPaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML) {
            this.CreditPaymentInstrumentAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrPaymentInstrumentId, lFinancialReportingCode, bstrAmount, fImmediatelySettle, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void CreditPaymentInstrumentAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, object userState) {
            if ((this.CreditPaymentInstrumentOperationCompleted == null)) {
                this.CreditPaymentInstrumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditPaymentInstrumentOperationCompleted);
            }
            this.InvokeAsync("CreditPaymentInstrument", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        lFinancialReportingCode,
                        bstrAmount,
                        fImmediatelySettle,
                        bstrCommentInfoXML}, this.CreditPaymentInstrumentOperationCompleted, userState);
        }
        
        private void OnCreditPaymentInstrumentOperationCompleted(object arg) {
            if ((this.CreditPaymentInstrumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditPaymentInstrumentCompleted(this, new CreditPaymentInstrumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreditPaymentInstrumentEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CreditPaymentInstrumentEx(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSubscriptionId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError) {
            object[] results = this.Invoke("CreditPaymentInstrumentEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        bstrSubscriptionId,
                        lFinancialReportingCode,
                        bstrAmount,
                        fImmediatelySettle,
                        bstrCommentInfoXML});
            pbstrError = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreditPaymentInstrumentExAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSubscriptionId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML) {
            this.CreditPaymentInstrumentExAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrPaymentInstrumentId, bstrSubscriptionId, lFinancialReportingCode, bstrAmount, fImmediatelySettle, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void CreditPaymentInstrumentExAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSubscriptionId, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, object userState) {
            if ((this.CreditPaymentInstrumentExOperationCompleted == null)) {
                this.CreditPaymentInstrumentExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditPaymentInstrumentExOperationCompleted);
            }
            this.InvokeAsync("CreditPaymentInstrumentEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        bstrSubscriptionId,
                        lFinancialReportingCode,
                        bstrAmount,
                        fImmediatelySettle,
                        bstrCommentInfoXML}, this.CreditPaymentInstrumentExOperationCompleted, userState);
        }
        
        private void OnCreditPaymentInstrumentExOperationCompleted(object arg) {
            if ((this.CreditPaymentInstrumentExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditPaymentInstrumentExCompleted(this, new CreditPaymentInstrumentExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreditPaymentInstrumentEx2", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CreditPaymentInstrumentEx2(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSkuReferenceXML, string bstrPropertyXML, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, out string pbstrError) {
            object[] results = this.Invoke("CreditPaymentInstrumentEx2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        bstrSkuReferenceXML,
                        bstrPropertyXML,
                        lFinancialReportingCode,
                        bstrAmount,
                        fImmediatelySettle,
                        bstrCommentInfoXML});
            pbstrError = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreditPaymentInstrumentEx2Async(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSkuReferenceXML, string bstrPropertyXML, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML) {
            this.CreditPaymentInstrumentEx2Async(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrPaymentInstrumentId, bstrSkuReferenceXML, bstrPropertyXML, lFinancialReportingCode, bstrAmount, fImmediatelySettle, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void CreditPaymentInstrumentEx2Async(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSkuReferenceXML, string bstrPropertyXML, int lFinancialReportingCode, string bstrAmount, bool fImmediatelySettle, string bstrCommentInfoXML, object userState) {
            if ((this.CreditPaymentInstrumentEx2OperationCompleted == null)) {
                this.CreditPaymentInstrumentEx2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditPaymentInstrumentEx2OperationCompleted);
            }
            this.InvokeAsync("CreditPaymentInstrumentEx2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        bstrSkuReferenceXML,
                        bstrPropertyXML,
                        lFinancialReportingCode,
                        bstrAmount,
                        fImmediatelySettle,
                        bstrCommentInfoXML}, this.CreditPaymentInstrumentEx2OperationCompleted, userState);
        }
        
        private void OnCreditPaymentInstrumentEx2OperationCompleted(object arg) {
            if ((this.CreditPaymentInstrumentEx2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditPaymentInstrumentEx2Completed(this, new CreditPaymentInstrumentEx2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.CreditPaymentInstrumentEx3", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void CreditPaymentInstrumentEx3(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSkuReferenceXML, string bstrPropertyXML, int lFinancialReportingCode, string bstrAmount, string currency, bool fImmediatelySettle, string bstrCommentInfoXML, string bstrStoredValueLotExpirationDate, string bstrStoredValueLotType, string bstrStoredValueSku, out string pbstrError) {
            object[] results = this.Invoke("CreditPaymentInstrumentEx3", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        bstrSkuReferenceXML,
                        bstrPropertyXML,
                        lFinancialReportingCode,
                        bstrAmount,
                        currency,
                        fImmediatelySettle,
                        bstrCommentInfoXML,
                        bstrStoredValueLotExpirationDate,
                        bstrStoredValueLotType,
                        bstrStoredValueSku});
            pbstrError = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreditPaymentInstrumentEx3Async(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSkuReferenceXML, string bstrPropertyXML, int lFinancialReportingCode, string bstrAmount, string currency, bool fImmediatelySettle, string bstrCommentInfoXML, string bstrStoredValueLotExpirationDate, string bstrStoredValueLotType, string bstrStoredValueSku) {
            this.CreditPaymentInstrumentEx3Async(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrPaymentInstrumentId, bstrSkuReferenceXML, bstrPropertyXML, lFinancialReportingCode, bstrAmount, currency, fImmediatelySettle, bstrCommentInfoXML, bstrStoredValueLotExpirationDate, bstrStoredValueLotType, bstrStoredValueSku, null);
        }
        
        /// <remarks/>
        public void CreditPaymentInstrumentEx3Async(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrPaymentInstrumentId, string bstrSkuReferenceXML, string bstrPropertyXML, int lFinancialReportingCode, string bstrAmount, string currency, bool fImmediatelySettle, string bstrCommentInfoXML, string bstrStoredValueLotExpirationDate, string bstrStoredValueLotType, string bstrStoredValueSku, object userState) {
            if ((this.CreditPaymentInstrumentEx3OperationCompleted == null)) {
                this.CreditPaymentInstrumentEx3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditPaymentInstrumentEx3OperationCompleted);
            }
            this.InvokeAsync("CreditPaymentInstrumentEx3", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrPaymentInstrumentId,
                        bstrSkuReferenceXML,
                        bstrPropertyXML,
                        lFinancialReportingCode,
                        bstrAmount,
                        currency,
                        fImmediatelySettle,
                        bstrCommentInfoXML,
                        bstrStoredValueLotExpirationDate,
                        bstrStoredValueLotType,
                        bstrStoredValueSku}, this.CreditPaymentInstrumentEx3OperationCompleted, userState);
        }
        
        private void OnCreditPaymentInstrumentEx3OperationCompleted(object arg) {
            if ((this.CreditPaymentInstrumentEx3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditPaymentInstrumentEx3Completed(this, new CreditPaymentInstrumentEx3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.SetUserProfile", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void SetUserProfile(string version, string callerInfoXml, string userProfileXml) {
            this.Invoke("SetUserProfile", new object[] {
                        version,
                        callerInfoXml,
                        userProfileXml});
        }
        
        /// <remarks/>
        public void SetUserProfileAsync(string version, string callerInfoXml, string userProfileXml) {
            this.SetUserProfileAsync(version, callerInfoXml, userProfileXml, null);
        }
        
        /// <remarks/>
        public void SetUserProfileAsync(string version, string callerInfoXml, string userProfileXml, object userState) {
            if ((this.SetUserProfileOperationCompleted == null)) {
                this.SetUserProfileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserProfileOperationCompleted);
            }
            this.InvokeAsync("SetUserProfile", new object[] {
                        version,
                        callerInfoXml,
                        userProfileXml}, this.SetUserProfileOperationCompleted, userState);
        }
        
        private void OnSetUserProfileOperationCompleted(object arg) {
            if ((this.SetUserProfileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserProfileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeactivateToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void DeactivateToken(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus) {
            this.Invoke("DeactivateToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        committedStatus});
        }
        
        /// <remarks/>
        public void DeactivateTokenAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus) {
            this.DeactivateTokenAsync(delegateIdHigh, delegateIdLow, trackingGuid, token, tokenType, externalReferenceId, timeStamp, committedStatus, null);
        }
        
        /// <remarks/>
        public void DeactivateTokenAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, object userState) {
            if ((this.DeactivateTokenOperationCompleted == null)) {
                this.DeactivateTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateTokenOperationCompleted);
            }
            this.InvokeAsync("DeactivateToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        committedStatus}, this.DeactivateTokenOperationCompleted, userState);
        }
        
        private void OnDeactivateTokenOperationCompleted(object arg) {
            if ((this.DeactivateTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateTokenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeactivateTokenEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void DeactivateTokenEx(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, string tokenInfoXML) {
            this.Invoke("DeactivateTokenEx", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        committedStatus,
                        tokenInfoXML});
        }
        
        /// <remarks/>
        public void DeactivateTokenExAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, string tokenInfoXML) {
            this.DeactivateTokenExAsync(delegateIdHigh, delegateIdLow, trackingGuid, token, tokenType, externalReferenceId, timeStamp, committedStatus, tokenInfoXML, null);
        }
        
        /// <remarks/>
        public void DeactivateTokenExAsync(int delegateIdHigh, int delegateIdLow, string trackingGuid, string token, int tokenType, string externalReferenceId, string timeStamp, int committedStatus, string tokenInfoXML, object userState) {
            if ((this.DeactivateTokenExOperationCompleted == null)) {
                this.DeactivateTokenExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateTokenExOperationCompleted);
            }
            this.InvokeAsync("DeactivateTokenEx", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        trackingGuid,
                        token,
                        tokenType,
                        externalReferenceId,
                        timeStamp,
                        committedStatus,
                        tokenInfoXML}, this.DeactivateTokenExOperationCompleted, userState);
        }
        
        private void OnDeactivateTokenExOperationCompleted(object arg) {
            if ((this.DeactivateTokenExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateTokenExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeliverToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void DeliverToken(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrFilterInfoXML, string bstrSessionKey, out string pbstrErrorXML, out string pbstrEncryptedTokenSetXML) {
            object[] results = this.Invoke("DeliverToken", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrFilterInfoXML,
                        bstrSessionKey});
            pbstrErrorXML = ((string)(results[0]));
            pbstrEncryptedTokenSetXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void DeliverTokenAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrFilterInfoXML, string bstrSessionKey) {
            this.DeliverTokenAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrFilterInfoXML, bstrSessionKey, null);
        }
        
        /// <remarks/>
        public void DeliverTokenAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrFilterInfoXML, string bstrSessionKey, object userState) {
            if ((this.DeliverTokenOperationCompleted == null)) {
                this.DeliverTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeliverTokenOperationCompleted);
            }
            this.InvokeAsync("DeliverToken", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrFilterInfoXML,
                        bstrSessionKey}, this.DeliverTokenOperationCompleted, userState);
        }
        
        private void OnDeliverTokenOperationCompleted(object arg) {
            if ((this.DeliverTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeliverTokenCompleted(this, new DeliverTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.DeprovisionServices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void DeprovisionServices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("DeprovisionServices", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrServiceInstanceSetXML});
            pbstrErrorXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeprovisionServicesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML) {
            this.DeprovisionServicesAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrServiceInstanceSetXML, null);
        }
        
        /// <remarks/>
        public void DeprovisionServicesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrServiceInstanceSetXML, object userState) {
            if ((this.DeprovisionServicesOperationCompleted == null)) {
                this.DeprovisionServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeprovisionServicesOperationCompleted);
            }
            this.InvokeAsync("DeprovisionServices", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrServiceInstanceSetXML}, this.DeprovisionServicesOperationCompleted, userState);
        }
        
        private void OnDeprovisionServicesOperationCompleted(object arg) {
            if ((this.DeprovisionServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeprovisionServicesCompleted(this, new DeprovisionServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.ExtendSubscription", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void ExtendSubscription(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrSubscriptionId, int lNumberOfDays, string bstrCommentInfoXML, out string pbstrErrorXML, out string pbstrNewExpirationDate) {
            object[] results = this.Invoke("ExtendSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId,
                        lNumberOfDays,
                        bstrCommentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pbstrNewExpirationDate = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void ExtendSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrSubscriptionId, int lNumberOfDays, string bstrCommentInfoXML) {
            this.ExtendSubscriptionAsync(lDelegateIdHigh, lDelegateIdLow, bstrTrackingGUID, bstrSubscriptionId, lNumberOfDays, bstrCommentInfoXML, null);
        }
        
        /// <remarks/>
        public void ExtendSubscriptionAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrTrackingGUID, string bstrSubscriptionId, int lNumberOfDays, string bstrCommentInfoXML, object userState) {
            if ((this.ExtendSubscriptionOperationCompleted == null)) {
                this.ExtendSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExtendSubscriptionOperationCompleted);
            }
            this.InvokeAsync("ExtendSubscription", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrTrackingGUID,
                        bstrSubscriptionId,
                        lNumberOfDays,
                        bstrCommentInfoXML}, this.ExtendSubscriptionOperationCompleted, userState);
        }
        
        private void OnExtendSubscriptionOperationCompleted(object arg) {
            if ((this.ExtendSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExtendSubscriptionCompleted(this, new ExtendSubscriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.FixExistingAddress", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void FixExistingAddress(long acctId, short subRefID, short addId, string mappingCombination, int maxReturnRange, double confidenceScoreThreshold, bool readOnlyMode, out bool result, out double confidenceScore, out int tryNumber) {
            object[] results = this.Invoke("FixExistingAddress", new object[] {
                        acctId,
                        subRefID,
                        addId,
                        mappingCombination,
                        maxReturnRange,
                        confidenceScoreThreshold,
                        readOnlyMode});
            result = ((bool)(results[0]));
            confidenceScore = ((double)(results[1]));
            tryNumber = ((int)(results[2]));
        }
        
        /// <remarks/>
        public void FixExistingAddressAsync(long acctId, short subRefID, short addId, string mappingCombination, int maxReturnRange, double confidenceScoreThreshold, bool readOnlyMode) {
            this.FixExistingAddressAsync(acctId, subRefID, addId, mappingCombination, maxReturnRange, confidenceScoreThreshold, readOnlyMode, null);
        }
        
        /// <remarks/>
        public void FixExistingAddressAsync(long acctId, short subRefID, short addId, string mappingCombination, int maxReturnRange, double confidenceScoreThreshold, bool readOnlyMode, object userState) {
            if ((this.FixExistingAddressOperationCompleted == null)) {
                this.FixExistingAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFixExistingAddressOperationCompleted);
            }
            this.InvokeAsync("FixExistingAddress", new object[] {
                        acctId,
                        subRefID,
                        addId,
                        mappingCombination,
                        maxReturnRange,
                        confidenceScoreThreshold,
                        readOnlyMode}, this.FixExistingAddressOperationCompleted, userState);
        }
        
        private void OnFixExistingAddressOperationCompleted(object arg) {
            if ((this.FixExistingAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FixExistingAddressCompleted(this, new FixExistingAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromAdminPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetAccountIdFromAdminPUID(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
            object[] results = this.Invoke("GetAccountIdFromAdminPUID", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lSearchPUIDHigh,
                        lSearchPUIDLow,
                        fFullData,
                        lMax});
            pbstrErrorXML = ((string)(results[0]));
            pfMoreRows = ((int)(results[1]));
            plAccountInfoCount = ((int)(results[2]));
            pbstrAccountInfoSetXML = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void GetAccountIdFromAdminPUIDAsync(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax) {
            this.GetAccountIdFromAdminPUIDAsync(lDelegateIdHigh, lDelegateIdLow, lSearchPUIDHigh, lSearchPUIDLow, fFullData, lMax, null);
        }
        
        /// <remarks/>
        public void GetAccountIdFromAdminPUIDAsync(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, object userState) {
            if ((this.GetAccountIdFromAdminPUIDOperationCompleted == null)) {
                this.GetAccountIdFromAdminPUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountIdFromAdminPUIDOperationCompleted);
            }
            this.InvokeAsync("GetAccountIdFromAdminPUID", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lSearchPUIDHigh,
                        lSearchPUIDLow,
                        fFullData,
                        lMax}, this.GetAccountIdFromAdminPUIDOperationCompleted, userState);
        }
        
        private void OnGetAccountIdFromAdminPUIDOperationCompleted(object arg) {
            if ((this.GetAccountIdFromAdminPUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountIdFromAdminPUIDCompleted(this, new GetAccountIdFromAdminPUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromAdminPUIDEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetAccountIdFromAdminPUIDEx(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
            object[] results = this.Invoke("GetAccountIdFromAdminPUIDEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lSearchPUIDHigh,
                        lSearchPUIDLow,
                        fFullData,
                        lMax});
            pbstrErrorXML = ((string)(results[0]));
            pfMoreRows = ((int)(results[1]));
            plAccountInfoCount = ((int)(results[2]));
            pbstrAccountInfoSetXML = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void GetAccountIdFromAdminPUIDExAsync(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax) {
            this.GetAccountIdFromAdminPUIDExAsync(lDelegateIdHigh, lDelegateIdLow, lSearchPUIDHigh, lSearchPUIDLow, fFullData, lMax, null);
        }
        
        /// <remarks/>
        public void GetAccountIdFromAdminPUIDExAsync(int lDelegateIdHigh, int lDelegateIdLow, int lSearchPUIDHigh, int lSearchPUIDLow, bool fFullData, int lMax, object userState) {
            if ((this.GetAccountIdFromAdminPUIDExOperationCompleted == null)) {
                this.GetAccountIdFromAdminPUIDExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountIdFromAdminPUIDExOperationCompleted);
            }
            this.InvokeAsync("GetAccountIdFromAdminPUIDEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lSearchPUIDHigh,
                        lSearchPUIDLow,
                        fFullData,
                        lMax}, this.GetAccountIdFromAdminPUIDExOperationCompleted, userState);
        }
        
        private void OnGetAccountIdFromAdminPUIDExOperationCompleted(object arg) {
            if ((this.GetAccountIdFromAdminPUIDExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountIdFromAdminPUIDExCompleted(this, new GetAccountIdFromAdminPUIDExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromPaymentInstrumentInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetAccountIdFromPaymentInstrumentInfo(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML, out string pbstrErrorXML, out int pfMoreRows, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
            object[] results = this.Invoke("GetAccountIdFromPaymentInstrumentInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        fFullData,
                        lMax,
                        bstrPaymentInstrumentInfoXML});
            pbstrErrorXML = ((string)(results[0]));
            pfMoreRows = ((int)(results[1]));
            plAccountInfoCount = ((int)(results[2]));
            pbstrAccountInfoSetXML = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void GetAccountIdFromPaymentInstrumentInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML) {
            this.GetAccountIdFromPaymentInstrumentInfoAsync(lDelegateIdHigh, lDelegateIdLow, fFullData, lMax, bstrPaymentInstrumentInfoXML, null);
        }
        
        /// <remarks/>
        public void GetAccountIdFromPaymentInstrumentInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, int lMax, string bstrPaymentInstrumentInfoXML, object userState) {
            if ((this.GetAccountIdFromPaymentInstrumentInfoOperationCompleted == null)) {
                this.GetAccountIdFromPaymentInstrumentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountIdFromPaymentInstrumentInfoOperationCompleted);
            }
            this.InvokeAsync("GetAccountIdFromPaymentInstrumentInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        fFullData,
                        lMax,
                        bstrPaymentInstrumentInfoXML}, this.GetAccountIdFromPaymentInstrumentInfoOperationCompleted, userState);
        }
        
        private void OnGetAccountIdFromPaymentInstrumentInfoOperationCompleted(object arg) {
            if ((this.GetAccountIdFromPaymentInstrumentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountIdFromPaymentInstrumentInfoCompleted(this, new GetAccountIdFromPaymentInstrumentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromPuid", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetAccountIdFromPuid(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, string roleSetXml, bool fullData, int max, out string errorXml, out int moreRows, out int accountInfoCount, out string accountInfoSetXml) {
            object[] results = this.Invoke("GetAccountIdFromPuid", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        searchPuidHigh,
                        searchPuidLow,
                        roleSetXml,
                        fullData,
                        max});
            errorXml = ((string)(results[0]));
            moreRows = ((int)(results[1]));
            accountInfoCount = ((int)(results[2]));
            accountInfoSetXml = ((string)(results[3]));
        }
        
        /// <remarks/>
        public void GetAccountIdFromPuidAsync(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, string roleSetXml, bool fullData, int max) {
            this.GetAccountIdFromPuidAsync(delegateIdHigh, delegateIdLow, searchPuidHigh, searchPuidLow, roleSetXml, fullData, max, null);
        }
        
        /// <remarks/>
        public void GetAccountIdFromPuidAsync(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, string roleSetXml, bool fullData, int max, object userState) {
            if ((this.GetAccountIdFromPuidOperationCompleted == null)) {
                this.GetAccountIdFromPuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountIdFromPuidOperationCompleted);
            }
            this.InvokeAsync("GetAccountIdFromPuid", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        searchPuidHigh,
                        searchPuidLow,
                        roleSetXml,
                        fullData,
                        max}, this.GetAccountIdFromPuidOperationCompleted, userState);
        }
        
        private void OnGetAccountIdFromPuidOperationCompleted(object arg) {
            if ((this.GetAccountIdFromPuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountIdFromPuidCompleted(this, new GetAccountIdFromPuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetAccountIdFromToken(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, int lTokenType, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
            object[] results = this.Invoke("GetAccountIdFromToken", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        fFullData,
                        bstrTokenId,
                        lTokenType});
            pbstrErrorXML = ((string)(results[0]));
            plAccountInfoCount = ((int)(results[1]));
            pbstrAccountInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetAccountIdFromTokenAsync(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, int lTokenType) {
            this.GetAccountIdFromTokenAsync(lDelegateIdHigh, lDelegateIdLow, fFullData, bstrTokenId, lTokenType, null);
        }
        
        /// <remarks/>
        public void GetAccountIdFromTokenAsync(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, int lTokenType, object userState) {
            if ((this.GetAccountIdFromTokenOperationCompleted == null)) {
                this.GetAccountIdFromTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountIdFromTokenOperationCompleted);
            }
            this.InvokeAsync("GetAccountIdFromToken", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        fFullData,
                        bstrTokenId,
                        lTokenType}, this.GetAccountIdFromTokenOperationCompleted, userState);
        }
        
        private void OnGetAccountIdFromTokenOperationCompleted(object arg) {
            if ((this.GetAccountIdFromTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountIdFromTokenCompleted(this, new GetAccountIdFromTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountIdFromTokenId", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetAccountIdFromTokenId(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, out string pbstrErrorXML, out int plAccountInfoCount, out string pbstrAccountInfoSetXML) {
            object[] results = this.Invoke("GetAccountIdFromTokenId", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        fFullData,
                        bstrTokenId});
            pbstrErrorXML = ((string)(results[0]));
            plAccountInfoCount = ((int)(results[1]));
            pbstrAccountInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetAccountIdFromTokenIdAsync(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId) {
            this.GetAccountIdFromTokenIdAsync(lDelegateIdHigh, lDelegateIdLow, fFullData, bstrTokenId, null);
        }
        
        /// <remarks/>
        public void GetAccountIdFromTokenIdAsync(int lDelegateIdHigh, int lDelegateIdLow, bool fFullData, string bstrTokenId, object userState) {
            if ((this.GetAccountIdFromTokenIdOperationCompleted == null)) {
                this.GetAccountIdFromTokenIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountIdFromTokenIdOperationCompleted);
            }
            this.InvokeAsync("GetAccountIdFromTokenId", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        fFullData,
                        bstrTokenId}, this.GetAccountIdFromTokenIdOperationCompleted, userState);
        }
        
        private void OnGetAccountIdFromTokenIdOperationCompleted(object arg) {
            if ((this.GetAccountIdFromTokenIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountIdFromTokenIdCompleted(this, new GetAccountIdFromTokenIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetAccountInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountInfoXML) {
            object[] results = this.Invoke("GetAccountInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAccountInfoXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void GetAccountInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId) {
            this.GetAccountInfoAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrAccountId, null);
        }
        
        /// <remarks/>
        public void GetAccountInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, object userState) {
            if ((this.GetAccountInfoOperationCompleted == null)) {
                this.GetAccountInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountInfoOperationCompleted);
            }
            this.InvokeAsync("GetAccountInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId}, this.GetAccountInfoOperationCompleted, userState);
        }
        
        private void OnGetAccountInfoOperationCompleted(object arg) {
            if ((this.GetAccountInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountInfoCompleted(this, new GetAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAccountStatus", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetAccountStatus(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, out string pbstrErrorXML, out string pbstrAccountStatusInfoXML) {
            object[] results = this.Invoke("GetAccountStatus", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId});
            pbstrErrorXML = ((string)(results[0]));
            pbstrAccountStatusInfoXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void GetAccountStatusAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId) {
            this.GetAccountStatusAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrAccountId, null);
        }
        
        /// <remarks/>
        public void GetAccountStatusAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, object userState) {
            if ((this.GetAccountStatusOperationCompleted == null)) {
                this.GetAccountStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountStatusOperationCompleted);
            }
            this.InvokeAsync("GetAccountStatus", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId}, this.GetAccountStatusOperationCompleted, userState);
        }
        
        private void OnGetAccountStatusOperationCompleted(object arg) {
            if ((this.GetAccountStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountStatusCompleted(this, new GetAccountStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetAdjustments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetAdjustments(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, out string pbstrErrorXML, out int pcAppliedAdjustmentCount, out string pbstrAppliedAdjustmentSetXML, out int pcAvailableAdjustmentCount, out string pbstrAvailableAdjustmentSetXML) {
            object[] results = this.Invoke("GetAdjustments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrSubscriptionId,
                        lBillingPeriodId});
            pbstrErrorXML = ((string)(results[0]));
            pcAppliedAdjustmentCount = ((int)(results[1]));
            pbstrAppliedAdjustmentSetXML = ((string)(results[2]));
            pcAvailableAdjustmentCount = ((int)(results[3]));
            pbstrAvailableAdjustmentSetXML = ((string)(results[4]));
        }
        
        /// <remarks/>
        public void GetAdjustmentsAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId) {
            this.GetAdjustmentsAsync(lDelegateIdHigh, lDelegateIdLow, bstrSubscriptionId, lBillingPeriodId, null);
        }
        
        /// <remarks/>
        public void GetAdjustmentsAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, int lBillingPeriodId, object userState) {
            if ((this.GetAdjustmentsOperationCompleted == null)) {
                this.GetAdjustmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdjustmentsOperationCompleted);
            }
            this.InvokeAsync("GetAdjustments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrSubscriptionId,
                        lBillingPeriodId}, this.GetAdjustmentsOperationCompleted, userState);
        }
        
        private void OnGetAdjustmentsOperationCompleted(object arg) {
            if ((this.GetAdjustmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdjustmentsCompleted(this, new GetAdjustmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBaseOfferings", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetBaseOfferings(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
            object[] results = this.Invoke("GetBaseOfferings", new object[] {
                        bstrOfferingGUID,
                        bstrCategory,
                        bstrCountry,
                        bstrLocale,
                        bstrCurrency});
            pbstrErrorText = ((string)(results[0]));
            plOfferingInfoCount = ((int)(results[1]));
            pbstrOfferingInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetBaseOfferingsAsync(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency) {
            this.GetBaseOfferingsAsync(bstrOfferingGUID, bstrCategory, bstrCountry, bstrLocale, bstrCurrency, null);
        }
        
        /// <remarks/>
        public void GetBaseOfferingsAsync(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, object userState) {
            if ((this.GetBaseOfferingsOperationCompleted == null)) {
                this.GetBaseOfferingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBaseOfferingsOperationCompleted);
            }
            this.InvokeAsync("GetBaseOfferings", new object[] {
                        bstrOfferingGUID,
                        bstrCategory,
                        bstrCountry,
                        bstrLocale,
                        bstrCurrency}, this.GetBaseOfferingsOperationCompleted, userState);
        }
        
        private void OnGetBaseOfferingsOperationCompleted(object arg) {
            if ((this.GetBaseOfferingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBaseOfferingsCompleted(this, new GetBaseOfferingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBaseOfferingsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetBaseOfferingsEx(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, string bstrTokenId, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
            object[] results = this.Invoke("GetBaseOfferingsEx", new object[] {
                        bstrOfferingGUID,
                        bstrCategory,
                        bstrCountry,
                        bstrLocale,
                        bstrCurrency,
                        bstrTokenId});
            pbstrErrorText = ((string)(results[0]));
            plOfferingInfoCount = ((int)(results[1]));
            pbstrOfferingInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetBaseOfferingsExAsync(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, string bstrTokenId) {
            this.GetBaseOfferingsExAsync(bstrOfferingGUID, bstrCategory, bstrCountry, bstrLocale, bstrCurrency, bstrTokenId, null);
        }
        
        /// <remarks/>
        public void GetBaseOfferingsExAsync(string bstrOfferingGUID, string bstrCategory, string bstrCountry, string bstrLocale, string bstrCurrency, string bstrTokenId, object userState) {
            if ((this.GetBaseOfferingsExOperationCompleted == null)) {
                this.GetBaseOfferingsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBaseOfferingsExOperationCompleted);
            }
            this.InvokeAsync("GetBaseOfferingsEx", new object[] {
                        bstrOfferingGUID,
                        bstrCategory,
                        bstrCountry,
                        bstrLocale,
                        bstrCurrency,
                        bstrTokenId}, this.GetBaseOfferingsExOperationCompleted, userState);
        }
        
        private void OnGetBaseOfferingsExOperationCompleted(object arg) {
            if ((this.GetBaseOfferingsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBaseOfferingsExCompleted(this, new GetBaseOfferingsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBillingPeriods", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetBillingPeriods(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale, out string pbstrErrorXML, out int plBillingPeriodCount, out string pbstrBillingPeriodSetXML) {
            object[] results = this.Invoke("GetBillingPeriods", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrLocale});
            pbstrErrorXML = ((string)(results[0]));
            plBillingPeriodCount = ((int)(results[1]));
            pbstrBillingPeriodSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetBillingPeriodsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale) {
            this.GetBillingPeriodsAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrObjectId, bstrLocale, null);
        }
        
        /// <remarks/>
        public void GetBillingPeriodsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrLocale, object userState) {
            if ((this.GetBillingPeriodsOperationCompleted == null)) {
                this.GetBillingPeriodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBillingPeriodsOperationCompleted);
            }
            this.InvokeAsync("GetBillingPeriods", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrLocale}, this.GetBillingPeriodsOperationCompleted, userState);
        }
        
        private void OnGetBillingPeriodsOperationCompleted(object arg) {
            if ((this.GetBillingPeriodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBillingPeriodsCompleted(this, new GetBillingPeriodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetBillingReference", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetBillingReference(string version, string callerInfoXml, string objectId, string paymentMethodType, string billingConfigGroup, out string billingReferenceInfoSetXml) {
            object[] results = this.Invoke("GetBillingReference", new object[] {
                        version,
                        callerInfoXml,
                        objectId,
                        paymentMethodType,
                        billingConfigGroup});
            billingReferenceInfoSetXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBillingReferenceAsync(string version, string callerInfoXml, string objectId, string paymentMethodType, string billingConfigGroup) {
            this.GetBillingReferenceAsync(version, callerInfoXml, objectId, paymentMethodType, billingConfigGroup, null);
        }
        
        /// <remarks/>
        public void GetBillingReferenceAsync(string version, string callerInfoXml, string objectId, string paymentMethodType, string billingConfigGroup, object userState) {
            if ((this.GetBillingReferenceOperationCompleted == null)) {
                this.GetBillingReferenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBillingReferenceOperationCompleted);
            }
            this.InvokeAsync("GetBillingReference", new object[] {
                        version,
                        callerInfoXml,
                        objectId,
                        paymentMethodType,
                        billingConfigGroup}, this.GetBillingReferenceOperationCompleted, userState);
        }
        
        private void OnGetBillingReferenceOperationCompleted(object arg) {
            if ((this.GetBillingReferenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBillingReferenceCompleted(this, new GetBillingReferenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetComments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetComments(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, out string pbstrErrorXML, out int plCommentInfoSetCount, out string pbstrCommentInfoSetXML) {
            object[] results = this.Invoke("GetComments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountId});
            pbstrErrorXML = ((string)(results[0]));
            plCommentInfoSetCount = ((int)(results[1]));
            pbstrCommentInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetCommentsAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId) {
            this.GetCommentsAsync(lDelegateIdHigh, lDelegateIdLow, bstrAccountId, null);
        }
        
        /// <remarks/>
        public void GetCommentsAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrAccountId, object userState) {
            if ((this.GetCommentsOperationCompleted == null)) {
                this.GetCommentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommentsOperationCompleted);
            }
            this.InvokeAsync("GetComments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrAccountId}, this.GetCommentsOperationCompleted, userState);
        }
        
        private void OnGetCommentsOperationCompleted(object arg) {
            if ((this.GetCommentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommentsCompleted(this, new GetCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleOfferings", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetEligibleOfferings(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
            object[] results = this.Invoke("GetEligibleOfferings", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId,
                        bstrOfferingGUID,
                        bstrCategory,
                        bstrFilter});
            pbstrErrorText = ((string)(results[0]));
            plOfferingInfoCount = ((int)(results[1]));
            pbstrOfferingInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetEligibleOfferingsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter) {
            this.GetEligibleOfferingsAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrAccountId, bstrOfferingGUID, bstrCategory, bstrFilter, null);
        }
        
        /// <remarks/>
        public void GetEligibleOfferingsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, object userState) {
            if ((this.GetEligibleOfferingsOperationCompleted == null)) {
                this.GetEligibleOfferingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEligibleOfferingsOperationCompleted);
            }
            this.InvokeAsync("GetEligibleOfferings", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId,
                        bstrOfferingGUID,
                        bstrCategory,
                        bstrFilter}, this.GetEligibleOfferingsOperationCompleted, userState);
        }
        
        private void OnGetEligibleOfferingsOperationCompleted(object arg) {
            if ((this.GetEligibleOfferingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEligibleOfferingsCompleted(this, new GetEligibleOfferingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleOfferingsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetEligibleOfferingsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, string bstrTokenId, out string pbstrErrorText, out int plOfferingInfoCount, out string pbstrOfferingInfoSetXML) {
            object[] results = this.Invoke("GetEligibleOfferingsEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId,
                        bstrOfferingGUID,
                        bstrCategory,
                        bstrFilter,
                        bstrTokenId});
            pbstrErrorText = ((string)(results[0]));
            plOfferingInfoCount = ((int)(results[1]));
            pbstrOfferingInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetEligibleOfferingsExAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, string bstrTokenId) {
            this.GetEligibleOfferingsExAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrAccountId, bstrOfferingGUID, bstrCategory, bstrFilter, bstrTokenId, null);
        }
        
        /// <remarks/>
        public void GetEligibleOfferingsExAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrAccountId, string bstrOfferingGUID, string bstrCategory, string bstrFilter, string bstrTokenId, object userState) {
            if ((this.GetEligibleOfferingsExOperationCompleted == null)) {
                this.GetEligibleOfferingsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEligibleOfferingsExOperationCompleted);
            }
            this.InvokeAsync("GetEligibleOfferingsEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrAccountId,
                        bstrOfferingGUID,
                        bstrCategory,
                        bstrFilter,
                        bstrTokenId}, this.GetEligibleOfferingsExOperationCompleted, userState);
        }
        
        private void OnGetEligibleOfferingsExOperationCompleted(object arg) {
            if ((this.GetEligibleOfferingsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEligibleOfferingsExCompleted(this, new GetEligibleOfferingsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetEligibleSwitchPITypes", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetEligibleSwitchPITypes(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, out string pbstrErrorXML, out int plPITypeCount, out string pbstrPITypeSetXML) {
            object[] results = this.Invoke("GetEligibleSwitchPITypes", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrPaymentInstrumentId});
            pbstrErrorXML = ((string)(results[0]));
            plPITypeCount = ((int)(results[1]));
            pbstrPITypeSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetEligibleSwitchPITypesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId) {
            this.GetEligibleSwitchPITypesAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrPaymentInstrumentId, null);
        }
        
        /// <remarks/>
        public void GetEligibleSwitchPITypesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrPaymentInstrumentId, object userState) {
            if ((this.GetEligibleSwitchPITypesOperationCompleted == null)) {
                this.GetEligibleSwitchPITypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEligibleSwitchPITypesOperationCompleted);
            }
            this.InvokeAsync("GetEligibleSwitchPITypes", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrPaymentInstrumentId}, this.GetEligibleSwitchPITypesOperationCompleted, userState);
        }
        
        private void OnGetEligibleSwitchPITypesOperationCompleted(object arg) {
            if ((this.GetEligibleSwitchPITypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEligibleSwitchPITypesCompleted(this, new GetEligibleSwitchPITypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetExistingAccountsByCriteria", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetExistingAccountsByCriteria(int lDelegateIdHigh, int lDelegateIdLow, string bstrCriteriaXML, out string pbstrErrorXML, out int plAccountDetailCount, out string pbstrAccountDetailSetXML) {
            object[] results = this.Invoke("GetExistingAccountsByCriteria", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrCriteriaXML});
            pbstrErrorXML = ((string)(results[0]));
            plAccountDetailCount = ((int)(results[1]));
            pbstrAccountDetailSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetExistingAccountsByCriteriaAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrCriteriaXML) {
            this.GetExistingAccountsByCriteriaAsync(lDelegateIdHigh, lDelegateIdLow, bstrCriteriaXML, null);
        }
        
        /// <remarks/>
        public void GetExistingAccountsByCriteriaAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrCriteriaXML, object userState) {
            if ((this.GetExistingAccountsByCriteriaOperationCompleted == null)) {
                this.GetExistingAccountsByCriteriaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExistingAccountsByCriteriaOperationCompleted);
            }
            this.InvokeAsync("GetExistingAccountsByCriteria", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrCriteriaXML}, this.GetExistingAccountsByCriteriaOperationCompleted, userState);
        }
        
        private void OnGetExistingAccountsByCriteriaOperationCompleted(object arg) {
            if ((this.GetExistingAccountsByCriteriaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExistingAccountsByCriteriaCompleted(this, new GetExistingAccountsByCriteriaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetKey", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetKey(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid, out string pbstrErrorXML, out string pbstrKeyXml) {
            object[] results = this.Invoke("GetKey", new object[] {
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrKeyGuid});
            pbstrErrorXML = ((string)(results[0]));
            pbstrKeyXml = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void GetKeyAsync(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid) {
            this.GetKeyAsync(lRequesterIdHigh, lRequesterIdLow, bstrKeyGuid, null);
        }
        
        /// <remarks/>
        public void GetKeyAsync(int lRequesterIdHigh, int lRequesterIdLow, string bstrKeyGuid, object userState) {
            if ((this.GetKeyOperationCompleted == null)) {
                this.GetKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKeyOperationCompleted);
            }
            this.InvokeAsync("GetKey", new object[] {
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrKeyGuid}, this.GetKeyOperationCompleted, userState);
        }
        
        private void OnGetKeyOperationCompleted(object arg) {
            if ((this.GetKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKeyCompleted(this, new GetKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetLineItemHistory", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetLineItemHistory(int delegateIdHigh, int delegateIdLow, string lineItemId, bool returnHistory, out string errorXml, out string lineItemHistorySetXml, out string mcv) {
            object[] results = this.Invoke("GetLineItemHistory", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        lineItemId,
                        returnHistory});
            errorXml = ((string)(results[0]));
            lineItemHistorySetXml = ((string)(results[1]));
            mcv = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetLineItemHistoryAsync(int delegateIdHigh, int delegateIdLow, string lineItemId, bool returnHistory) {
            this.GetLineItemHistoryAsync(delegateIdHigh, delegateIdLow, lineItemId, returnHistory, null);
        }
        
        /// <remarks/>
        public void GetLineItemHistoryAsync(int delegateIdHigh, int delegateIdLow, string lineItemId, bool returnHistory, object userState) {
            if ((this.GetLineItemHistoryOperationCompleted == null)) {
                this.GetLineItemHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLineItemHistoryOperationCompleted);
            }
            this.InvokeAsync("GetLineItemHistory", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        lineItemId,
                        returnHistory}, this.GetLineItemHistoryOperationCompleted, userState);
        }
        
        private void OnGetLineItemHistoryOperationCompleted(object arg) {
            if ((this.GetLineItemHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLineItemHistoryCompleted(this, new GetLineItemHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPartnerConfiguration", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetPartnerConfiguration(System.Guid trackingGuid, System.Guid ownerID, string partnerConfigQueryXML, out string responseXML) {
            object[] results = this.Invoke("GetPartnerConfiguration", new object[] {
                        trackingGuid,
                        ownerID,
                        partnerConfigQueryXML});
            responseXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPartnerConfigurationAsync(System.Guid trackingGuid, System.Guid ownerID, string partnerConfigQueryXML) {
            this.GetPartnerConfigurationAsync(trackingGuid, ownerID, partnerConfigQueryXML, null);
        }
        
        /// <remarks/>
        public void GetPartnerConfigurationAsync(System.Guid trackingGuid, System.Guid ownerID, string partnerConfigQueryXML, object userState) {
            if ((this.GetPartnerConfigurationOperationCompleted == null)) {
                this.GetPartnerConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPartnerConfigurationOperationCompleted);
            }
            this.InvokeAsync("GetPartnerConfiguration", new object[] {
                        trackingGuid,
                        ownerID,
                        partnerConfigQueryXML}, this.GetPartnerConfigurationOperationCompleted, userState);
        }
        
        private void OnGetPartnerConfigurationOperationCompleted(object arg) {
            if ((this.GetPartnerConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPartnerConfigurationCompleted(this, new GetPartnerConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPaymentInstruments", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetPaymentInstruments(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
            object[] results = this.Invoke("GetPaymentInstruments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId});
            pbstrErrorXML = ((string)(results[0]));
            plPaymentInstrumentInfoCount = ((int)(results[1]));
            pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetPaymentInstrumentsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId) {
            this.GetPaymentInstrumentsAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrObjectId, null);
        }
        
        /// <remarks/>
        public void GetPaymentInstrumentsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, object userState) {
            if ((this.GetPaymentInstrumentsOperationCompleted == null)) {
                this.GetPaymentInstrumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentInstrumentsOperationCompleted);
            }
            this.InvokeAsync("GetPaymentInstruments", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId}, this.GetPaymentInstrumentsOperationCompleted, userState);
        }
        
        private void OnGetPaymentInstrumentsOperationCompleted(object arg) {
            if ((this.GetPaymentInstrumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentInstrumentsCompleted(this, new GetPaymentInstrumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPaymentInstrumentsEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetPaymentInstrumentsEx(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fReturnRemoved, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
            object[] results = this.Invoke("GetPaymentInstrumentsEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        fReturnRemoved});
            pbstrErrorXML = ((string)(results[0]));
            plPaymentInstrumentInfoCount = ((int)(results[1]));
            pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetPaymentInstrumentsExAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fReturnRemoved) {
            this.GetPaymentInstrumentsExAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrObjectId, fReturnRemoved, null);
        }
        
        /// <remarks/>
        public void GetPaymentInstrumentsExAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fReturnRemoved, object userState) {
            if ((this.GetPaymentInstrumentsExOperationCompleted == null)) {
                this.GetPaymentInstrumentsExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentInstrumentsExOperationCompleted);
            }
            this.InvokeAsync("GetPaymentInstrumentsEx", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        fReturnRemoved}, this.GetPaymentInstrumentsExOperationCompleted, userState);
        }
        
        private void OnGetPaymentInstrumentsExOperationCompleted(object arg) {
            if ((this.GetPaymentInstrumentsExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentInstrumentsExCompleted(this, new GetPaymentInstrumentsExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPaymentInstrumentsEx2", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetPaymentInstrumentsEx2(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrPaymentInstrumentPropertySet, bool fReturnRemoved, out string pbstrErrorXML, out int plPaymentInstrumentInfoCount, out string pbstrPaymentInstrumentInfoSetXML) {
            object[] results = this.Invoke("GetPaymentInstrumentsEx2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrPaymentInstrumentPropertySet,
                        fReturnRemoved});
            pbstrErrorXML = ((string)(results[0]));
            plPaymentInstrumentInfoCount = ((int)(results[1]));
            pbstrPaymentInstrumentInfoSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetPaymentInstrumentsEx2Async(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrPaymentInstrumentPropertySet, bool fReturnRemoved) {
            this.GetPaymentInstrumentsEx2Async(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrObjectId, bstrPaymentInstrumentPropertySet, fReturnRemoved, null);
        }
        
        /// <remarks/>
        public void GetPaymentInstrumentsEx2Async(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrPaymentInstrumentPropertySet, bool fReturnRemoved, object userState) {
            if ((this.GetPaymentInstrumentsEx2OperationCompleted == null)) {
                this.GetPaymentInstrumentsEx2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentInstrumentsEx2OperationCompleted);
            }
            this.InvokeAsync("GetPaymentInstrumentsEx2", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrPaymentInstrumentPropertySet,
                        fReturnRemoved}, this.GetPaymentInstrumentsEx2OperationCompleted, userState);
        }
        
        private void OnGetPaymentInstrumentsEx2OperationCompleted(object arg) {
            if ((this.GetPaymentInstrumentsEx2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentInstrumentsEx2Completed(this, new GetPaymentInstrumentsEx2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPaymentMethodTypeProperties", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetPaymentMethodTypeProperties(out string paymentTypeInfoSetXml) {
            object[] results = this.Invoke("GetPaymentMethodTypeProperties", new object[0]);
            paymentTypeInfoSetXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentMethodTypePropertiesAsync() {
            this.GetPaymentMethodTypePropertiesAsync(null);
        }
        
        /// <remarks/>
        public void GetPaymentMethodTypePropertiesAsync(object userState) {
            if ((this.GetPaymentMethodTypePropertiesOperationCompleted == null)) {
                this.GetPaymentMethodTypePropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentMethodTypePropertiesOperationCompleted);
            }
            this.InvokeAsync("GetPaymentMethodTypeProperties", new object[0], this.GetPaymentMethodTypePropertiesOperationCompleted, userState);
        }
        
        private void OnGetPaymentMethodTypePropertiesOperationCompleted(object arg) {
            if ((this.GetPaymentMethodTypePropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentMethodTypePropertiesCompleted(this, new GetPaymentMethodTypePropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPermitHistoryForObjectId", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetPermitHistoryForObjectId(int delegateIdHigh, int delegateIdLow, int requestorIdHigh, int requestorIdLow, string objectId, out string errorXml, out int permitCount, out string permitSetXML) {
            object[] results = this.Invoke("GetPermitHistoryForObjectId", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requestorIdHigh,
                        requestorIdLow,
                        objectId});
            errorXml = ((string)(results[0]));
            permitCount = ((int)(results[1]));
            permitSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetPermitHistoryForObjectIdAsync(int delegateIdHigh, int delegateIdLow, int requestorIdHigh, int requestorIdLow, string objectId) {
            this.GetPermitHistoryForObjectIdAsync(delegateIdHigh, delegateIdLow, requestorIdHigh, requestorIdLow, objectId, null);
        }
        
        /// <remarks/>
        public void GetPermitHistoryForObjectIdAsync(int delegateIdHigh, int delegateIdLow, int requestorIdHigh, int requestorIdLow, string objectId, object userState) {
            if ((this.GetPermitHistoryForObjectIdOperationCompleted == null)) {
                this.GetPermitHistoryForObjectIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermitHistoryForObjectIdOperationCompleted);
            }
            this.InvokeAsync("GetPermitHistoryForObjectId", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requestorIdHigh,
                        requestorIdLow,
                        objectId}, this.GetPermitHistoryForObjectIdOperationCompleted, userState);
        }
        
        private void OnGetPermitHistoryForObjectIdOperationCompleted(object arg) {
            if ((this.GetPermitHistoryForObjectIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermitHistoryForObjectIdCompleted(this, new GetPermitHistoryForObjectIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPermitsForObjectId", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetPermitsForObjectId(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
            object[] results = this.Invoke("GetPermitsForObjectId", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        fDeep});
            pbstrErrorXML = ((string)(results[0]));
            plPermitCount = ((int)(results[1]));
            pbstrPermitSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetPermitsForObjectIdAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep) {
            this.GetPermitsForObjectIdAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrObjectId, fDeep, null);
        }
        
        /// <remarks/>
        public void GetPermitsForObjectIdAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, bool fDeep, object userState) {
            if ((this.GetPermitsForObjectIdOperationCompleted == null)) {
                this.GetPermitsForObjectIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermitsForObjectIdOperationCompleted);
            }
            this.InvokeAsync("GetPermitsForObjectId", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        fDeep}, this.GetPermitsForObjectIdOperationCompleted, userState);
        }
        
        private void OnGetPermitsForObjectIdOperationCompleted(object arg) {
            if ((this.GetPermitsForObjectIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermitsForObjectIdCompleted(this, new GetPermitsForObjectIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPermitsForPUID", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetPermitsForPUID(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID, out string pbstrErrorXML, out int plPermitCount, out string pbstrPermitSetXML) {
            object[] results = this.Invoke("GetPermitsForPUID", new object[] {
                        lCustomerPUIDHigh,
                        lCustomerPUIDLow,
                        bstrServiceComponentGUID});
            pbstrErrorXML = ((string)(results[0]));
            plPermitCount = ((int)(results[1]));
            pbstrPermitSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetPermitsForPUIDAsync(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID) {
            this.GetPermitsForPUIDAsync(lCustomerPUIDHigh, lCustomerPUIDLow, bstrServiceComponentGUID, null);
        }
        
        /// <remarks/>
        public void GetPermitsForPUIDAsync(int lCustomerPUIDHigh, int lCustomerPUIDLow, string bstrServiceComponentGUID, object userState) {
            if ((this.GetPermitsForPUIDOperationCompleted == null)) {
                this.GetPermitsForPUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermitsForPUIDOperationCompleted);
            }
            this.InvokeAsync("GetPermitsForPUID", new object[] {
                        lCustomerPUIDHigh,
                        lCustomerPUIDLow,
                        bstrServiceComponentGUID}, this.GetPermitsForPUIDOperationCompleted, userState);
        }
        
        private void OnGetPermitsForPUIDOperationCompleted(object arg) {
            if ((this.GetPermitsForPUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermitsForPUIDCompleted(this, new GetPermitsForPUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetPolicy", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetPolicy(string bstrPolicyGUID, int lPolicyVersion, string bstrLocale, out string pbstrPolicyInfoXML, out string pbstrErrorXML) {
            object[] results = this.Invoke("GetPolicy", new object[] {
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrLocale});
            pbstrPolicyInfoXML = ((string)(results[0]));
            pbstrErrorXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void GetPolicyAsync(string bstrPolicyGUID, int lPolicyVersion, string bstrLocale) {
            this.GetPolicyAsync(bstrPolicyGUID, lPolicyVersion, bstrLocale, null);
        }
        
        /// <remarks/>
        public void GetPolicyAsync(string bstrPolicyGUID, int lPolicyVersion, string bstrLocale, object userState) {
            if ((this.GetPolicyOperationCompleted == null)) {
                this.GetPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPolicyOperationCompleted);
            }
            this.InvokeAsync("GetPolicy", new object[] {
                        bstrPolicyGUID,
                        lPolicyVersion,
                        bstrLocale}, this.GetPolicyOperationCompleted, userState);
        }
        
        private void OnGetPolicyOperationCompleted(object arg) {
            if ((this.GetPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPolicyCompleted(this, new GetPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetProductClasses", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetProductClasses(out string productClassSetXml) {
            object[] results = this.Invoke("GetProductClasses", new object[0]);
            productClassSetXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProductClassesAsync() {
            this.GetProductClassesAsync(null);
        }
        
        /// <remarks/>
        public void GetProductClassesAsync(object userState) {
            if ((this.GetProductClassesOperationCompleted == null)) {
                this.GetProductClassesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductClassesOperationCompleted);
            }
            this.InvokeAsync("GetProductClasses", new object[0], this.GetProductClassesOperationCompleted, userState);
        }
        
        private void OnGetProductClassesOperationCompleted(object arg) {
            if ((this.GetProductClassesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductClassesCompleted(this, new GetProductClassesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetProvisioningInfo", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetProvisioningInfo(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string ObjectId, string BeginDate, string EndDate, int lTargetUserIdHigh, int lTargetUserIdLow, int nDetailLevel, out string ProvisioningInfoXml) {
            object[] results = this.Invoke("GetProvisioningInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        ObjectId,
                        BeginDate,
                        EndDate,
                        lTargetUserIdHigh,
                        lTargetUserIdLow,
                        nDetailLevel});
            ProvisioningInfoXml = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetProvisioningInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string ObjectId, string BeginDate, string EndDate, int lTargetUserIdHigh, int lTargetUserIdLow, int nDetailLevel) {
            this.GetProvisioningInfoAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, ObjectId, BeginDate, EndDate, lTargetUserIdHigh, lTargetUserIdLow, nDetailLevel, null);
        }
        
        /// <remarks/>
        public void GetProvisioningInfoAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string ObjectId, string BeginDate, string EndDate, int lTargetUserIdHigh, int lTargetUserIdLow, int nDetailLevel, object userState) {
            if ((this.GetProvisioningInfoOperationCompleted == null)) {
                this.GetProvisioningInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProvisioningInfoOperationCompleted);
            }
            this.InvokeAsync("GetProvisioningInfo", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        ObjectId,
                        BeginDate,
                        EndDate,
                        lTargetUserIdHigh,
                        lTargetUserIdLow,
                        nDetailLevel}, this.GetProvisioningInfoOperationCompleted, userState);
        }
        
        private void OnGetProvisioningInfoOperationCompleted(object arg) {
            if ((this.GetProvisioningInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProvisioningInfoCompleted(this, new GetProvisioningInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReferralData", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetReferralData(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, out string pbstrErrorXML, out int plReferralCount, out string pbstrReferralSetXML) {
            object[] results = this.Invoke("GetReferralData", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrSubscriptionId});
            pbstrErrorXML = ((string)(results[0]));
            plReferralCount = ((int)(results[1]));
            pbstrReferralSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetReferralDataAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId) {
            this.GetReferralDataAsync(lDelegateIdHigh, lDelegateIdLow, bstrSubscriptionId, null);
        }
        
        /// <remarks/>
        public void GetReferralDataAsync(int lDelegateIdHigh, int lDelegateIdLow, string bstrSubscriptionId, object userState) {
            if ((this.GetReferralDataOperationCompleted == null)) {
                this.GetReferralDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReferralDataOperationCompleted);
            }
            this.InvokeAsync("GetReferralData", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        bstrSubscriptionId}, this.GetReferralDataOperationCompleted, userState);
        }
        
        private void OnGetReferralDataOperationCompleted(object arg) {
            if ((this.GetReferralDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReferralDataCompleted(this, new GetReferralDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReferralEvents", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetReferralEvents(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string AccountId, string SessionKey, out string ReferralEventsInfoXML) {
            object[] results = this.Invoke("GetReferralEvents", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        AccountId,
                        SessionKey});
            ReferralEventsInfoXML = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReferralEventsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string AccountId, string SessionKey) {
            this.GetReferralEventsAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, AccountId, SessionKey, null);
        }
        
        /// <remarks/>
        public void GetReferralEventsAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string AccountId, string SessionKey, object userState) {
            if ((this.GetReferralEventsOperationCompleted == null)) {
                this.GetReferralEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReferralEventsOperationCompleted);
            }
            this.InvokeAsync("GetReferralEvents", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        AccountId,
                        SessionKey}, this.GetReferralEventsOperationCompleted, userState);
        }
        
        private void OnGetReferralEventsOperationCompleted(object arg) {
            if ((this.GetReferralEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReferralEventsCompleted(this, new GetReferralEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetResourceBalances", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetResourceBalances(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID, out string pbstrErrorText, out int pcResourceInfoCount, out string pbstrResourceInfoSet) {
            object[] results = this.Invoke("GetResourceBalances", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrResourceGUID});
            pbstrErrorText = ((string)(results[0]));
            pcResourceInfoCount = ((int)(results[1]));
            pbstrResourceInfoSet = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetResourceBalancesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID) {
            this.GetResourceBalancesAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrObjectId, bstrResourceGUID, null);
        }
        
        /// <remarks/>
        public void GetResourceBalancesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrObjectId, string bstrResourceGUID, object userState) {
            if ((this.GetResourceBalancesOperationCompleted == null)) {
                this.GetResourceBalancesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResourceBalancesOperationCompleted);
            }
            this.InvokeAsync("GetResourceBalances", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrObjectId,
                        bstrResourceGUID}, this.GetResourceBalancesOperationCompleted, userState);
        }
        
        private void OnGetResourceBalancesOperationCompleted(object arg) {
            if ((this.GetResourceBalancesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResourceBalancesCompleted(this, new GetResourceBalancesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReplacementToken", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetReplacementToken(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, int replacementReasonCode, string token, int tokenType, int tokenSignature, string emailAddress, string sessionKey, string trackingGuid, out string replacementPin, out int signature, out string sequenceNumber) {
            object[] results = this.Invoke("GetReplacementToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        replacementPuidHigh,
                        replacementPuidLow,
                        replacementReasonCode,
                        token,
                        tokenType,
                        tokenSignature,
                        emailAddress,
                        sessionKey,
                        trackingGuid});
            replacementPin = ((string)(results[0]));
            signature = ((int)(results[1]));
            sequenceNumber = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetReplacementTokenAsync(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, int replacementReasonCode, string token, int tokenType, int tokenSignature, string emailAddress, string sessionKey, string trackingGuid) {
            this.GetReplacementTokenAsync(delegateIdHigh, delegateIdLow, replacementPuidHigh, replacementPuidLow, replacementReasonCode, token, tokenType, tokenSignature, emailAddress, sessionKey, trackingGuid, null);
        }
        
        /// <remarks/>
        public void GetReplacementTokenAsync(int delegateIdHigh, int delegateIdLow, int replacementPuidHigh, int replacementPuidLow, int replacementReasonCode, string token, int tokenType, int tokenSignature, string emailAddress, string sessionKey, string trackingGuid, object userState) {
            if ((this.GetReplacementTokenOperationCompleted == null)) {
                this.GetReplacementTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReplacementTokenOperationCompleted);
            }
            this.InvokeAsync("GetReplacementToken", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        replacementPuidHigh,
                        replacementPuidLow,
                        replacementReasonCode,
                        token,
                        tokenType,
                        tokenSignature,
                        emailAddress,
                        sessionKey,
                        trackingGuid}, this.GetReplacementTokenOperationCompleted, userState);
        }
        
        private void OnGetReplacementTokenOperationCompleted(object arg) {
            if ((this.GetReplacementTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReplacementTokenCompleted(this, new GetReplacementTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetReplacementTokenFromPuid", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetReplacementTokenFromPuid(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, out int tokenInfoReturnedCount, out string replacementTokenSetXml) {
            object[] results = this.Invoke("GetReplacementTokenFromPuid", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        searchPuidHigh,
                        searchPuidLow});
            tokenInfoReturnedCount = ((int)(results[0]));
            replacementTokenSetXml = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void GetReplacementTokenFromPuidAsync(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow) {
            this.GetReplacementTokenFromPuidAsync(delegateIdHigh, delegateIdLow, searchPuidHigh, searchPuidLow, null);
        }
        
        /// <remarks/>
        public void GetReplacementTokenFromPuidAsync(int delegateIdHigh, int delegateIdLow, int searchPuidHigh, int searchPuidLow, object userState) {
            if ((this.GetReplacementTokenFromPuidOperationCompleted == null)) {
                this.GetReplacementTokenFromPuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReplacementTokenFromPuidOperationCompleted);
            }
            this.InvokeAsync("GetReplacementTokenFromPuid", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        searchPuidHigh,
                        searchPuidLow}, this.GetReplacementTokenFromPuidOperationCompleted, userState);
        }
        
        private void OnGetReplacementTokenFromPuidOperationCompleted(object arg) {
            if ((this.GetReplacementTokenFromPuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReplacementTokenFromPuidCompleted(this, new GetReplacementTokenFromPuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetResourcePrices", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetResourcePrices(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrOfferingGUID, out string pbstrErrorXML, out int plCount, out string pbstrResourcePriceSetXML) {
            object[] results = this.Invoke("GetResourcePrices", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId,
                        bstrOfferingGUID});
            pbstrErrorXML = ((string)(results[0]));
            plCount = ((int)(results[1]));
            pbstrResourcePriceSetXML = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetResourcePricesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrOfferingGUID) {
            this.GetResourcePricesAsync(lDelegateIdHigh, lDelegateIdLow, lRequesterIdHigh, lRequesterIdLow, bstrSubscriptionId, bstrOfferingGUID, null);
        }
        
        /// <remarks/>
        public void GetResourcePricesAsync(int lDelegateIdHigh, int lDelegateIdLow, int lRequesterIdHigh, int lRequesterIdLow, string bstrSubscriptionId, string bstrOfferingGUID, object userState) {
            if ((this.GetResourcePricesOperationCompleted == null)) {
                this.GetResourcePricesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResourcePricesOperationCompleted);
            }
            this.InvokeAsync("GetResourcePrices", new object[] {
                        lDelegateIdHigh,
                        lDelegateIdLow,
                        lRequesterIdHigh,
                        lRequesterIdLow,
                        bstrSubscriptionId,
                        bstrOfferingGUID}, this.GetResourcePricesOperationCompleted, userState);
        }
        
        private void OnGetResourcePricesOperationCompleted(object arg) {
            if ((this.GetResourcePricesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResourcePricesCompleted(this, new GetResourcePricesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetStatement", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetStatement(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnStatementSet, bool returnNotificationSet, out string errorXml, out string accountStatementInfoSetXml, out string userNotificationSetXml) {
            object[] results = this.Invoke("GetStatement", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        objectId,
                        beginBillingPeriodId,
                        endBillingPeriodId,
                        returnStatementSet,
                        returnNotificationSet});
            errorXml = ((string)(results[0]));
            accountStatementInfoSetXml = ((string)(results[1]));
            userNotificationSetXml = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetStatementAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnStatementSet, bool returnNotificationSet) {
            this.GetStatementAsync(delegateIdHigh, delegateIdLow, requesterIdHigh, requesterIdLow, objectId, beginBillingPeriodId, endBillingPeriodId, returnStatementSet, returnNotificationSet, null);
        }
        
        /// <remarks/>
        public void GetStatementAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnStatementSet, bool returnNotificationSet, object userState) {
            if ((this.GetStatementOperationCompleted == null)) {
                this.GetStatementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatementOperationCompleted);
            }
            this.InvokeAsync("GetStatement", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        objectId,
                        beginBillingPeriodId,
                        endBillingPeriodId,
                        returnStatementSet,
                        returnNotificationSet}, this.GetStatementOperationCompleted, userState);
        }
        
        private void OnGetStatementOperationCompleted(object arg) {
            if ((this.GetStatementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatementCompleted(this, new GetStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetStoredValueTransactions", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetStoredValueTransactions(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string accountId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnTransactionsSet, out string errorXml, out string storedValueTransactionSetXML) {
            object[] results = this.Invoke("GetStoredValueTransactions", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        accountId,
                        beginBillingPeriodId,
                        endBillingPeriodId,
                        returnTransactionsSet});
            errorXml = ((string)(results[0]));
            storedValueTransactionSetXML = ((string)(results[1]));
        }
        
        /// <remarks/>
        public void GetStoredValueTransactionsAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string accountId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnTransactionsSet) {
            this.GetStoredValueTransactionsAsync(delegateIdHigh, delegateIdLow, requesterIdHigh, requesterIdLow, accountId, beginBillingPeriodId, endBillingPeriodId, returnTransactionsSet, null);
        }
        
        /// <remarks/>
        public void GetStoredValueTransactionsAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string accountId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnTransactionsSet, object userState) {
            if ((this.GetStoredValueTransactionsOperationCompleted == null)) {
                this.GetStoredValueTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStoredValueTransactionsOperationCompleted);
            }
            this.InvokeAsync("GetStoredValueTransactions", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        accountId,
                        beginBillingPeriodId,
                        endBillingPeriodId,
                        returnTransactionsSet}, this.GetStoredValueTransactionsOperationCompleted, userState);
        }
        
        private void OnGetStoredValueTransactionsOperationCompleted(object arg) {
            if ((this.GetStoredValueTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStoredValueTransactionsCompleted(this, new GetStoredValueTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserContextualInfoSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("OnBehalfOfSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://tempuri.org/action/BDKServerObj2.GetStatementEx", RequestNamespace="http://tempuri.org/message/", ResponseNamespace="http://tempuri.org/message/")]
        public void GetStatementEx(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnStatementSet, bool returnNotificationSet, string orderId, out string errorXml, out string accountStatementInfoSetXml, out string userNotificationSetXml) {
            object[] results = this.Invoke("GetStatementEx", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        objectId,
                        beginBillingPeriodId,
                        endBillingPeriodId,
                        returnStatementSet,
                        returnNotificationSet,
                        orderId});
            errorXml = ((string)(results[0]));
            accountStatementInfoSetXml = ((string)(results[1]));
            userNotificationSetXml = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void GetStatementExAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnStatementSet, bool returnNotificationSet, string orderId) {
            this.GetStatementExAsync(delegateIdHigh, delegateIdLow, requesterIdHigh, requesterIdLow, objectId, beginBillingPeriodId, endBillingPeriodId, returnStatementSet, returnNotificationSet, orderId, null);
        }
        
        /// <remarks/>
        public void GetStatementExAsync(int delegateIdHigh, int delegateIdLow, int requesterIdHigh, int requesterIdLow, string objectId, uint beginBillingPeriodId, uint endBillingPeriodId, byte returnStatementSet, bool returnNotificationSet, string orderId, object userState) {
            if ((this.GetStatementExOperationCompleted == null)) {
                this.GetStatementExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatementExOperationCompleted);
            }
            this.InvokeAsync("GetStatementEx", new object[] {
                        delegateIdHigh,
                        delegateIdLow,
                        requesterIdHigh,
                        requesterIdLow,
                        objectId,
                        beginBillingPeriodId,
                        endBillingPeriodId,
                        returnStatementSet,
                        returnNotificationSet,
                        orderId}, this.GetStatementExOperationCompleted, userState);
        }
        
        private void OnGetStatementExOperationCompleted(object arg) {
            if ((this.GetStatementExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatementExCompleted(this, new GetStatementExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class BdkSoapHeader : SoapHeader {
        
        private int partitionIdField;
        
        /// <remarks/>
        public int PartitionId {
            get {
                return this.partitionIdField;
            }
            set {
                this.partitionIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class OnBehalfOfSoapHeader : SoapHeader {
        
        private string partnerNameField;
        
        /// <remarks/>
        public string PartnerName {
            get {
                return this.partnerNameField;
            }
            set {
                this.partnerNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class UserContextualInfoSoapHeader : SoapHeader {
        
        private string iPAddressField;
        
        private string deviceTypeField;
        
        private string deviceIdField;
        
        private string acceptLanguageField;
        
        private string acceptCharsetField;
        
        private string requestHeaderDateField;
        
        private string userAgentField;
        
        private string xForwardedForField;
        
        /// <remarks/>
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
        /// <remarks/>
        public string DeviceType {
            get {
                return this.deviceTypeField;
            }
            set {
                this.deviceTypeField = value;
            }
        }
        
        /// <remarks/>
        public string DeviceId {
            get {
                return this.deviceIdField;
            }
            set {
                this.deviceIdField = value;
            }
        }
        
        /// <remarks/>
        public string AcceptLanguage {
            get {
                return this.acceptLanguageField;
            }
            set {
                this.acceptLanguageField = value;
            }
        }
        
        /// <remarks/>
        public string AcceptCharset {
            get {
                return this.acceptCharsetField;
            }
            set {
                this.acceptCharsetField = value;
            }
        }
        
        /// <remarks/>
        public string RequestHeaderDate {
            get {
                return this.requestHeaderDateField;
            }
            set {
                this.requestHeaderDateField = value;
            }
        }
        
        /// <remarks/>
        public string UserAgent {
            get {
                return this.userAgentField;
            }
            set {
                this.userAgentField = value;
            }
        }
        
        /// <remarks/>
        public string XForwardedFor {
            get {
                return this.xForwardedForField;
            }
            set {
                this.xForwardedForField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSubscriptionHistoryCompletedEventHandler(object sender, GetSubscriptionHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriptionHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriptionHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plHistoryEventCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrSubscriptionHistoryEventSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServiceComponentsCompletedEventHandler(object sender, GetServiceComponentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceComponentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceComponentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plServiceComponentCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrServiceComponentSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSubscriptionsCompletedEventHandler(object sender, GetSubscriptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plSubscriptionInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrSubscriptionInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSubscriptionStatusCompletedEventHandler(object sender, GetSubscriptionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubscriptionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubscriptionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrSubscriptionStatusInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTokenClassRestrictionInfoForPUIDCompletedEventHandler(object sender, GetTokenClassRestrictionInfoForPUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokenClassRestrictionInfoForPUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokenClassRestrictionInfoForPUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string tokenClassRestrictionInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTokenClassesCompletedEventHandler(object sender, GetTokenClassesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokenClassesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokenClassesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int plAdditionalTokenClassCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plTokenClassReturnedCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrTokenClassSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTokenInfoCompletedEventHandler(object sender, GetTokenInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokenInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokenInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrTokenOrderXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTokenInfoExCompletedEventHandler(object sender, GetTokenInfoExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTokenInfoExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTokenInfoExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrTokenOrderXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTransactionsCompletedEventHandler(object sender, GetTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string transactionSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUnconditionalReplacementTokenCompletedEventHandler(object sender, GetUnconditionalReplacementTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnconditionalReplacementTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnconditionalReplacementTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string replacementPin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int signature {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sequenceNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserProfileCompletedEventHandler(object sender, GetUserProfileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserProfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserProfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string userProfileXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ImportSettledBillingItemCompletedEventHandler(object sender, ImportSettledBillingItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportSettledBillingItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportSettledBillingItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrResultXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrNewLineItemsXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IssueTokenTrustedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsPaymentInstrumentBannedCompletedEventHandler(object sender, IsPaymentInstrumentBannedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPaymentInstrumentBannedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPaymentInstrumentBannedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plIsBanned {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LoadTokenInstanceCompletedEventHandler(object sender, LoadTokenInstanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadTokenInstanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadTokenInstanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string responseXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void MarkTokenDistributionStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void MapAddressCompletedEventHandler(object sender, MapAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MapAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MapAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string MapAddressInfoSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void MatchPaymentInstrumentInfoCompletedEventHandler(object sender, MatchPaymentInstrumentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MatchPaymentInstrumentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MatchPaymentInstrumentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plAdminPUIDHigh {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAdminPUIDLow {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void MigrateOfferCompletedEventHandler(object sender, MigrateOfferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MigrateOfferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MigrateOfferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plRemovedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrRemoveServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OffsetLineItemCompletedEventHandler(object sender, OffsetLineItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OffsetLineItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OffsetLineItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OffsetLineItem2CompletedEventHandler(object sender, OffsetLineItem2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OffsetLineItem2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OffsetLineItem2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrNewLineItemXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OffsetOrderCompletedEventHandler(object sender, OffsetOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OffsetOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OffsetOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string orderReceiptXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OffsetSingleUsageEventCompletedEventHandler(object sender, OffsetSingleUsageEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OffsetSingleUsageEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OffsetSingleUsageEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string newLineItemXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OrderCDforAccountCompletedEventHandler(object sender, OrderCDforAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrderCDforAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OrderCDforAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long orderId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OrderCDforAnonymousCompletedEventHandler(object sender, OrderCDforAnonymousCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrderCDforAnonymousCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OrderCDforAnonymousCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long orderId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PayUserCompletedEventHandler(object sender, PayUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PayUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PayUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string payUserResultXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessChargebackCompletedEventHandler(object sender, ProcessChargebackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessChargebackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessChargebackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string chargebackResponseInfoXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProvisionServicesCompletedEventHandler(object sender, ProvisionServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProvisionServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProvisionServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseItemCompletedEventHandler(object sender, PurchaseItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string receiptXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseItemExCompletedEventHandler(object sender, PurchaseItemExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseItemExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseItemExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string receiptXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseOfferingCompletedEventHandler(object sender, PurchaseOfferingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseOfferingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseOfferingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrSubscriptionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseOfferingExCompletedEventHandler(object sender, PurchaseOfferingExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseOfferingExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseOfferingExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrSubscriptionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseOfferingEx2CompletedEventHandler(object sender, PurchaseOfferingEx2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseOfferingEx2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseOfferingEx2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrSubscriptionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string pbstrRedirectOutputInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PurchaseOfferingEx3CompletedEventHandler(object sender, PurchaseOfferingEx3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseOfferingEx3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseOfferingEx3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrSubscriptionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string pbstrRedirectOutputInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReconcileTokenTrustedCompletedEventHandler(object sender, ReconcileTokenTrustedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReconcileTokenTrustedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReconcileTokenTrustedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int reconStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RefundTaxForAccountCompletedEventHandler(object sender, RefundTaxForAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RefundTaxForAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RefundTaxForAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrNewLineItemSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterPaymentInstrumentCompletedEventHandler(object sender, RegisterPaymentInstrumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterPaymentInstrumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterPaymentInstrumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string paymentInstrumentId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string requiredPaperWorkUrl {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string paymentInstrumentsResultsXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReinstateSubscriptionCompletedEventHandler(object sender, ReinstateSubscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReinstateSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReinstateSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrSubscriptionStatusInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveBillingReferenceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemovePaymentInstrumentCompletedEventHandler(object sender, RemovePaymentInstrumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemovePaymentInstrumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemovePaymentInstrumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemovePMNBasedServicesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveRoleAssignmentCompletedEventHandler(object sender, RemoveRoleAssignmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveRoleAssignmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveRoleAssignmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveViolationCompletedEventHandler(object sender, RemoveViolationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveViolationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveViolationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrStatusInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReportSingleUsageEventCompletedEventHandler(object sender, ReportSingleUsageEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportSingleUsageEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportSingleUsageEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string lineItemId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string usageInfoXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string amountChargedXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReportTransactionEventCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReportUsageEventCompletedEventHandler(object sender, ReportUsageEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportUsageEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportUsageEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReschedulePaymentCompletedEventHandler(object sender, ReschedulePaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReschedulePaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReschedulePaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchAccountsCompletedEventHandler(object sender, SearchAccountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pfMoreRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAccountInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchAccountsExCompletedEventHandler(object sender, SearchAccountsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchAccountsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchAccountsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string bookmarkNew {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int returnedAccountCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string accountInfoSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchBillingInfoCompletedEventHandler(object sender, SearchBillingInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchBillingInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchBillingInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string billingInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendHCICompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SendValidationTokenInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetBillingReferenceCompletedEventHandler(object sender, SetBillingReferenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetBillingReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetBillingReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string billingReferenceId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetPartnerConfigurationCompletedEventHandler(object sender, SetPartnerConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPartnerConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPartnerConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string responseXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SettleBalanceCompletedEventHandler(object sender, SettleBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SettleBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SettleBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SettleOrderCompletedEventHandler(object sender, SettleOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SettleOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SettleOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string orderReceiptXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void WriteOffBalanceCompletedEventHandler(object sender, WriteOffBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WriteOffBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WriteOffBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string transactionId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SignAgreementCompletedEventHandler(object sender, SignAgreementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignAgreementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignAgreementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void StopPaymentsCompletedEventHandler(object sender, StopPaymentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopPaymentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopPaymentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SubmitOrderCompletedEventHandler(object sender, SubmitOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string orderReceiptXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SwitchPaymentInstrumentsCompletedEventHandler(object sender, SwitchPaymentInstrumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SwitchPaymentInstrumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SwitchPaymentInstrumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SyncUPSCacheForPUIDCompletedEventHandler(object sender, SyncUPSCacheForPUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SyncUPSCacheForPUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SyncUPSCacheForPUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TestConnectionCompletedEventHandler(object sender, TestConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrOutputString {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TokenRedemptionCompletedEventHandler(object sender, TokenRedemptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TokenRedemptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TokenRedemptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string responseXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void TransferBalanceCompletedEventHandler(object sender, TransferBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransferBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnbanPaymentInstrumentCompletedEventHandler(object sender, UnbanPaymentInstrumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnbanPaymentInstrumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnbanPaymentInstrumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnbanUserCompletedEventHandler(object sender, UnbanUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnbanUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnbanUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnIssueTokenTrustedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateAccountInfoCompletedEventHandler(object sender, UpdateAccountInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAccountInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAccountInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrRequiredPaperWorkURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePaymentInstrumentInfoCompletedEventHandler(object sender, UpdatePaymentInstrumentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePaymentInstrumentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePaymentInstrumentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateSubscriptionInfoCompletedEventHandler(object sender, UpdateSubscriptionInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSubscriptionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSubscriptionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateProvisioningDataCompletedEventHandler(object sender, ValidateProvisioningDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateProvisioningDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateProvisioningDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrResponseXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateTokenCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ActivateTokenCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ActivateTokenExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddCommentCompletedEventHandler(object sender, AddCommentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddPaymentInstrumentCompletedEventHandler(object sender, AddPaymentInstrumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPaymentInstrumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPaymentInstrumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrPaymentInstrumentId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrRequiredPaperWorkURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddRoleAssignmentCompletedEventHandler(object sender, AddRoleAssignmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRoleAssignmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRoleAssignmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddViolationCompletedEventHandler(object sender, AddViolationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddViolationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddViolationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrStatusInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AdjustGotoBAMDateCompletedEventHandler(object sender, AdjustGotoBAMDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustGotoBAMDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustGotoBAMDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AdjustResourceBalanceCompletedEventHandler(object sender, AdjustResourceBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustResourceBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustResourceBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AdjustSubscriptionCompletedEventHandler(object sender, AdjustSubscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdjustSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdjustSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BanPaymentInstrumentCompletedEventHandler(object sender, BanPaymentInstrumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BanPaymentInstrumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BanPaymentInstrumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BanUserCompletedEventHandler(object sender, BanUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BanUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BanUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void BlacklistTokenCompletedEventHandler(object sender, BlacklistTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BlacklistTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BlacklistTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrBlacklistActionSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plBlacklistActionSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CalculateTaxCompletedEventHandler(object sender, CalculateTaxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateTaxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateTaxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string returnOrderDetailXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelConversionCompletedEventHandler(object sender, CancelConversionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelConversionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelConversionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int plRemovedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pbstrRemoveServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelPaymentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelRenewalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelSubscriptionCompletedEventHandler(object sender, CancelSubscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrSubscriptionStatusInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int plRemovedServiceInstanceCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pbstrRemovedServiceInstanceSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelSubscriptionExCompletedEventHandler(object sender, CancelSubscriptionExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelSubscriptionExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelSubscriptionExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string amountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string subscriptionStatusInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int removedServiceInstanceCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string removedServiceInstanceSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelTransactionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ChargePaymentInstrumentCompletedEventHandler(object sender, ChargePaymentInstrumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChargePaymentInstrumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChargePaymentInstrumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string paymentInstrumentResultsXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckCDAvailabilityCompletedEventHandler(object sender, CheckCDAvailabilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCDAvailabilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckCDAvailabilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string partnerName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckProvisioningStatusCompletedEventHandler(object sender, CheckProvisioningStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckProvisioningStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckProvisioningStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrResponseXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CloseAccountCompletedEventHandler(object sender, CloseAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CloseBalanceCompletedEventHandler(object sender, CloseBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CompleteConversionCompletedEventHandler(object sender, CompleteConversionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompleteConversionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompleteConversionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int plRemovedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string pbstrRemoveServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ConsumeTokenCompletedEventHandler(object sender, ConsumeTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConsumeTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConsumeTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string consumedTokenDetailsXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ConvertSubscriptionCompletedEventHandler(object sender, ConvertSubscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int plRemovedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string pbstrRemoveServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ConvertSubscriptionExCompletedEventHandler(object sender, ConvertSubscriptionExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertSubscriptionExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertSubscriptionExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int plRemovedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string pbstrRemoveServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ConvertSubscriptionEx2CompletedEventHandler(object sender, ConvertSubscriptionEx2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertSubscriptionEx2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertSubscriptionEx2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int plRemovedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string pbstrRemoveServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string pbstrRedirectOutputInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ConvertSubscriptionEx3CompletedEventHandler(object sender, ConvertSubscriptionEx3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertSubscriptionEx3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertSubscriptionEx3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAmountChargedXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAddedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrAddedServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int plRemovedServiceInstanceSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string pbstrRemoveServiceInstanceSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string pbstrRedirectOutputInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateAccountCompletedEventHandler(object sender, CreateAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrPaymentInstrumentId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string bstrRequiredPaperWorkURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreditPaymentInstrumentCompletedEventHandler(object sender, CreditPaymentInstrumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditPaymentInstrumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditPaymentInstrumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreditPaymentInstrumentExCompletedEventHandler(object sender, CreditPaymentInstrumentExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditPaymentInstrumentExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditPaymentInstrumentExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreditPaymentInstrumentEx2CompletedEventHandler(object sender, CreditPaymentInstrumentEx2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditPaymentInstrumentEx2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditPaymentInstrumentEx2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreditPaymentInstrumentEx3CompletedEventHandler(object sender, CreditPaymentInstrumentEx3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditPaymentInstrumentEx3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditPaymentInstrumentEx3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrError {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetUserProfileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeactivateTokenCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeactivateTokenExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeliverTokenCompletedEventHandler(object sender, DeliverTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeliverTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeliverTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrEncryptedTokenSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeprovisionServicesCompletedEventHandler(object sender, DeprovisionServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeprovisionServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeprovisionServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExtendSubscriptionCompletedEventHandler(object sender, ExtendSubscriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExtendSubscriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExtendSubscriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrNewExpirationDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void FixExistingAddressCompletedEventHandler(object sender, FixExistingAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FixExistingAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FixExistingAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public double confidenceScore {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int tryNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAccountIdFromAdminPUIDCompletedEventHandler(object sender, GetAccountIdFromAdminPUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountIdFromAdminPUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountIdFromAdminPUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pfMoreRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAccountInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAccountIdFromAdminPUIDExCompletedEventHandler(object sender, GetAccountIdFromAdminPUIDExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountIdFromAdminPUIDExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountIdFromAdminPUIDExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pfMoreRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAccountInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAccountIdFromPaymentInstrumentInfoCompletedEventHandler(object sender, GetAccountIdFromPaymentInstrumentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountIdFromPaymentInstrumentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountIdFromPaymentInstrumentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pfMoreRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int plAccountInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAccountIdFromPuidCompletedEventHandler(object sender, GetAccountIdFromPuidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountIdFromPuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountIdFromPuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string errorXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int moreRows {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int accountInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string accountInfoSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAccountIdFromTokenCompletedEventHandler(object sender, GetAccountIdFromTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountIdFromTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountIdFromTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plAccountInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAccountIdFromTokenIdCompletedEventHandler(object sender, GetAccountIdFromTokenIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountIdFromTokenIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountIdFromTokenIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plAccountInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAccountInfoCompletedEventHandler(object sender, GetAccountInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAccountStatusCompletedEventHandler(object sender, GetAccountStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountStatusInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAdjustmentsCompletedEventHandler(object sender, GetAdjustmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdjustmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdjustmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pcAppliedAdjustmentCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAppliedAdjustmentSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int pcAvailableAdjustmentCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string pbstrAvailableAdjustmentSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetBaseOfferingsCompletedEventHandler(object sender, GetBaseOfferingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBaseOfferingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBaseOfferingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plOfferingInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrOfferingInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetBaseOfferingsExCompletedEventHandler(object sender, GetBaseOfferingsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBaseOfferingsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBaseOfferingsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plOfferingInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrOfferingInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetBillingPeriodsCompletedEventHandler(object sender, GetBillingPeriodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBillingPeriodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBillingPeriodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plBillingPeriodCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrBillingPeriodSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetBillingReferenceCompletedEventHandler(object sender, GetBillingReferenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBillingReferenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBillingReferenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string billingReferenceInfoSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCommentsCompletedEventHandler(object sender, GetCommentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plCommentInfoSetCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrCommentInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEligibleOfferingsCompletedEventHandler(object sender, GetEligibleOfferingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEligibleOfferingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEligibleOfferingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plOfferingInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrOfferingInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEligibleOfferingsExCompletedEventHandler(object sender, GetEligibleOfferingsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEligibleOfferingsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEligibleOfferingsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plOfferingInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrOfferingInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEligibleSwitchPITypesCompletedEventHandler(object sender, GetEligibleSwitchPITypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEligibleSwitchPITypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEligibleSwitchPITypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plPITypeCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrPITypeSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetExistingAccountsByCriteriaCompletedEventHandler(object sender, GetExistingAccountsByCriteriaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExistingAccountsByCriteriaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExistingAccountsByCriteriaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plAccountDetailCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrAccountDetailSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetKeyCompletedEventHandler(object sender, GetKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrKeyXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLineItemHistoryCompletedEventHandler(object sender, GetLineItemHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLineItemHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLineItemHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string errorXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string lineItemHistorySetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string mcv {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPartnerConfigurationCompletedEventHandler(object sender, GetPartnerConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPartnerConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPartnerConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string responseXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPaymentInstrumentsCompletedEventHandler(object sender, GetPaymentInstrumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentInstrumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentInstrumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plPaymentInstrumentInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrPaymentInstrumentInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPaymentInstrumentsExCompletedEventHandler(object sender, GetPaymentInstrumentsExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentInstrumentsExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentInstrumentsExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plPaymentInstrumentInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrPaymentInstrumentInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPaymentInstrumentsEx2CompletedEventHandler(object sender, GetPaymentInstrumentsEx2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentInstrumentsEx2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentInstrumentsEx2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plPaymentInstrumentInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrPaymentInstrumentInfoSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPaymentMethodTypePropertiesCompletedEventHandler(object sender, GetPaymentMethodTypePropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentMethodTypePropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentMethodTypePropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string paymentTypeInfoSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPermitHistoryForObjectIdCompletedEventHandler(object sender, GetPermitHistoryForObjectIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermitHistoryForObjectIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermitHistoryForObjectIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string errorXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int permitCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string permitSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPermitsForObjectIdCompletedEventHandler(object sender, GetPermitsForObjectIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermitsForObjectIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermitsForObjectIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plPermitCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrPermitSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPermitsForPUIDCompletedEventHandler(object sender, GetPermitsForPUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermitsForPUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermitsForPUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plPermitCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrPermitSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPolicyCompletedEventHandler(object sender, GetPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrPolicyInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetProductClassesCompletedEventHandler(object sender, GetProductClassesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProductClassesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProductClassesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string productClassSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetProvisioningInfoCompletedEventHandler(object sender, GetProvisioningInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProvisioningInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProvisioningInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string ProvisioningInfoXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReferralDataCompletedEventHandler(object sender, GetReferralDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReferralDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReferralDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plReferralCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrReferralSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReferralEventsCompletedEventHandler(object sender, GetReferralEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReferralEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReferralEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string ReferralEventsInfoXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetResourceBalancesCompletedEventHandler(object sender, GetResourceBalancesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourceBalancesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResourceBalancesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorText {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pcResourceInfoCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrResourceInfoSet {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReplacementTokenCompletedEventHandler(object sender, GetReplacementTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReplacementTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReplacementTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string replacementPin {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int signature {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sequenceNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetReplacementTokenFromPuidCompletedEventHandler(object sender, GetReplacementTokenFromPuidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReplacementTokenFromPuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReplacementTokenFromPuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int tokenInfoReturnedCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string replacementTokenSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetResourcePricesCompletedEventHandler(object sender, GetResourcePricesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResourcePricesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResourcePricesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrErrorXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int plCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrResourcePriceSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetStatementCompletedEventHandler(object sender, GetStatementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string errorXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string accountStatementInfoSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string userNotificationSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetStoredValueTransactionsCompletedEventHandler(object sender, GetStoredValueTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStoredValueTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStoredValueTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string errorXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string storedValueTransactionSetXML {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetStatementExCompletedEventHandler(object sender, GetStatementExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatementExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatementExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string errorXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string accountStatementInfoSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string userNotificationSetXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591
